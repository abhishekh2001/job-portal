[{"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\index.js":"1","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\App.js":"2","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Home.js":"3","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\authService.js":"4","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Register.js":"5","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\RecruiterForm.js":"6","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\ApplicantRegister.js":"7","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\ApplicantForm.js":"8","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\RecruiterRegister.js":"9","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\formStyles.js":"10","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Login.js":"11","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\LoginForm.js":"12","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobPostDashboard.js":"13","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\listitems.js":"14","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobPostForm.js":"15","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\typeOfJob.js":"16","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\languages.js":"17","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\duration.js":"18","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\context\\auth.js":"19","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\PrivateRoute.js":"20","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\jobService.js":"21","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\Admin.js":"22","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\AppToolBar.js":"23","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Test.js":"24","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\generalStyles.js":"25","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobListDashboard.js":"26","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\recruiterService.js":"27","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobCard.js":"28","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobEditPopup.js":"29","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobEditForm.js":"30","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\JobListDashboard.js":"31","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\CustomTable.js":"32","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\applicantServices.js":"33","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\Apply.js":"34","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\applicationService.js":"35","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\MyApplications.js":"36","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\ViewApplications.js":"37","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\MasterAuth.js":"38","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\AcceptedEmployees.js":"39","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\Profile.js":"40","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\ApplicantProfile.js":"41","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\RecruiterProfile.js":"42"},{"size":197,"mtime":1610642890982,"results":"43","hashOfConfig":"44"},{"size":4224,"mtime":1611382822253,"results":"45","hashOfConfig":"44"},{"size":435,"mtime":1611121264610,"results":"46","hashOfConfig":"44"},{"size":406,"mtime":1610725898989,"results":"47","hashOfConfig":"44"},{"size":2507,"mtime":1610644158164,"results":"48","hashOfConfig":"44"},{"size":7514,"mtime":1611246683899,"results":"49","hashOfConfig":"44"},{"size":245,"mtime":1610652752887,"results":"50","hashOfConfig":"44"},{"size":12898,"mtime":1611240163536,"results":"51","hashOfConfig":"44"},{"size":276,"mtime":1610823452238,"results":"52","hashOfConfig":"44"},{"size":685,"mtime":1610872474557,"results":"53","hashOfConfig":"44"},{"size":178,"mtime":1610652454127,"results":"54","hashOfConfig":"44"},{"size":4549,"mtime":1610736503331,"results":"55","hashOfConfig":"44"},{"size":911,"mtime":1610824904725,"results":"56","hashOfConfig":"44"},{"size":3445,"mtime":1611390008638,"results":"57","hashOfConfig":"44"},{"size":10773,"mtime":1610821864293,"results":"58","hashOfConfig":"44"},{"size":77,"mtime":1610720586883,"results":"59","hashOfConfig":"44"},{"size":76,"mtime":1610720139199,"results":"60","hashOfConfig":"44"},{"size":52,"mtime":1610724683568,"results":"61","hashOfConfig":"44"},{"size":165,"mtime":1610731683357,"results":"62","hashOfConfig":"44"},{"size":630,"mtime":1610740606441,"results":"63","hashOfConfig":"44"},{"size":1310,"mtime":1611167934141,"results":"64","hashOfConfig":"44"},{"size":3319,"mtime":1611390168331,"results":"65","hashOfConfig":"44"},{"size":5466,"mtime":1611389912544,"results":"66","hashOfConfig":"44"},{"size":8053,"mtime":1610819495151,"results":"67","hashOfConfig":"44"},{"size":2360,"mtime":1610823282733,"results":"68","hashOfConfig":"44"},{"size":2204,"mtime":1611167750764,"results":"69","hashOfConfig":"44"},{"size":1454,"mtime":1611244861686,"results":"70","hashOfConfig":"44"},{"size":2602,"mtime":1611167747604,"results":"71","hashOfConfig":"44"},{"size":503,"mtime":1610872954643,"results":"72","hashOfConfig":"44"},{"size":5202,"mtime":1611167920957,"results":"73","hashOfConfig":"44"},{"size":13987,"mtime":1611156386118,"results":"74","hashOfConfig":"44"},{"size":2739,"mtime":1610985736725,"results":"75","hashOfConfig":"44"},{"size":1456,"mtime":1611240083313,"results":"76","hashOfConfig":"44"},{"size":3261,"mtime":1611246661537,"results":"77","hashOfConfig":"44"},{"size":1011,"mtime":1611155397375,"results":"78","hashOfConfig":"44"},{"size":7985,"mtime":1611157175567,"results":"79","hashOfConfig":"44"},{"size":11143,"mtime":1611245650872,"results":"80","hashOfConfig":"44"},{"size":1483,"mtime":1611170569957,"results":"81","hashOfConfig":"44"},{"size":8579,"mtime":1611221832536,"results":"82","hashOfConfig":"44"},{"size":575,"mtime":1611389818637,"results":"83","hashOfConfig":"44"},{"size":15379,"mtime":1611242273530,"results":"84","hashOfConfig":"44"},{"size":7740,"mtime":1611245719120,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1sr1n7j",{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"88"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"88"},"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\index.js",[],["189","190"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\App.js",["191"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Home.js",["192"],"import React, {useEffect} from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport useStyles from './styles/generalStyles'\r\n\r\nconst Home = () => {\r\n    const classes = useStyles()\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer}/>\r\n            <Button variant=\"contained\" color=\"secondary\">\r\n                Hello World\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\authService.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Register.js",["193","194","195","196","197"],"import RecruiterForm from '../../forms/RecruiterForm'\r\nimport {useState} from 'react'\r\nimport {ButtonGroup, Container, CssBaseline, Grid, Link, makeStyles, Typography} from '@material-ui/core'\r\nimport Button from '@material-ui/core/Button'\r\nimport 'fontsource-roboto'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    centerContainer: {\r\n        alignItems: 'center',\r\n        direction: 'column',\r\n        justify: 'center',\r\n    }\r\n}))\r\n\r\nconst Register = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                style={{height: '100vh'}}\r\n            >\r\n                <Grid container\r\n                      spacing={0}\r\n                      direction=\"column\"\r\n                      alignItems=\"center\"\r\n                      justify=\"center\"\r\n                      style={{background: '#efefef', paddingBottom: '20px'}}\r\n                >\r\n                    <Typography component=\"h1\" variant=\"h2\" style={{margin: '10px', color: '#414141'}}>\r\n                        Register as\r\n                    </Typography>\r\n                    <ButtonGroup>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"large\"\r\n                            href=\"/applicantRegister\"\r\n                        >\r\n                            Applicant\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                            href=\"/recruiterRegister\"\r\n                        >\r\n                            Recruiter\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\RecruiterForm.js",["198"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\n\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport {useState} from 'react'\r\nimport {Alert} from '@material-ui/lab'\r\nimport useStyles from '../styles/formStyles'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nconst wordCount = (str) => {\r\n    return str.split(/\\s+/).length\r\n}\r\n\r\n\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: yup\r\n        .string('Enter your password')\r\n        .min(8, 'Password should be of minimum 8 characters length')\r\n        .required('Password is required'),\r\n    confirmPassword: yup\r\n        .string('Enter your password')\r\n        .required('Confirm your password')\r\n        .oneOf([yup.ref('password')], 'Password does not match'),\r\n    name: yup\r\n        .string('Enter your name')\r\n        .required('Name is required'),\r\n    bio: yup\r\n        .string('Enter your bio')\r\n        .test('wordcount',\r\n            'Bio is limited to 250 characters',\r\n            (v, c) => !v || wordCount(v) <= 250),\r\n    contactNumber: yup\r\n        .string('Enter your contact number')\r\n        .required('Contact number is required')\r\n})\r\n\r\n\r\nconst App = ({setMessage, classes, setRegistered}) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            name: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            bio: '',\r\n            contactNumber: ''\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={async (values, {setSubmitting}) => {\r\n            console.log('Submitting')\r\n            try {\r\n                const regBody = {...values, type: 'recruiter'}\r\n                const savedUser = await authService.register(regBody)\r\n                setMessage(null)\r\n                console.log('savedUser', savedUser)\r\n                setSubmitting(false)\r\n                setRegistered(true)\r\n            } catch (err) {\r\n                console.log('err', err.response.data.error)\r\n                setMessage(err.response.data.error)\r\n                setSubmitting(false)\r\n            }\r\n        }}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            placeholder=\"Jon Doe\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            placeholder=\"jon.doe@example.com\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"ConfirmPassword\"\r\n                            name=\"confirmPassword\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"text\"\r\n                            label=\"Bio\"\r\n                            name=\"bio\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            multiline\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"text\"\r\n                            label=\"ContactNumber\"\r\n                            name=\"contactNumber\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                    className={classes.submit}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                    <Grid item>\r\n                        <Link href=\"/login\" variant=\"body2\">\r\n                            Already have an account? Sign in\r\n                        </Link>\r\n                        <br/>\r\n                        <Link href=\"/register\" variant=\"body2\">\r\n                            Choose type of user\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\n\r\nconst RecruiterForm = () => {\r\n    const [registered, setRegistered] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n    const classes = useStyles()\r\n\r\n    if (registered) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign up\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n\r\n                <App setMessage={setMessage} classes={classes} setRegistered={setRegistered} />\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default RecruiterForm\r\n\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\ApplicantRegister.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\ApplicantForm.js",["199","200"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {Formik, Form, Field, FieldArray, getIn} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport MuiTextField from '@material-ui/core/TextField'\r\n\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\n\r\nimport {\r\n    Autocomplete,\r\n    AutocompleteRenderInputParams,\r\n} from 'formik-material-ui-lab'\r\nimport {Alert} from '@material-ui/lab'\r\nimport {useState} from 'react'\r\nimport useStyles from '../styles/formStyles'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {languages} from '../utils/languages'\r\n\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: yup\r\n        .string('Enter your password')\r\n        .min(8, 'Password should be of minimum 8 characters length')\r\n        .required('Password is required'),\r\n    confirmPassword: yup\r\n        .string('Enter your password')\r\n        .required('Confirm your password')\r\n        .oneOf([yup.ref('password')], 'Password does not match'),\r\n    name: yup\r\n        .string('Enter your name')\r\n        .required('Name is required'),\r\n    education: yup.array().of(\r\n        yup.object().shape({\r\n            instituteName: yup\r\n                .string()\r\n                .required('Institute name is required'),\r\n            startYear: yup\r\n                .number('Must be a number')\r\n                .required('Start year is required')\r\n                .min(1800, 'Invalid year')\r\n                .max(2040, 'Range not supported'),\r\n            endYear: yup\r\n                .number()\r\n                .min(yup.ref('startYear'), 'End year must be after start')\r\n                .max(2040, 'Range not supported')\r\n        })\r\n    )\r\n})\r\n\r\n\r\nconst App = ({setMessage, classes, setRegistered}) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            password: '',\r\n            name: '',\r\n            confirmPassword: '',\r\n            skills: [],\r\n            education: [\r\n                {\r\n                    key: Math.random(),\r\n                    instituteName: '',\r\n                    startYear: '',\r\n                    endYear: ''\r\n                }\r\n            ]\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={async (values, {setSubmitting}) => {\r\n            try {\r\n                const regBody = {...values, type: 'applicant'}\r\n                const savedUser = await authService.register(regBody)\r\n                setMessage(null)\r\n                console.log('savedUser', savedUser)\r\n                setSubmitting(false)\r\n                setRegistered(true)\r\n            } catch (err) {\r\n                console.log('err', err)\r\n                setMessage(err.response.data.error)\r\n                setSubmitting(false)\r\n            }\r\n        }}\r\n    >\r\n        {({\r\n              values,\r\n              isSubmitting,\r\n              touched,\r\n              errors\r\n          }) => (\r\n            <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            placeholder=\"Jon Doe\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            placeholder=\"jon.doe@example.com\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"ConfirmPassword\"\r\n                            name=\"confirmPassword\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            name=\"skills\"\r\n                            multiple\r\n                            freeSolo\r\n                            component={Autocomplete}\r\n                            options={languages}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            renderInput={(params: AutocompleteRenderInputParams) => (\r\n                                <MuiTextField\r\n                                    {...params}\r\n                                    error={touched['skills'] && !!errors['skills']}\r\n                                    helperText={touched['skills'] && errors['skills']}\r\n                                    label=\"Skills\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Education\r\n                        </Typography>\r\n                        <FieldArray name=\"education\">\r\n                            {({push, remove}) => (\r\n                                <Grid>\r\n                                    {values.education.map((p, index) => {\r\n                                        const instituteName = `education[${index}].instituteName`\r\n                                        const startYear = `education[${index}].startYear`\r\n                                        const endYear = `education[${index}].endYear`\r\n\r\n                                        return (\r\n                                            <Grid container spacing={1} key={p.key}>\r\n                                                <Grid item xs={12}>\r\n                                                    <Field\r\n                                                        component={TextField}\r\n                                                        type=\"text\"\r\n                                                        label=\"Institute Name\"\r\n                                                        name={instituteName}\r\n                                                        autoComplete='off'\r\n                                                        variant=\"outlined\"\r\n                                                        required\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={12} sm={5}>\r\n                                                    <Field\r\n                                                        component={TextField}\r\n                                                        type=\"number\"\r\n                                                        label=\"Start Year\"\r\n                                                        name={startYear}\r\n                                                        autoComplete='off'\r\n                                                        variant=\"outlined\"\r\n                                                        required\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={12} sm={5}>\r\n                                                    <Field\r\n                                                        component={TextField}\r\n                                                        type=\"number\"\r\n                                                        label=\"End Year\"\r\n                                                        name={endYear}\r\n                                                        autoComplete='off'\r\n                                                        variant=\"outlined\"\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} sm={2}>\r\n                                                    <Button\r\n                                                        type=\"button\"\r\n                                                        color=\"secondary\"\r\n                                                        variant=\"outlined\"\r\n                                                        onClick={() => remove(index)}\r\n                                                    >\r\n                                                        x\r\n                                                    </Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        )\r\n                                    })}\r\n                                    <Grid item xs={5} style={{marginTop: '20px'}}>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            push({key: Math.random(), instituteName: '', startYear: '', endYear: ''})\r\n                                        }\r\n                                    >\r\n                                        Add Education\r\n                                    </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            )}\r\n                        </FieldArray>\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                    className={classes.submit}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                    <Grid item>\r\n                        <Link href=\"/login\" variant=\"body2\">\r\n                            Already have an account? Sign in\r\n                        </Link>\r\n                        <br/>\r\n                        <Link href=\"/register\" variant=\"body2\">\r\n                            Choose type of user\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nconst ApplicantForm = () => {\r\n    const [message, setMessage] = useState(null)\r\n    const [registered, setRegistered] = useState(false)\r\n    const classes = useStyles()\r\n\r\n    if (registered) {\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h4\">\r\n                    Sign up\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n                <App setMessage={setMessage} classes={classes} setRegistered={setRegistered}/>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ApplicantForm\r\n\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\RecruiterRegister.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\formStyles.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Login.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\LoginForm.js",["201"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\n\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport {useState} from 'react'\r\nimport {Alert} from '@material-ui/lab'\r\nimport useStyles from '../styles/formStyles'\r\nimport {useAuth} from '../../context/auth'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: yup\r\n        .string('Enter your password')\r\n        .required('Password is required')\r\n})\r\n\r\n\r\nconst App = ({classes, onSubmit}) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            password: ''\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            placeholder=\"jon.doe@example.com\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                    className={classes.submit}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                    <Grid item>\r\n                        <Link href=\"/register\" variant=\"body2\">\r\n                            Don't have an account? Sign up!\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\n\r\nconst LoginForm = () => {\r\n    const [isLoggedIn, setLoggedIn] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n    const classes = useStyles()\r\n\r\n    const { setAuthTokens } = useAuth()\r\n\r\n    const postLogin = async (values, {setSubmitting}) => {\r\n        console.log('Submitting')\r\n        try {\r\n            const regBody = {...values}\r\n            const result = await authService.login(regBody)\r\n            setMessage(null)\r\n            console.log('result', result)\r\n            setSubmitting(false)\r\n            setAuthTokens({token: result.token, type: result.type})\r\n            setLoggedIn(true)\r\n        } catch (err) {\r\n            console.log('err', err.response.data.error)\r\n            setMessage(err.response.data.error)\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n                <App classes={classes} onSubmit={postLogin}/>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobPostDashboard.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\listitems.js",["202","203"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobPostForm.js",["204","205","206","207","208","209"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles,\r\n    Container,\r\n    CssBaseline,\r\n    Avatar,\r\n    Grid,\r\n    Link,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\nimport {\r\n    TextField\r\n} from 'formik-material-ui'\r\nimport {\r\n    DateTimePicker\r\n} from 'formik-material-ui-pickers'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport {useState} from 'react'\r\nimport {Alert} from '@material-ui/lab'\r\nimport useStyles from '../styles/formStyles'\r\nimport {\r\n    Autocomplete,\r\n    AutocompleteRenderInputParams\r\n} from 'formik-material-ui-lab'\r\nimport MuiTextField from '@material-ui/core/TextField'\r\nimport {languages} from '../utils/languages'\r\nimport {typeOfJobsArray} from '../utils/typeOfJob'\r\nimport {durationArray} from '../utils/duration'\r\nimport jobService from '../../services/jobService'\r\nimport {useAuth} from '../../context/auth'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nconst validationSchema = yup.object({\r\n    title: yup\r\n        .string('Enter the title')\r\n        .required('Title is required'),\r\n    maxApplications: yup\r\n        .number('Enter max Applications')\r\n        .integer('Enter a valid integer')\r\n        .min(0, 'Enter a valid number')\r\n        .required('Max number of applicants is required'),\r\n    maxPositions: yup\r\n        .number('Enter max positions')\r\n        .integer('Enter a valid integer')\r\n        .min(0, 'Enter a valid number')\r\n        .required('Max positions available is required'),\r\n    deadline: yup\r\n        .date('Enter the deadline')\r\n        .min(new Date(), 'Select a deadline after now')  // TODO: Check\r\n        .required('Deadline is required'),\r\n    typeOfJob: yup\r\n        .string('Select type of job')\r\n        .oneOf(typeOfJobsArray, 'Selection is not valid')\r\n        .required('Select type of job'),\r\n    duration: yup\r\n        .number('Choose duration')\r\n        .integer('Enter a valid integer')\r\n        .min(0, 'Select valid duration')\r\n        .max(6, 'Maximum duration is 6 months or zero (indefinite)'),\r\n    salaryPerMonth: yup\r\n        .number('Choose a salary')\r\n        .integer('Enter an integer')\r\n        .min(0)\r\n})\r\n\r\n\r\nconst App = ({onSubmit, classes}) => (\r\n    <Formik\r\n        initialValues={{\r\n            title: '',\r\n            maxApplications: '',\r\n            maxPositions: '',\r\n            deadline: new Date(),\r\n            skillSetsRequired: [],\r\n            typeOfJob: 'Full-time',\r\n            duration: '0',\r\n            salaryPerMonth: ''\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <Form className={classes.form}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                label=\"Title\"\r\n                                name=\"title\"\r\n                                placeholder=\"Job Title\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                name=\"maxApplications\"\r\n                                type=\"number\"\r\n                                label=\"Max Applicants\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"number\"\r\n                                label=\"Max Positions\"\r\n                                name=\"maxPositions\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={DateTimePicker}\r\n                                label=\"Deadline\"\r\n                                name=\"deadline\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                name=\"skillSetsRequired\"\r\n                                multiple\r\n                                freeSolo\r\n                                component={Autocomplete}\r\n                                options={languages}\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                renderInput={(params: AutocompleteRenderInputParams) => (\r\n                                    <MuiTextField\r\n                                        {...params}\r\n                                        error={touched['skills'] && !!errors['skills']}\r\n                                        helperText={touched['skills'] && errors['skills']}\r\n                                        label=\"Skills\"\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"text\"\r\n                                label=\"Type of Job\"\r\n                                name=\"typeOfJob\"\r\n                                select\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            >\r\n                                {typeOfJobsArray.map((option) => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Field>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"Number\"\r\n                                label=\"Duration\"\r\n                                name=\"duration\"\r\n                                helperText=\"Between 0 and 6\"\r\n                                select\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                            >\r\n                                {durationArray.map((option) => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option === 0 ? '(inf) ' + option : option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Field>\r\n\r\n                            <Grid item xs={12}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"number\"\r\n                                    label=\"Salary\"\r\n                                    name=\"salaryPerMonth\"\r\n                                    autoComplete='off'\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        {isSubmitting && <LinearProgress/>}\r\n                    </Grid>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                        className={classes.submit}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </MuiPickersUtilsProvider>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\n\r\nconst JobPostForm = () => {\r\n    const [message, setMessage] = useState(null)\r\n    const [created, setCreated] = useState(false)\r\n    const classes = useStyles()\r\n\r\n    const { authTokens } = useAuth()\r\n\r\n    const postJob = async (values, {setSubmitting}) => {\r\n        console.log('Submitting')\r\n        try {\r\n            const jobPostBody = {...values, dateOfPosting: new Date()}\r\n            console.log('jobPostBody', jobPostBody)\r\n            const response = await jobService.postOne(jobPostBody, authTokens.token)\r\n            console.log('response', response)\r\n            setMessage(null)\r\n            setSubmitting(false)\r\n            setCreated(true)\r\n        } catch (err) {\r\n            console.log('err', err.response.data.error)\r\n            setMessage(err.response.data.error)\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    if (created) {\r\n        return <Redirect to=\"/dashboard\" />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\">\r\n            <div className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Create a job\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n                <App onSubmit={postJob} classes={classes}/>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default JobPostForm\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\typeOfJob.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\languages.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\duration.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\context\\auth.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\PrivateRoute.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\jobService.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\Admin.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\AppToolBar.js",["210","211","212","213","214"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Test.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\generalStyles.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobListDashboard.js",["215","216","217","218","219"],"import recruiterService from '../../../services/recruiterService'\r\nimport {useAuth} from '../../../context/auth'\r\nimport {Button, withMobileDialog} from '@material-ui/core'\r\nimport useStyles from '../../styles/generalStyles'\r\nimport {useEffect, useState} from 'react'\r\nimport JobCard from './JobCard'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport JobEditPopup from './JobEditPopup'\r\nimport JobEditForm from '../../forms/JobEditForm'\r\nimport LoginForm from '../../forms/LoginForm'\r\nimport jobService from '../../../services/jobService'\r\n\r\nconst JobListDashboard = () => {\r\n    const classes = useStyles()\r\n    const { authTokens } = useAuth()\r\n    const [jobs, setJobs] = useState([])\r\n\r\n    const getActiveJobs = jobs => {\r\n        return jobs.filter(j => j.positionStatus === 'free')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getRecruiterJobs = async () => {\r\n            try {\r\n                const response = await recruiterService.getRecruiterJobs(authTokens.token)\r\n                console.log('response jobs', response)\r\n                setJobs(getActiveJobs(response))\r\n            } catch (err) {\r\n                console.log('err', err.response)\r\n            }\r\n        }\r\n\r\n        getRecruiterJobs()\r\n    }, [authTokens.token])\r\n\r\n    const getUpdatedJob = async (id) => {\r\n        const job = await jobService.getOne(id)\r\n        const updatedJobs = jobs.map(j => j._id.toString() === id ? job : j)\r\n        setJobs(getActiveJobs(updatedJobs))\r\n    }\r\n\r\n    const deleteJob = async (id) => {\r\n        try {\r\n            await jobService.deleteOne(id, authTokens.token)\r\n            setJobs(jobs.filter(j => j._id !== id))\r\n        } catch (err) {\r\n            console.log('caught err', err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer} />\r\n            <Grid container spacing={2}>\r\n                {jobs.map(job => (\r\n                    <Grid item xs={12} sm={4} key={job._id}>\r\n                        <JobCard job={job} deleteJob={() => deleteJob(job._id)} getUpdatedJob={getUpdatedJob} />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JobListDashboard\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\recruiterService.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobCard.js",["220"],"import React, {useState} from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActionArea from '@material-ui/core/CardActionArea'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {Link} from 'react-router-dom'\r\nimport JobEditForm from '../../forms/JobEditForm'\r\nimport JobEditPopup from './JobEditPopup'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 340,\r\n    },\r\n    media: {\r\n        height: 'auto',\r\n    },\r\n})\r\n\r\nconst JobCard = ({job, deleteJob}) => {\r\n    const classes = useStyles()\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <Link to={`/viewApplications/${job._id}`} style={{textDecoration: 'none', color: 'inherit'}}>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {job.title}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Date of posting: {job.dateOfPosting} <br/>\r\n                            Number of applicants: {job.currApplicants}<br/>\r\n                            Positions left: {job.maxPositions - job.currPositions}\r\n                            {console.log('positions left ', job.maxPositions, job.currPositions)}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Link>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\" onClick={() => setOpenPopup(true)}>\r\n                    Edit\r\n                </Button>\r\n                <Button size=\"small\" color=\"secondary\" onClick={deleteJob}>\r\n                    Delete\r\n                </Button>\r\n            </CardActions>\r\n            <JobEditPopup\r\n                openPopup={openPopup}\r\n                setOpenPopup={setOpenPopup}\r\n                title={job.title}\r\n            >\r\n                <JobEditForm\r\n                    job={job}\r\n                    handleOnUpdate={() => getUpdatedJob(job._id.toString())}\r\n                    setOpenPopup={setOpenPopup}\r\n                />\r\n            </JobEditPopup>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default JobCard\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobEditPopup.js",["221"],"import {Dialog, DialogContent, DialogTitle, Divider} from '@material-ui/core'\r\n\r\n\r\nconst JobEditPopup = (props) => {\r\n    const {title, children, openPopup, setOpenPopup} = props\r\n\r\n    return (\r\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\r\n            <DialogTitle>\r\n                {title}\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n                {children}\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default JobEditPopup\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobEditForm.js",["222","223","224","225","226"],"import * as yup from 'yup'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\nimport {useState} from 'react'\r\nimport {Alert} from '@material-ui/lab'\r\nimport useStyles from '../styles/formStyles'\r\nimport {useAuth} from '../../context/auth'\r\nimport {Redirect} from 'react-router-dom'\r\nimport jobService from '../../services/jobService'\r\nimport {DateTimePicker} from 'formik-material-ui-pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers'\r\n\r\nconst validationSchema = yup.object({\r\n    maxApplications: yup\r\n        .number('enter number')\r\n        .min(0, 'entry not valid')\r\n        .integer(),\r\n    maxPositions: yup\r\n        .number('enter number')\r\n        .min(0, 'entry not valid')\r\n        .integer()\r\n})\r\n\r\n\r\nconst App = ({classes, onSubmit, job}) => (\r\n    <Formik\r\n        initialValues={{\r\n            maxApplications: job.maxApplications,\r\n            maxPositions: job.maxPositions,\r\n            deadline: job.deadline\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <Form className={classes.modalForm}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                name=\"maxApplications\"\r\n                                type=\"number\"\r\n                                label=\"Max number of applicants\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"number\"\r\n                                label=\"Max number of positions\"\r\n                                name=\"maxPositions\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={DateTimePicker}\r\n                                label=\"Deadline\"\r\n                                name=\"deadline\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        {isSubmitting && <LinearProgress/>}\r\n                    </Grid>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                        className={classes.submit}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </MuiPickersUtilsProvider>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\n\r\nconst JobEditForm = ({job, handleOnUpdate, jobs, setOpenPopup}) => {\r\n    const [message, setMessage] = useState(null)\r\n    const [error, setError] = useState(true)\r\n    const classes = useStyles()\r\n\r\n    console.log('job', job.maxPositions)\r\n\r\n    const {authTokens} = useAuth()\r\n\r\n\r\n    const updateJob = async (values, {setSubmitting}) => {\r\n        try {\r\n            const body = {...values}\r\n            const result = await jobService.updateOne(job._id, body, authTokens.token)\r\n            setMessage(null)\r\n            console.log('result', result)\r\n\r\n            setError(false)\r\n            setMessage('Updated')\r\n            await new Promise((resolve)=>setTimeout(() => {\r\n                resolve()\r\n            }, 1000))\r\n            setSubmitting(false)\r\n            handleOnUpdate()\r\n            setOpenPopup(false)\r\n        } catch (err) {\r\n            console.log('err', err.response)\r\n            if (err.response.data.error) {\r\n                console.log('err', err.response.data.error)\r\n                setMessage(err.response.data.error)\r\n            }\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <Grid>\r\n                {message &&\r\n                    <Alert\r\n                        style={{marginBottom: '15px'}}\r\n                        severity={error ? \"error\" : \"success\"}\r\n                    >{message}</Alert>}\r\n                <App job={job} classes={classes} onSubmit={updateJob}/>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default JobEditForm\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\JobListDashboard.js",["227","228","229","230","231","232","233","234"],"// Joblistings for the applicants\r\nimport React, {useState, useEffect} from 'react'\r\nimport jobService from '../../../services/jobService'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport useStyles from '../../styles/generalStyles'\r\nimport {\r\n    Button, ButtonGroup,\r\n    LinearProgress, MenuItem,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport CustomTable from '../../CustomTable'\r\nimport {Field, Form, Formik} from 'formik'\r\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {TextField} from 'formik-material-ui'\r\nimport {DateTimePicker} from 'formik-material-ui-pickers'\r\nimport {typeOfJobsArray} from '../../utils/typeOfJob'\r\nimport {durationArray} from '../../utils/duration'\r\nimport authService from '../../../services/authService'\r\nimport applicantServices from '../../../services/applicantServices'\r\nimport {lightGreen} from '@material-ui/core/colors'\r\nimport {useAuth} from '../../../context/auth'\r\nimport {Link} from 'react-router-dom'\r\nimport format from 'date-fns/format'\r\nimport Fuse from 'fuse.js'\r\nimport {Rating} from '@material-ui/lab'\r\n\r\nconst FilterForm = ({classes, filter, setFilter, setFilterFn}) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                title: filter.title,\r\n                typeOfJob: filter.typeOfJob,\r\n                minSalary: filter.minSalary,\r\n                maxSalary: filter.maxSalary,\r\n                duration: filter.duration\r\n            }}\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                setFilterFn({\r\n                    fn: (items) => {\r\n                        let returnArr = items\r\n                        if (values.title !== '') {\r\n                            const fuse = new Fuse(returnArr, {\r\n                                keys: ['title']\r\n                            })\r\n                            console.log('search', fuse.search(values.title))\r\n                            returnArr = fuse.search(values.title).map(res => res.item)\r\n                        }\r\n                        if (values.typeOfJob !== '')\r\n                            returnArr = returnArr.filter(item => item.typeOfJob === values.typeOfJob)\r\n                        if (values.minSalary !== '')\r\n                            returnArr = returnArr.filter(item => item.salaryPerMonth >= values.minSalary)\r\n                        if (values.maxSalary !== '')\r\n                            returnArr = returnArr.filter(item => item.salaryPerMonth < values.maxSalary)\r\n                        if (values.duration !== '')\r\n                            returnArr = returnArr.filter(item => item.duration < values.duration)\r\n                        return returnArr\r\n                    }\r\n                })\r\n\r\n                setSubmitting(false)\r\n            }}\r\n        >\r\n            {({submitForm, isSubmitting, touched, errors}) => (\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <Form className={classes.form}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"text\"\r\n                                    label=\"Title\"\r\n                                    name=\"title\"\r\n                                    autoComplete='off'\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"text\"\r\n                                    label=\"Type of Job\"\r\n                                    name=\"typeOfJob\"\r\n                                    select\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                >\r\n                                    {typeOfJobsArray.map((option) => (\r\n                                        <MenuItem key={option} value={option}>\r\n                                            {option}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Field>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"text\"\r\n                                    label=\"Duration\"\r\n                                    name=\"duration\"\r\n                                    select\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                >\r\n                                    {durationArray.map((option) => (\r\n                                        <MenuItem key={option + 1} value={option + 1}>\r\n                                            {option + 1}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Field>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"number\"\r\n                                    label=\"Min Salary\"\r\n                                    name='minSalary'\r\n                                    autoComplete='off'\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"number\"\r\n                                    label=\"Max salary\"\r\n                                    name=\"maxSalary\"\r\n                                    autoComplete='off'\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                            {isSubmitting && <LinearProgress/>}\r\n                        </Grid>\r\n\r\n                        <ButtonGroup fullWidth style={{marginTop: '30px'}}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                fullWidth\r\n                                type=\"submit\"\r\n                                disabled={isSubmitting}\r\n                                className={classes.submit}\r\n                            >\r\n                                Filter\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                fullWidth\r\n                                type='reset'\r\n                                disabled={isSubmitting}\r\n                            >\r\n                                Reset\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Form>\r\n                </MuiPickersUtilsProvider>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst ApplicantJobListDashboard = () => {\r\n    const classes = useStyles()\r\n    const {authTokens} = useAuth()\r\n    const [jobs, setJobs] = useState([])\r\n    const [jobsAppliedTo, setJobsAppliedTo] = useState([])\r\n    const [filterFn, setFilterFn] = useState({fn: (items) => items})\r\n    const headers = [\r\n        {id: 'title', name: 'Title', sortable: false},\r\n        {id: 'recName', name: 'Rec. Name', sortable: false},\r\n        {id: 'rating', name: 'Job Rating', sortable: true},\r\n        {id: 'salaryPerMonth', name: 'Salary', sortable: true},\r\n        {id: 'duration', name: 'Duration', sortable: true},\r\n        {id: 'deadline', name: 'Deadline', sortable: false},\r\n        {id: 'type', name: 'Type', sortable: false},\r\n        {id: 'apply', name: 'Apply', sortable: false}\r\n    ]\r\n    const {\r\n        SortableTable,\r\n        recordsAfterSorting\r\n    } = CustomTable(jobs, headers, filterFn)\r\n\r\n    const filter = {\r\n        title: '',\r\n        typeOfJob: '',\r\n        minSalary: '',\r\n        maxSalary: '',\r\n        duration: ''\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                console.log('token', authTokens.token)\r\n                const response = await applicantServices.getJobsAppliedTo(authTokens.token)\r\n                setJobsAppliedTo(response)\r\n            } catch (err) {\r\n                console.log('error while getting jobs applied', err)\r\n            }\r\n        })()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log('filterfn', filterFn)\r\n    }, [filterFn])\r\n\r\n    const getActiveJobs = (jobs) => {\r\n        return jobs.filter(job => new Date(job.deadline) > new Date())\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const response = await jobService.getAll()\r\n            for (let ind in response) {\r\n                if (response[ind].ratings.length > 0)\r\n                    response[ind]['rating'] = (response[ind].ratings\r\n                        .reduce((acc, el) => acc + el.value, 0)) / response[ind].ratings.length\r\n                else\r\n                    response[ind]['rating'] = 0\r\n            }\r\n            console.log('response', response)\r\n            setJobs(getActiveJobs(response))\r\n        })()\r\n    }, [filterFn])\r\n\r\n    useEffect(() => {\r\n        console.log('jobs', jobs)\r\n    }, [jobs])\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer}/>\r\n            <Typography variant=\"h3\" component=\"h5\">\r\n                Browse Jobs\r\n            </Typography>\r\n            <Grid>\r\n                <Paper style={{padding: '40px', marginBottom: '40px'}}>\r\n                    <Typography variant=\"h4\" component=\"h5\">\r\n                        Filter\r\n                    </Typography>\r\n                    <FilterForm filter={filter} setFilterFn={setFilterFn} classes={classes}/>\r\n                </Paper>\r\n                <Paper>\r\n                    <SortableTable\r\n                        records={jobs}\r\n                        headCells={headers}\r\n                        filterFn={filterFn}\r\n                        setData={setJobs}\r\n                    >\r\n                        <TableBody>\r\n                            {recordsAfterSorting().map(item => (\r\n                                <TableRow key={item._id}>\r\n                                    <TableCell>{item.title}</TableCell>\r\n                                    <TableCell>{item.recruiter.user.name}</TableCell>\r\n                                    <TableCell>\r\n                                        <Rating name=\"read-only\" precision={0.5} size='small' value={item.rating} readOnly />\r\n                                    </TableCell>\r\n                                    <TableCell>{item.salaryPerMonth}</TableCell>\r\n                                    <TableCell>{item.duration}</TableCell>\r\n                                    <TableCell>{format((new Date(item.deadline)), 'yyyy-MM-dd\\'T\\'HH:mm')}</TableCell>\r\n                                    <TableCell>{item.typeOfJob}</TableCell>\r\n                                    <TableCell>\r\n                                        {jobsAppliedTo.indexOf(item._id) >= 0 ?\r\n                                            <Button disabled color='secondary'>Applied</Button>\r\n                                            :\r\n                                            (item.applicationStatus === 'full' || item.positionStatus === 'full' ?\r\n                                                    <Button\r\n                                                        disabled\r\n                                                        classes={{ disabled: classes.disabledButton }}\r\n                                                        variant='contained'\r\n                                                    >\r\n                                                        Full\r\n                                                    </Button>\r\n                                                    :\r\n                                                    <Button\r\n                                                        variant='outlined'\r\n                                                        color='primary'\r\n                                                        href={`/apply/${item._id}`}\r\n                                                    >\r\n                                                        Apply\r\n                                                    </Button>\r\n                                            )\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </SortableTable>\r\n                </Paper>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ApplicantJobListDashboard\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\CustomTable.js",["235","236"],"import React, {useEffect, useState} from 'react'\r\nimport {Table, TableHead, TableRow, TableCell, makeStyles, TableSortLabel} from '@material-ui/core'\r\n\r\nexport default function CustomTable(records, headCells, filterFn) {\r\n    const [order, setOrder] = useState()\r\n    const [orderBy, setOrderBy] = useState()\r\n\r\n    const handleSortRequest = (cellId) => {\r\n        const isAsc = orderBy === cellId && order === 'asc'\r\n        setOrder(isAsc ? 'desc' : 'asc')\r\n        setOrderBy(cellId)\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('calling sort', orderBy, order)\r\n        recordsAfterSorting()\r\n    }, [orderBy, order])\r\n\r\n\r\n    function stableSort(array, comparator) {\r\n        const stabilizedThis = array.map((el, index) => [el, index])\r\n        stabilizedThis.sort((a, b) => {\r\n            const order = comparator(a[0], b[0])\r\n            if (order !== 0) return order\r\n            return a[1] - b[1]\r\n        })\r\n        return stabilizedThis.map((el) => el[0])\r\n    }\r\n\r\n    function getComparator(order, orderBy) {\r\n        return order === 'desc'\r\n            ? (a, b) => descendingComparator(a, b, orderBy)\r\n            : (a, b) => -descendingComparator(a, b, orderBy)\r\n    }\r\n\r\n    function descendingComparator(a, b, orderBy) {\r\n        if (b[orderBy] < a[orderBy]) {\r\n            return -1\r\n        }\r\n        if (b[orderBy] > a[orderBy]) {\r\n            return 1\r\n        }\r\n        return 0\r\n    }\r\n\r\n    const recordsAfterSorting = () => {\r\n        console.log('sorted', stableSort(filterFn.fn(records), getComparator(order, orderBy)))\r\n        return stableSort(filterFn.fn(records), getComparator(order, orderBy))\r\n    }\r\n\r\n    const SortableTable = ({children}) => (\r\n        <Table>\r\n            <TableHead>\r\n                <TableRow>\r\n                    {headCells.map(headCell => (\r\n                        <TableCell key={headCell.id}\r\n                                   sortDirection={orderBy === headCell.id ? order : false}>\r\n                            {!headCell.sortable ? headCell.name :\r\n                                <TableSortLabel\r\n                                    active={orderBy === headCell.id}\r\n                                    direction={orderBy === headCell.id ? order : 'asc'}\r\n                                    onClick={() => handleSortRequest(headCell.id)}\r\n                                >\r\n                                    {headCell.name}\r\n                                </TableSortLabel>\r\n                            }\r\n                        </TableCell>\r\n                    ))}\r\n                </TableRow>\r\n            </TableHead>\r\n\r\n            {children}\r\n        </Table>\r\n    )\r\n\r\n    return {\r\n        SortableTable,\r\n        recordsAfterSorting\r\n    }\r\n}\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\applicantServices.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\Apply.js",["237"],"import * as yup from 'yup'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Grid,\r\n} from '@material-ui/core'\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\n\r\nimport React, {useEffect, useState} from 'react'\r\nimport {Alert} from '@material-ui/lab'\r\nimport useStyles from '../../styles/generalStyles'\r\nimport applicationService from '../../../services/applicationService'\r\nimport {useAuth} from '../../../context/auth'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst wordCount = (str) => {\r\n    return str.split(/\\s+/).length\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n    sop: yup\r\n        .string('Enter sop')\r\n        .required('sop is required')\r\n        .test('wordcount',\r\n            'Bio is limited to 250 characters',\r\n            (v, c) => !v || wordCount(v) <= 250),\r\n})\r\n\r\n\r\nconst App = ({classes, onSubmit}) => (\r\n    <Formik\r\n        initialValues={{\r\n            sop: '',\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            aria-label=\"minimum height\"\r\n                            multiline\r\n                            name=\"sop\"\r\n                            type=\"text\"\r\n                            label=\"SOP\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                    className={classes.submit}\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nconst ApplyToJob = (props) => {\r\n    const { authTokens } = useAuth()\r\n    const [message, setMessage] = useState(null)\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        console.log('props match', props.match.params.jobId)\r\n    }, [])\r\n\r\n    const postApplication = async (values, {setSubmitting}) => {\r\n        try {\r\n            const savedApp = await applicationService.applyToJob(props.match.params.jobId, values, authTokens.token)\r\n            console.log('save as', savedApp)\r\n            props.history.push('/browseJobs')\r\n        } catch (err) {\r\n            setMessage({error: true, content: err.response.data.error})\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer}/>\r\n            {message && <Alert severity={message.error ? 'error' : 'success'}>{message.content}</Alert>}\r\n            <App classes={classes} onSubmit={postApplication} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(ApplyToJob)\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\applicationService.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\MyApplications.js",["238","239","240"],"import React, {useState, useEffect} from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport useStyles from '../../styles/generalStyles'\r\nimport {\r\n    Button, Dialog, DialogContent, DialogTitle, LinearProgress, MenuItem, Paper,\r\n    TableBody, TableCell, TableRow,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport applicantServices from '../../../services/applicantServices'\r\nimport {useAuth} from '../../../context/auth'\r\nimport CustomTable from '../../CustomTable'\r\nimport format from 'date-fns/format'\r\nimport {Field, Form, Formik} from 'formik'\r\nimport {TextField} from 'formik-material-ui'\r\nimport * as yup from 'yup'\r\nimport applicationService from '../../../services/applicationService'\r\nimport {Alert, Rating} from '@material-ui/lab'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nconst validationSchema = yup.object({\r\n    value: yup\r\n        .number('enter rating')\r\n        .required()\r\n        .integer('Should be an integer')\r\n})\r\n\r\nconst RatePopup = (props) => {\r\n    const {title, children, openPopup, setOpenPopup} = props\r\n\r\n    return (\r\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\r\n            <DialogContent dividers>\r\n                {children}\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nconst App = ({onSubmit}) => (\r\n    <Formik\r\n        initialValues={{\r\n            value: 0\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <Form>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"number\"\r\n                            label=\"Rating\"\r\n                            name=\"value\"\r\n                            select\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        >\r\n                            {[0, 1, 2, 3, 4, 5].map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Field>\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nconst MyApplications = (props) => {\r\n    const classes = useStyles()\r\n    const {authTokens} = useAuth()\r\n    const [myApplications, setMyApplications] = useState([])\r\n    const [message, setMessage] = useState(null)\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const filterFn = {\r\n        fn: (items) => items\r\n    }\r\n    const headers = [\r\n        {id: 'title', name: 'Title', sortable: false},\r\n        {id: 'dateOfJoining', name: 'Joining date', sortable: false},\r\n        {id: 'salaryPerMonth', name: 'Salary', sortable: false},\r\n        {id: 'recruiterName', name: 'Recruiter name', sortable: false},\r\n        {id: 'status', name: 'Status', sortable: false},\r\n        {id: 'rating', name: 'My Rating', sortable: false}\r\n    ]\r\n    const {\r\n        SortableTable,\r\n        recordsAfterSorting\r\n    } = CustomTable(myApplications, headers, filterFn)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const data = await applicantServices.getApplications(authTokens.token)\r\n                console.log('myAppls', data)\r\n                setMyApplications(data)\r\n            } catch (err) {\r\n                console.log('err', err)\r\n                console.log('err.response', err.response)\r\n            }\r\n        })()\r\n    }, [])\r\n\r\n\r\n    const setRatings = (appId) => async (values, {setSubmitting}) => {\r\n        try {\r\n            const response = await applicationService.rateJob(appId, values, authTokens.token)\r\n            console.log('response', response)\r\n            setOpenPopup(false)\r\n            window.location.reload()\r\n        } catch (err) {\r\n            setMessage(err.response.data.error)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer}/>\r\n            <Typography variant=\"h3\" component=\"h5\" style={{marginBottom: '40px'}}>\r\n                My Applications\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n                <Grid component={Paper} xs={12}>\r\n                    <SortableTable\r\n                        records={myApplications}\r\n                        headCells={headers}\r\n                        filterFn={filterFn}\r\n                        setData={setMyApplications}\r\n                    >\r\n                        <TableBody>\r\n                            {recordsAfterSorting().map(item => (\r\n                                <TableRow key={item._id}>\r\n                                    <TableCell>{item.job.title}</TableCell>\r\n                                    <TableCell>\r\n                                        {item.dateOfJoining ?\r\n                                            format((new Date(item.dateOfJoining)), 'yyyy-MM-dd\\'T\\'HH:mm')\r\n                                            :\r\n                                            'Not Applicable'\r\n                                        }\r\n                                    </TableCell>\r\n                                    <TableCell>{item.job.salaryPerMonth}</TableCell>\r\n                                    <TableCell>{item.job.recruiter.user.name}</TableCell>\r\n                                    <TableCell>{item.status}</TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            item.status === 'accepted' ?\r\n                                                item.myRating === -1 ?\r\n                                                    (<div>\r\n                                                    <Button variant='outlined'\r\n                                                            onClick={() => setOpenPopup(true)}\r\n                                                    >\r\n                                                        Rate\r\n                                                    </Button>\r\n                                                    <RatePopup\r\n                                                        openPopup={openPopup}\r\n                                                        setOpenPopup={setOpenPopup}\r\n                                                    >\r\n                                                        {message && <Alert severity='error'>{message}</Alert>}\r\n                                                        <App onSubmit={setRatings(item._id)} />\r\n                                                    </RatePopup>\r\n                                                </div>)\r\n                                                    :\r\n                                                    (<Rating readOnly size='small' value={item.myRating}/>)\r\n                                                :\r\n                                                'Not Applicable'\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </SortableTable>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(MyApplications)","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\ViewApplications.js",["241"],"import {useAuth} from '../../../context/auth'\r\nimport React, {useEffect, useState} from 'react'\r\nimport CustomTable from '../../CustomTable'\r\nimport useStyles from '../../styles/generalStyles'\r\nimport jobService from '../../../services/jobService'\r\nimport {\r\n    Box, ButtonGroup, Chip,\r\n    Collapse, Divider,\r\n    makeStyles,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown'\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp'\r\nimport format from 'date-fns/format'\r\nimport {Alert, Rating} from '@material-ui/lab'\r\nimport Button from '@material-ui/core/Button'\r\nimport applicationService from '../../../services/applicationService'\r\n\r\nconst useRowStyles = makeStyles({\r\n    root: {\r\n        '& > *': {\r\n            borderBottom: 'unset',\r\n        },\r\n    },\r\n    miniTableHead: {\r\n        '& > *': {\r\n            fontWeight: 'bold'\r\n        }\r\n    },\r\n    chip: {\r\n        margin: '5px',\r\n    },\r\n    chipArray: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        listStyle: 'none',\r\n        margin: 0\r\n    }\r\n})\r\n\r\n\r\nconst CustomTableRow = ({item, setMessage, recToken}) => {\r\n    const [open, setOpen] = useState(false)\r\n    const classes = useRowStyles()\r\n    let choice\r\n    const updateStatus = async (status) => {\r\n        const body = {\r\n            status\r\n        }\r\n        try {\r\n            const updated = await applicationService.updateApplicationStatus(item._id.toString(), body, recToken)\r\n            console.log('response', updated)\r\n            window.location.reload()\r\n        } catch (err) {\r\n            console.log('err', err.response)\r\n            setMessage({severity: 'error', content: err.response.data.error})\r\n        }\r\n    }\r\n    if (item.status === 'applied') {\r\n        choice = (\r\n            <ButtonGroup>\r\n                <Button color='primary' onClick={() => updateStatus('shortlisted')}>Shortlist</Button>\r\n                <Button color='secondary' onClick={() => updateStatus('rejected')}>Reject</Button>\r\n            </ButtonGroup>\r\n        )\r\n    } else if (item.status === 'shortlisted') {\r\n        choice = (\r\n            <ButtonGroup>\r\n                <Button color='primary' onClick={() => updateStatus('accepted')}>Accept</Button>\r\n                <Button color='secondary' onClick={() => updateStatus('rejected')}>Reject</Button>\r\n            </ButtonGroup>\r\n        )\r\n    } else {\r\n        choice = (\r\n            <Button fullWidth disabled>Accepted</Button>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow className={classes.root}>\r\n                <TableCell>\r\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                        {open ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell>{item.appName}</TableCell>\r\n                <TableCell>{format((new Date(item.dateOfApplication)), 'yyyy-MM-dd\\'T\\'HH:mm')}</TableCell>\r\n                <TableCell>{item.status}</TableCell>\r\n                <TableCell><Rating name=\"read-only\" value={item.applicantRating} precision={0.5} readOnly/></TableCell>\r\n                <TableCell>\r\n                    {choice}\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell style={{paddingBottom: 0, paddingTop: 0}} colSpan={6}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box margin={1}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\" style={{fontWeight: 'bold'}}>\r\n                                Education\r\n                            </Typography>\r\n                            <Table size=\"small\" aria-label=\"Education\">\r\n                                <TableHead>\r\n                                    <TableRow className={classes.miniTableHead}>\r\n                                        <TableCell>Institute Name</TableCell>\r\n                                        <TableCell>Start Year</TableCell>\r\n                                        <TableCell>End Year</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {item.applicant.education.map(ed => (\r\n                                        <TableRow key={ed._id}>\r\n                                            <TableCell component=\"th\" scope=\"row\">\r\n                                                {ed.instituteName}\r\n                                            </TableCell>\r\n                                            <TableCell>{ed.startYear}</TableCell>\r\n                                            <TableCell>{ed.endYear}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                            <Divider/>\r\n                            <Grid container style={{marginTop: '30px'}}>\r\n                                <Grid item xs={2}>\r\n                                    <Typography variant=\"h6\" gutterBottom component=\"div\" style={{fontWeight: 'bold'}}>\r\n                                        Skills\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Grid className={classes.chipArray} component='ul'>\r\n                                        {item.applicant.skills.map((sk, it) => (\r\n                                            <li key={it}>\r\n                                                <Chip\r\n                                                    icon={null}\r\n                                                    label={sk}\r\n                                                    className={classes.chip}\r\n                                                />\r\n                                            </li>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container style={{marginTop: '30px'}}>\r\n                                    <Typography variant=\"h6\" gutterBottom component=\"div\" style={{fontWeight: 'bold'}}>\r\n                                        Statement of Purpose\r\n                                    </Typography>\r\n                                    <Grid item xs={12}\r\n                                          style={{backgroundColor: '#6C7A89',\r\n                                              color: 'white',\r\n                                              padding: '30px',\r\n                                              whiteSpace: 'pre-wrap'\r\n                                          }}>\r\n                                        {item.sop}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst ViewApplications = (props) => {\r\n    const classes = useStyles()\r\n    const {authTokens} = useAuth()\r\n    const [applications, setApplications] = useState([])\r\n    const [message, setMessage] = useState(null)\r\n    const [jobTitle, setJobTitle] = useState('')\r\n    const [filterFn, setFilterFn] = useState({fn: (items) => items})\r\n    const {jobId} = props.match.params\r\n    const headers = [\r\n        {id: 'bl', name: '', sortable: false},\r\n        {id: 'appName', name: 'Name', sortable: true},\r\n        {id: 'dateOfApplication', name: 'Application date', sortable: true},\r\n        {id: 'state', name: 'State', sortable: false},\r\n        {id: 'applicantRating', name: 'Rating', sortable: true},\r\n        {id: 'proceed', name: 'Choose', sortable: false}\r\n    ]\r\n    const {\r\n        SortableTable,\r\n        recordsAfterSorting\r\n    } = CustomTable(applications, headers, filterFn)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const response = await jobService.getApplications(jobId)\r\n                console.log('immediate', response)\r\n                for (let ind in response) {\r\n                    let applicantRating = 0\r\n                    if (response[ind].applicant.ratings.length > 0) {\r\n                        console.log('rating in ', response[ind])\r\n                        applicantRating = response[ind].applicant.ratings\r\n                            .reduce((cum, cur) => cum + cur.value, 0) / response[ind].applicant.ratings.length\r\n                    }\r\n                    response[ind].appName = response[ind].applicant.user.name\r\n                    response[ind].applicantRating = applicantRating\r\n                    console.log('name', response[ind].applicant.user.name)\r\n                }\r\n                console.log('response modified to ', response)\r\n                setApplications(response.filter(ap => ap.status !== 'rejected'))\r\n\r\n                const job = await jobService.getOne(jobId)\r\n                setJobTitle(job.title)\r\n            } catch (err) {\r\n                console.log('error', err)\r\n            }\r\n        })()\r\n    }, [jobId])\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer}/>\r\n            {message && <Alert severity={message.severity}>{message.content}</Alert> }\r\n            <Grid container style={{marginBottom: '40px'}}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h3\" component='h5'>\r\n                        {jobTitle}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h4\" component=\"h6\">\r\n                        View applications\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid>\r\n                <Paper>\r\n                    <SortableTable\r\n                        records={applications}\r\n                        headCells={headers}\r\n                        filterFn={filterFn}\r\n                        setData={setApplications}\r\n                    >\r\n                        <TableBody>\r\n                            {recordsAfterSorting().map(item => (\r\n                                <CustomTableRow\r\n                                    item={item}\r\n                                    key={item._id}\r\n                                    setMessage={setMessage}\r\n                                    recToken={authTokens.token}\r\n                                />\r\n                            ))}\r\n                        </TableBody>\r\n                    </SortableTable>\r\n                </Paper>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewApplications\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\MasterAuth.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\AcceptedEmployees.js",["242","243","244","245"],"import React, {useEffect, useState} from 'react'\r\nimport recruiterService from '../../../services/recruiterService'\r\nimport {useAuth} from '../../../context/auth'\r\nimport CustomTable from '../../CustomTable'\r\nimport {Alert, Rating} from '@material-ui/lab'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogContent, LinearProgress,\r\n    MenuItem,\r\n    Paper,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport format from 'date-fns/format'\r\nimport useStyles from '../../styles/generalStyles'\r\nimport applicationService from '../../../services/applicationService'\r\nimport * as yup from 'yup'\r\nimport {Field, Form, Formik} from 'formik'\r\nimport {TextField} from 'formik-material-ui'\r\n\r\nconst validationSchema = yup.object({\r\n    value: yup\r\n        .number('enter rating')\r\n        .required()\r\n        .integer('Should be an integer')\r\n})\r\n\r\nconst RatePopup = (props) => {\r\n    const {title, children, openPopup, setOpenPopup} = props\r\n\r\n    return (\r\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\r\n            <DialogContent dividers>\r\n                {children}\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nconst App = ({onSubmit}) => (\r\n    <Formik\r\n        initialValues={{\r\n            value: 0\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <Form>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"number\"\r\n                            label=\"Rating\"\r\n                            name=\"value\"\r\n                            select\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        >\r\n                            {[0, 1, 2, 3, 4, 5].map((option) => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Field>\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nconst CustomRow = ({item, token}) => {\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const setRatings = (appId) => async (values, {setSubmitting}) => {\r\n        try {\r\n            const response = await recruiterService.rateApplicant(appId, values, token)\r\n            console.log('response', response)\r\n            setOpenPopup(false)\r\n            window.location.reload()\r\n        } catch (err) {\r\n            setMessage(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TableRow key={item._id}>\r\n            <TableCell>{item.appName}</TableCell>\r\n            <TableCell>\r\n                {format((new Date(item.dateOfJoining)), 'yyyy-MM-dd\\'T\\'HH:mm')}\r\n            </TableCell>\r\n            <TableCell>{item.job.typeOfJob}</TableCell>\r\n            <TableCell>{item.jobTitle}</TableCell>\r\n            <TableCell>\r\n                <Rating\r\n                    name=\"read-only\"\r\n                    precision={0.5}\r\n                    size='small'\r\n                    value={item.applicantRating}\r\n                    readOnly/>\r\n            </TableCell>\r\n            <TableCell>\r\n                <div>\r\n                    <Button variant='outlined'\r\n                            onClick={() => setOpenPopup(true)}\r\n                    >\r\n                        Rate\r\n                    </Button>\r\n                    <RatePopup\r\n                        openPopup={openPopup}\r\n                        setOpenPopup={setOpenPopup}\r\n                    >\r\n                        {message && <Alert severity='error'>{message}</Alert>}\r\n                        <App onSubmit={setRatings(item.applicant._id)}/>\r\n                    </RatePopup>\r\n                </div>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nconst AcceptedEmployees = () => {\r\n    const classes = useStyles()\r\n    const {authTokens} = useAuth()\r\n    const [message, setMessage] = useState(null)\r\n    const [acceptedApplications, setAcceptedApplications] = useState([])\r\n    const [filterFn, setFilterFn] = useState({fn: items => items})\r\n    const headers = [\r\n        {id: 'appName', name: 'Name', sortable: true},\r\n        {id: 'dateOfJoining', name: 'Date of Joining', sortable: true},\r\n        {id: 'type', name: 'Type', sortable: false},\r\n        {id: 'jobTitle', name: 'Job Title', sortable: true},\r\n        {id: 'applicantRating', name: 'Rating', sortable: true},\r\n        {id: 'rating', name: 'Rate', sortable: false}\r\n    ]\r\n    const {\r\n        SortableTable,\r\n        recordsAfterSorting\r\n    } = CustomTable(acceptedApplications, headers, filterFn)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const response = await recruiterService.getAcceptedApplications(authTokens.token)\r\n                console.log('immediate >', response)\r\n                for (let ind in response) {\r\n                    let applicantRating = 0\r\n                    if (response[ind].applicant.ratings.length > 0) {\r\n                        console.log('rating in ', response[ind])\r\n                        applicantRating = response[ind].applicant.ratings\r\n                            .reduce((cum, cur) => cum + cur.value, 0) / response[ind].applicant.ratings.length\r\n                    }\r\n                    response[ind].appName = response[ind].applicant.user.name\r\n                    response[ind].applicantRating = applicantRating\r\n                    response[ind].jobTitle = response[ind].job.title\r\n                }\r\n                console.log('modified response >', response)\r\n                setAcceptedApplications(response)\r\n            } catch (err) {\r\n                console.log('err', err.response)\r\n                if (err.response.data.error)\r\n                    setMessage({\r\n                        severity: 'error',\r\n                        content: err.response.data.error\r\n                    })\r\n            }\r\n        })()\r\n    }, [])\r\n\r\n    const setRatings = (appId) => async (values, {setSubmitting}) => {\r\n        try {\r\n            const response = await applicationService.rateJob(appId, values, authTokens.token)\r\n            console.log('response', response)\r\n            // setOpenPopup(false)\r\n            window.location.reload()\r\n        } catch (err) {\r\n            setMessage(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer}/>\r\n            {message && <Alert severity={message.severity}>{message.content}</Alert>}\r\n            <Grid container style={{marginBottom: '40px'}}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h3\" component='h5'>\r\n                        View accepted applications\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid>\r\n                <Paper>\r\n                    <SortableTable\r\n                        records={acceptedApplications}\r\n                        headCells={headers}\r\n                        filterFn={filterFn}\r\n                        setData={setAcceptedApplications}\r\n                    >\r\n                        <TableBody>\r\n                            {recordsAfterSorting().map(item => (\r\n                                <CustomRow\r\n                                    item={item}\r\n                                    token={authTokens.token}\r\n                                    key={item._id}\r\n                                />\r\n                            ))}\r\n                        </TableBody>\r\n                    </SortableTable>\r\n                </Paper>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AcceptedEmployees\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\Profile.js",["246","247"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\ApplicantProfile.js",["248","249","250","251"],"import useStyles from '../../styles/generalStyles'\r\nimport {useAuth} from '../../../context/auth'\r\nimport {useEffect, useState} from 'react'\r\nimport {\r\n    Box, Button,\r\n    Chip, LinearProgress, Link,\r\n    makeStyles,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport applicantServices from '../../../services/applicantServices'\r\nimport {Alert, Rating} from '@material-ui/lab'\r\nimport * as yup from 'yup'\r\nimport {Field, FieldArray, Form, Formik} from 'formik'\r\nimport authService from '../../../services/authService'\r\nimport {TextField} from 'formik-material-ui'\r\nimport {Autocomplete, AutocompleteRenderInputParams} from 'formik-material-ui-lab'\r\nimport {languages} from '../../utils/languages'\r\nimport MuiTextField from '@material-ui/core/TextField'\r\n\r\nconst formStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        marginBottom: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    modalForm: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(0)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}))\r\n\r\n\r\nconst chipStyles = makeStyles((theme) => ({\r\n    chipContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    },\r\n}))\r\n\r\nconst DisplayProfile = ({applicant, setEdit}) => {\r\n    const classes = chipStyles()\r\n    let ratingValue\r\n    if (applicant.ratings.length >= 0)\r\n        ratingValue = applicant.ratings.reduce((sum, curr) => sum = sum + curr.value, 0) / applicant.ratings.length\r\n\r\n    return (\r\n        <Paper>\r\n            <Grid container spacing={2} style={{padding: '30px', fontSize: '1.6em'}}>\r\n                <Grid item xs={12}>\r\n                    <b>Name:</b> {applicant.user.name}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <b>EmailId:</b> {applicant.user.email}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <b>Education:</b> <br />\r\n                    <Table className={classes.table}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Institute Name</TableCell>\r\n                                <TableCell>Start Year</TableCell>\r\n                                <TableCell>End year</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {applicant.education.map(ed => (\r\n                                <TableRow key={ed._id}>\r\n                                    <TableCell>{ed.instituteName}</TableCell>\r\n                                    <TableCell>{ed.startYear}</TableCell>\r\n                                    <TableCell>{ed.endYear}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    Skills:\r\n                    <Grid className={classes.chipContainer}>\r\n                        {applicant.skills.map((sk, it) => (\r\n                            <Chip key={it} label={sk} />\r\n                        ))}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    Rating: <Rating disabled precision={0.1} name='rating' value={ratingValue} />\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n    name: yup\r\n        .string('Enter your name')\r\n        .required('Name is required'),\r\n    education: yup.array().of(\r\n        yup.object().shape({\r\n            instituteName: yup\r\n                .string()\r\n                .required('Institute name is required'),\r\n            startYear: yup\r\n                .number('Must be a number')\r\n                .required('Start year is required')\r\n                .min(1800, 'Invalid year')\r\n                .max(2040, 'Range not supported'),\r\n            endYear: yup\r\n                .number()\r\n                .min(yup.ref('startYear'), 'End year must be after start')\r\n                .max(2040, 'Range not supported')\r\n        })\r\n    )\r\n})\r\n\r\n\r\nconst App = ({applicant, setMessage, classes, token}) => {\r\n    const initEducation = []\r\n    for (let ind in applicant.education) {\r\n        const temp = {...applicant.education[ind]}\r\n        initEducation.push({\r\n            key: temp._id,\r\n            instituteName: temp.instituteName,\r\n            startYear: temp.startYear,\r\n            endYear: temp.endYear || ''\r\n        })\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: applicant.user.name,\r\n                skills: applicant.skills,\r\n                education: initEducation\r\n            }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, {setSubmitting}) => {\r\n                console.log('hiii')\r\n                try {\r\n                    console.log('values', values)\r\n                    const savedUser = await applicantServices.updateApplicant(values, token)\r\n                    setMessage(null)\r\n                    console.log('savedUser', savedUser)\r\n                    setSubmitting(false)\r\n                    window.location.reload()\r\n                } catch (err) {\r\n                    console.log('err', err)\r\n                    setMessage(err.response.data.error)\r\n                    setSubmitting(false)\r\n                }\r\n            }}\r\n        >\r\n            {({\r\n                  values,\r\n                  isSubmitting,\r\n                  touched,\r\n                  errors\r\n              }) => (\r\n                <Form className={classes.form}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                placeholder=\"Jon Doe\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                name=\"skills\"\r\n                                multiple\r\n                                freeSolo\r\n                                component={Autocomplete}\r\n                                options={languages}\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                renderInput={(params: AutocompleteRenderInputParams) => (\r\n                                    <MuiTextField\r\n                                        {...params}\r\n                                        error={touched['skills'] && !!errors['skills']}\r\n                                        helperText={touched['skills'] && errors['skills']}\r\n                                        label=\"Skills\"\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Typography component=\"h1\" variant=\"h5\">\r\n                                Education\r\n                            </Typography>\r\n                            <FieldArray name=\"education\">\r\n                                {({push, remove}) => (\r\n                                    <Grid>\r\n                                        {values.education.map((p, index) => {\r\n                                            const instituteName = `education[${index}].instituteName`\r\n                                            const startYear = `education[${index}].startYear`\r\n                                            const endYear = `education[${index}].endYear`\r\n\r\n                                            return (\r\n                                                <Grid container spacing={1} key={p.key}>\r\n                                                    <Grid item xs={12}>\r\n                                                        <Field\r\n                                                            component={TextField}\r\n                                                            type=\"text\"\r\n                                                            label=\"Institute Name\"\r\n                                                            name={instituteName}\r\n                                                            autoComplete='off'\r\n                                                            variant=\"outlined\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12} sm={5}>\r\n                                                        <Field\r\n                                                            component={TextField}\r\n                                                            type=\"number\"\r\n                                                            label=\"Start Year\"\r\n                                                            name={startYear}\r\n                                                            autoComplete='off'\r\n                                                            variant=\"outlined\"\r\n                                                            required\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12} sm={5}>\r\n                                                        <Field\r\n                                                            component={TextField}\r\n                                                            type=\"number\"\r\n                                                            label=\"End Year\"\r\n                                                            name={endYear}\r\n                                                            autoComplete='off'\r\n                                                            variant=\"outlined\"\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={2} sm={2}>\r\n                                                        <Button\r\n                                                            type=\"button\"\r\n                                                            color=\"secondary\"\r\n                                                            variant=\"outlined\"\r\n                                                            onClick={() => remove(index)}\r\n                                                        >\r\n                                                            x\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            )\r\n                                        })}\r\n                                        <Grid item xs={5} style={{marginTop: '20px'}}>\r\n                                            <Button\r\n                                                type=\"button\"\r\n                                                variant=\"outlined\"\r\n                                                onClick={() =>\r\n                                                    push({key: Math.random(), instituteName: '', startYear: '', endYear: ''})\r\n                                                }\r\n                                            >\r\n                                                Add Education\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                )}\r\n                            </FieldArray>\r\n                        </Grid>\r\n                        {isSubmitting && <LinearProgress/>}\r\n                    </Grid>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                        className={classes.submit}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst ApplicantProfile = () => {\r\n    const classes = useStyles()\r\n    const formClasses = formStyles()\r\n    const {authTokens} = useAuth()\r\n    const [edit, setEdit] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n    const [currApplicant, setCurrApplicant] = useState(null)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                console.log('inside')\r\n                const response = await applicantServices.getApplicant(authTokens.token)\r\n                setCurrApplicant(response)\r\n            } catch (err) {\r\n                console.log('err', err.response)\r\n                if (err.response && err.response.data && err.response.data.error)\r\n                    setMessage(err.response.data.error)\r\n                else\r\n                    setMessage('Something went wrong')\r\n            }\r\n        })()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer} />\r\n            {message && <Alert severity='error'>{message}</Alert> }\r\n            {\r\n                edit ?\r\n                    (<Grid container spacing={2}><App applicant={currApplicant}\r\n                         setMessage={setMessage}\r\n                         classes={formClasses}\r\n                         token={authTokens.token}\r\n                    /></Grid>)\r\n                    :\r\n                    currApplicant &&\r\n                    (\r\n                        <div>\r\n                            <DisplayProfile\r\n                                applicant={currApplicant}\r\n                                setEdit={setEdit}\r\n                            />\r\n                            <Button fullWidth variant='contained' onClick={() => setEdit(true)}>Edit</Button>\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ApplicantProfile\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\RecruiterProfile.js",["252"],"import useStyles from '../../styles/generalStyles'\r\nimport {useAuth} from '../../../context/auth'\r\nimport {useEffect, useState} from 'react'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Paper,\r\n} from '@material-ui/core'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {Alert} from '@material-ui/lab'\r\nimport * as yup from 'yup'\r\nimport {Field, Form, Formik} from 'formik'\r\nimport {TextField} from 'formik-material-ui'\r\nimport recruiterService from '../../../services/recruiterService'\r\n\r\nconst formStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        marginBottom: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    modalForm: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(0)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}))\r\n\r\nconst DisplayProfile = ({applicant}) => {\r\n\r\n    return (\r\n        <Paper>\r\n            <Grid container spacing={2} style={{padding: '30px', fontSize: '1.6em'}}>\r\n                <Grid item xs={12}>\r\n                    <b>Name:</b> {applicant.user.name}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <b>EmailId:</b> {applicant.user.email}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <b>Bio</b><br />\r\n                    <Grid xs={12} style={{backgroundColor: '#746D69', color: 'white', padding: '30px', whiteSpace: 'pre-wrap'}}>\r\n                        {applicant.bio}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <b>Contact: </b> {applicant.contactNumber}\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nconst validationSchema = yup.object({\r\n    name: yup\r\n        .string('Enter your name')\r\n        .required('Name is required'),\r\n    bio: yup\r\n        .string('enter bio')\r\n        .required('bio required'),\r\n    contactNumber: yup\r\n        .string('enter number')\r\n        .required('contact is required')\r\n})\r\n\r\n\r\nconst App = ({applicant, setMessage, classes, token}) => {\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: applicant.user.name,\r\n                bio: applicant.bio,\r\n                contactNumber: applicant.contactNumber\r\n            }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, {setSubmitting}) => {\r\n                try {\r\n                    console.log('values', values, token)\r\n                    const savedUser = await recruiterService.updateRecruiter(values, token)\r\n                    setMessage(null)\r\n                    console.log('savedUser', savedUser)\r\n                    setSubmitting(false)\r\n                    window.location.reload()\r\n                } catch (err) {\r\n                    console.log('err', err)\r\n                    setMessage(err.response.data.error)\r\n                    setSubmitting(false)\r\n                }\r\n            }}\r\n        >\r\n            {({\r\n                  values,\r\n                  isSubmitting,\r\n                  touched,\r\n                  errors\r\n              }) => (\r\n                <Form className={classes.form}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                placeholder=\"Jon Doe\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"text\"\r\n                                label=\"Bio\"\r\n                                name=\"bio\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                multiline\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"text\"\r\n                                label=\"ContactNumber\"\r\n                                name=\"contactNumber\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        {isSubmitting && <LinearProgress/>}\r\n                    </Grid>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                        className={classes.submit}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst RecruiterProfile = () => {\r\n    const classes = useStyles()\r\n    const formClasses = formStyles()\r\n    const {authTokens} = useAuth()\r\n    const [edit, setEdit] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n    const [currRecruiter, setCurrRecruiter] = useState(null)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                console.log('inside')\r\n                const response = await recruiterService.getRecruiter(authTokens.token)\r\n                console.log('im response', response)\r\n                setCurrRecruiter(response)\r\n            } catch (err) {\r\n                console.log('err', err.response)\r\n                if (err.response && err.response.data && err.response.data.error)\r\n                    setMessage(err.response.data.error)\r\n                else\r\n                    setMessage('Something went wrong')\r\n            }\r\n        })()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer} />\r\n            {message && <Alert severity='error'>{message}</Alert> }\r\n            {\r\n                edit ?\r\n                    (<Grid container spacing={2}><App applicant={currRecruiter}\r\n                                                      setMessage={setMessage}\r\n                                                      classes={formClasses}\r\n                                                      token={authTokens.token}\r\n                    /></Grid>)\r\n                    :\r\n                    currRecruiter &&\r\n                    (\r\n                        <div>\r\n                            <DisplayProfile\r\n                                applicant={currRecruiter}\r\n                                setEdit={setEdit}\r\n                            />\r\n                            <Button fullWidth variant='contained' onClick={() => setEdit(true)}>Edit</Button>\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecruiterProfile\r\n",{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","severity":1,"message":"258","line":3,"column":8,"nodeType":"259","messageId":"260","endLine":3,"endColumn":16},{"ruleId":"257","severity":1,"message":"261","line":1,"column":16,"nodeType":"259","messageId":"260","endLine":1,"endColumn":25},{"ruleId":"257","severity":1,"message":"262","line":1,"column":8,"nodeType":"259","messageId":"260","endLine":1,"endColumn":21},{"ruleId":"257","severity":1,"message":"263","line":2,"column":9,"nodeType":"259","messageId":"260","endLine":2,"endColumn":17},{"ruleId":"257","severity":1,"message":"264","line":3,"column":33,"nodeType":"259","messageId":"260","endLine":3,"endColumn":44},{"ruleId":"257","severity":1,"message":"265","line":3,"column":52,"nodeType":"259","messageId":"260","endLine":3,"endColumn":56},{"ruleId":"257","severity":1,"message":"266","line":33,"column":11,"nodeType":"259","messageId":"260","endLine":33,"endColumn":18},{"ruleId":"257","severity":1,"message":"267","line":8,"column":5,"nodeType":"259","messageId":"260","endLine":8,"endColumn":15},{"ruleId":"257","severity":1,"message":"268","line":3,"column":42,"nodeType":"259","messageId":"260","endLine":3,"endColumn":47},{"ruleId":"257","severity":1,"message":"267","line":8,"column":5,"nodeType":"259","messageId":"260","endLine":8,"endColumn":15},{"ruleId":"257","severity":1,"message":"267","line":8,"column":5,"nodeType":"259","messageId":"260","endLine":8,"endColumn":15},{"ruleId":"257","severity":1,"message":"269","line":5,"column":8,"nodeType":"259","messageId":"260","endLine":5,"endColumn":21},{"ruleId":"257","severity":1,"message":"270","line":11,"column":8,"nodeType":"259","messageId":"260","endLine":11,"endColumn":22},{"ruleId":"257","severity":1,"message":"271","line":2,"column":8,"nodeType":"259","messageId":"260","endLine":2,"endColumn":19},{"ruleId":"257","severity":1,"message":"267","line":10,"column":5,"nodeType":"259","messageId":"260","endLine":10,"endColumn":15},{"ruleId":"257","severity":1,"message":"264","line":12,"column":5,"nodeType":"259","messageId":"260","endLine":12,"endColumn":16},{"ruleId":"257","severity":1,"message":"272","line":13,"column":5,"nodeType":"259","messageId":"260","endLine":13,"endColumn":11},{"ruleId":"257","severity":1,"message":"265","line":15,"column":5,"nodeType":"259","messageId":"260","endLine":15,"endColumn":9},{"ruleId":"257","severity":1,"message":"273","line":24,"column":8,"nodeType":"259","messageId":"260","endLine":24,"endColumn":24},{"ruleId":"257","severity":1,"message":"274","line":15,"column":8,"nodeType":"259","messageId":"260","endLine":15,"endColumn":16},{"ruleId":"257","severity":1,"message":"275","line":16,"column":8,"nodeType":"259","messageId":"260","endLine":16,"endColumn":20},{"ruleId":"257","severity":1,"message":"276","line":17,"column":8,"nodeType":"259","messageId":"260","endLine":17,"endColumn":20},{"ruleId":"257","severity":1,"message":"277","line":18,"column":8,"nodeType":"259","messageId":"260","endLine":18,"endColumn":17},{"ruleId":"257","severity":1,"message":"278","line":19,"column":8,"nodeType":"259","messageId":"260","endLine":19,"endColumn":16},{"ruleId":"257","severity":1,"message":"279","line":3,"column":9,"nodeType":"259","messageId":"260","endLine":3,"endColumn":15},{"ruleId":"257","severity":1,"message":"280","line":3,"column":17,"nodeType":"259","messageId":"260","endLine":3,"endColumn":33},{"ruleId":"257","severity":1,"message":"281","line":8,"column":8,"nodeType":"259","messageId":"260","endLine":8,"endColumn":20},{"ruleId":"257","severity":1,"message":"282","line":9,"column":8,"nodeType":"259","messageId":"260","endLine":9,"endColumn":19},{"ruleId":"257","severity":1,"message":"283","line":10,"column":8,"nodeType":"259","messageId":"260","endLine":10,"endColumn":17},{"ruleId":"257","severity":1,"message":"284","line":7,"column":8,"nodeType":"259","messageId":"260","endLine":7,"endColumn":17},{"ruleId":"257","severity":1,"message":"285","line":1,"column":45,"nodeType":"259","messageId":"260","endLine":1,"endColumn":52},{"ruleId":"257","severity":1,"message":"286","line":6,"column":5,"nodeType":"259","messageId":"260","endLine":6,"endColumn":15},{"ruleId":"257","severity":1,"message":"267","line":7,"column":5,"nodeType":"259","messageId":"260","endLine":7,"endColumn":15},{"ruleId":"257","severity":1,"message":"272","line":7,"column":41,"nodeType":"259","messageId":"260","endLine":7,"endColumn":47},{"ruleId":"257","severity":1,"message":"265","line":7,"column":55,"nodeType":"259","messageId":"260","endLine":7,"endColumn":59},{"ruleId":"257","severity":1,"message":"287","line":16,"column":9,"nodeType":"259","messageId":"260","endLine":16,"endColumn":17},{"ruleId":"257","severity":1,"message":"288","line":10,"column":5,"nodeType":"259","messageId":"260","endLine":10,"endColumn":10},{"ruleId":"257","severity":1,"message":"289","line":13,"column":5,"nodeType":"259","messageId":"260","endLine":13,"endColumn":14},{"ruleId":"257","severity":1,"message":"290","line":17,"column":8,"nodeType":"259","messageId":"260","endLine":17,"endColumn":15},{"ruleId":"257","severity":1,"message":"291","line":23,"column":9,"nodeType":"259","messageId":"260","endLine":23,"endColumn":23},{"ruleId":"257","severity":1,"message":"271","line":26,"column":8,"nodeType":"259","messageId":"260","endLine":26,"endColumn":19},{"ruleId":"257","severity":1,"message":"292","line":28,"column":9,"nodeType":"259","messageId":"260","endLine":28,"endColumn":19},{"ruleId":"257","severity":1,"message":"265","line":30,"column":9,"nodeType":"259","messageId":"260","endLine":30,"endColumn":13},{"ruleId":"293","severity":1,"message":"294","line":220,"column":8,"nodeType":"295","endLine":220,"endColumn":10,"suggestions":"296"},{"ruleId":"257","severity":1,"message":"267","line":2,"column":48,"nodeType":"259","messageId":"260","endLine":2,"endColumn":58},{"ruleId":"293","severity":1,"message":"297","line":17,"column":8,"nodeType":"295","endLine":17,"endColumn":24,"suggestions":"298"},{"ruleId":"293","severity":1,"message":"299","line":83,"column":8,"nodeType":"295","endLine":83,"endColumn":10,"suggestions":"300"},{"ruleId":"257","severity":1,"message":"301","line":5,"column":36,"nodeType":"259","messageId":"260","endLine":5,"endColumn":47},{"ruleId":"257","severity":1,"message":"302","line":28,"column":12,"nodeType":"259","messageId":"260","endLine":28,"endColumn":17},{"ruleId":"293","severity":1,"message":"294","line":122,"column":8,"nodeType":"295","endLine":122,"endColumn":10,"suggestions":"303"},{"ruleId":"257","severity":1,"message":"304","line":178,"column":22,"nodeType":"259","messageId":"260","endLine":178,"endColumn":33},{"ruleId":"257","severity":1,"message":"302","line":33,"column":12,"nodeType":"259","messageId":"260","endLine":33,"endColumn":17},{"ruleId":"257","severity":1,"message":"304","line":150,"column":22,"nodeType":"259","messageId":"260","endLine":150,"endColumn":33},{"ruleId":"293","severity":1,"message":"294","line":191,"column":8,"nodeType":"295","endLine":191,"endColumn":10,"suggestions":"305"},{"ruleId":"257","severity":1,"message":"306","line":193,"column":11,"nodeType":"259","messageId":"260","endLine":193,"endColumn":21},{"ruleId":"257","severity":1,"message":"307","line":1,"column":10,"nodeType":"259","messageId":"260","endLine":1,"endColumn":15},{"ruleId":"257","severity":1,"message":"287","line":1,"column":17,"nodeType":"259","messageId":"260","endLine":1,"endColumn":25},{"ruleId":"257","severity":1,"message":"308","line":5,"column":5,"nodeType":"259","messageId":"260","endLine":5,"endColumn":8},{"ruleId":"257","severity":1,"message":"265","line":6,"column":27,"nodeType":"259","messageId":"260","endLine":6,"endColumn":31},{"ruleId":"257","severity":1,"message":"271","line":21,"column":8,"nodeType":"259","messageId":"260","endLine":21,"endColumn":19},{"ruleId":"293","severity":1,"message":"294","line":330,"column":8,"nodeType":"295","endLine":330,"endColumn":10,"suggestions":"309"},{"ruleId":"293","severity":1,"message":"294","line":191,"column":8,"nodeType":"295","endLine":191,"endColumn":10,"suggestions":"310"},"no-native-reassign",["311"],"no-negated-in-lhs",["312"],"no-unused-vars","'Register' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'RecruiterForm' is defined but never used.","'useState' is defined but never used.","'CssBaseline' is defined but never used.","'Link' is defined but never used.","'classes' is assigned a value but never used.","'makeStyles' is defined but never used.","'getIn' is defined but never used.","'ListSubheader' is defined but never used.","'AssignmentIcon' is defined but never used.","'authService' is defined but never used.","'Avatar' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'Button' is defined but never used.","'withMobileDialog' is defined but never used.","'JobEditPopup' is defined but never used.","'JobEditForm' is defined but never used.","'LoginForm' is defined but never used.","'CardMedia' is defined but never used.","'Divider' is defined but never used.","'Typography' is defined but never used.","'Redirect' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'Toolbar' is defined but never used.","'DateTimePicker' is defined but never used.","'lightGreen' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authTokens.token'. Either include it or remove the dependency array.","ArrayExpression",["313"],"React Hook useEffect has a missing dependency: 'recordsAfterSorting'. Either include it or remove the dependency array.",["314"],"React Hook useEffect has a missing dependency: 'props.match.params.jobId'. Either include it or remove the dependency array.",["315"],"'DialogTitle' is defined but never used.","'title' is assigned a value but never used.",["316"],"'setFilterFn' is assigned a value but never used.",["317"],"'setRatings' is assigned a value but never used.","'Route' is defined but never used.","'Box' is defined but never used.",["318"],["319"],"no-global-assign","no-unsafe-negation",{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"320","fix":"326"},{"desc":"320","fix":"327"},{"desc":"320","fix":"328"},{"desc":"320","fix":"329"},"Update the dependencies array to be: [authTokens.token]",{"range":"330","text":"331"},"Update the dependencies array to be: [orderBy, order, recordsAfterSorting]",{"range":"332","text":"333"},"Update the dependencies array to be: [props.match.params.jobId]",{"range":"334","text":"335"},{"range":"336","text":"331"},{"range":"337","text":"331"},{"range":"338","text":"331"},{"range":"339","text":"331"},[9600,9602],"[authTokens.token]",[611,627],"[orderBy, order, recordsAfterSorting]",[2489,2491],"[props.match.params.jobId]",[4184,4186],[6839,6841],[14375,14377],[6649,6651]]