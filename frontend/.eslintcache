[{"/home/abhishekh/WebstormProjects/job-portal/frontend/src/index.js":"1","/home/abhishekh/WebstormProjects/job-portal/frontend/src/App.js":"2","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/Home.js":"3","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/AppToolBar.js":"4","/home/abhishekh/WebstormProjects/job-portal/frontend/src/context/auth.js":"5","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/Admin.js":"6","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/Profile.js":"7","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/Test.js":"8","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/Register.js":"9","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/RecruiterRegister.js":"10","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/ApplicantRegister.js":"11","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/Login.js":"12","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/PrivateRoute.js":"13","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/MasterAuth.js":"14","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobPostDashboard.js":"15","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobListDashboard.js":"16","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/AcceptedEmployees.js":"17","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/ViewApplications.js":"18","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/JobListDashboard.js":"19","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/Apply.js":"20","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/MyApplications.js":"21","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/listitems.js":"22","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/ApplicantProfile.js":"23","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/RecruiterProfile.js":"24","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/CustomTable.js":"25","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/styles/generalStyles.js":"26","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/RecruiterForm.js":"27","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/LoginForm.js":"28","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/ApplicantForm.js":"29","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/applicationService.js":"30","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/authService.js":"31","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/applicantServices.js":"32","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/typeOfJob.js":"33","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/duration.js":"34","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/jobService.js":"35","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/recruiterService.js":"36","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/languages.js":"37","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/styles/formStyles.js":"38","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobEditPopup.js":"39","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobCard.js":"40","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/JobEditForm.js":"41","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/JobPostForm.js":"42","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/index.js":"43","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/App.js":"44","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/Home.js":"45","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/Test.js":"46","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/context/auth.js":"47","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/AppToolBar.js":"48","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/Admin.js":"49","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/Profile.js":"50","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/Register.js":"51","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/ApplicantRegister.js":"52","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/RecruiterRegister.js":"53","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/Login.js":"54","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/MasterAuth.js":"55","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/PrivateRoute.js":"56","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/JobPostDashboard.js":"57","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/JobListDashboard.js":"58","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/ViewApplications.js":"59","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/AcceptedEmployees.js":"60","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/applicants/JobListDashboard.js":"61","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/applicants/Apply.js":"62","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/applicants/MyApplications.js":"63","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/listitems.js":"64","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/applicants/ApplicantProfile.js":"65","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/RecruiterProfile.js":"66","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/CustomTable.js":"67","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/styles/generalStyles.js":"68","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/RecruiterForm.js":"69","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/ApplicantForm.js":"70","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/LoginForm.js":"71","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/applicationService.js":"72","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/applicantServices.js":"73","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/authService.js":"74","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/utils/duration.js":"75","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/utils/typeOfJob.js":"76","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/jobService.js":"77","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/recruiterService.js":"78","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/styles/formStyles.js":"79","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/utils/languages.js":"80","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/JobCard.js":"81","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/JobEditPopup.js":"82","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/JobEditForm.js":"83","/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/JobPostForm.js":"84"},{"size":197,"mtime":1611416350197,"results":"85","hashOfConfig":"86"},{"size":4297,"mtime":1611588923256,"results":"87","hashOfConfig":"86"},{"size":418,"mtime":1611416350193,"results":"88","hashOfConfig":"86"},{"size":5304,"mtime":1611416350193,"results":"89","hashOfConfig":"86"},{"size":159,"mtime":1611416350197,"results":"90","hashOfConfig":"86"},{"size":3202,"mtime":1611416350193,"results":"91","hashOfConfig":"86"},{"size":554,"mtime":1611416350193,"results":"92","hashOfConfig":"86"},{"size":7865,"mtime":1611416350193,"results":"93","hashOfConfig":"86"},{"size":2429,"mtime":1611416350193,"results":"94","hashOfConfig":"86"},{"size":264,"mtime":1611416350193,"results":"95","hashOfConfig":"86"},{"size":234,"mtime":1611416350193,"results":"96","hashOfConfig":"86"},{"size":167,"mtime":1611416350193,"results":"97","hashOfConfig":"86"},{"size":608,"mtime":1611416350193,"results":"98","hashOfConfig":"86"},{"size":1433,"mtime":1611416350193,"results":"99","hashOfConfig":"86"},{"size":885,"mtime":1611416350197,"results":"100","hashOfConfig":"86"},{"size":2139,"mtime":1611416350197,"results":"101","hashOfConfig":"86"},{"size":8340,"mtime":1611416350197,"results":"102","hashOfConfig":"86"},{"size":11641,"mtime":1611416350197,"results":"103","hashOfConfig":"86"},{"size":13673,"mtime":1611593262550,"results":"104","hashOfConfig":"86"},{"size":3156,"mtime":1611416350193,"results":"105","hashOfConfig":"86"},{"size":7787,"mtime":1611416350193,"results":"106","hashOfConfig":"86"},{"size":3349,"mtime":1611416350193,"results":"107","hashOfConfig":"86"},{"size":16604,"mtime":1611587371539,"results":"108","hashOfConfig":"86"},{"size":7631,"mtime":1611592244222,"results":"109","hashOfConfig":"86"},{"size":2863,"mtime":1611416350193,"results":"110","hashOfConfig":"86"},{"size":2275,"mtime":1611416350197,"results":"111","hashOfConfig":"86"},{"size":7409,"mtime":1611592262997,"results":"112","hashOfConfig":"86"},{"size":4406,"mtime":1611416350193,"results":"113","hashOfConfig":"86"},{"size":13799,"mtime":1611587371539,"results":"114","hashOfConfig":"86"},{"size":975,"mtime":1611416350197,"results":"115","hashOfConfig":"86"},{"size":386,"mtime":1611416350197,"results":"116","hashOfConfig":"86"},{"size":1403,"mtime":1611416350197,"results":"117","hashOfConfig":"86"},{"size":76,"mtime":1611416350197,"results":"118","hashOfConfig":"86"},{"size":51,"mtime":1611416350197,"results":"119","hashOfConfig":"86"},{"size":1255,"mtime":1611416350197,"results":"120","hashOfConfig":"86"},{"size":1396,"mtime":1611416350197,"results":"121","hashOfConfig":"86"},{"size":74,"mtime":1611416350197,"results":"122","hashOfConfig":"86"},{"size":657,"mtime":1611416350197,"results":"123","hashOfConfig":"86"},{"size":484,"mtime":1611416350197,"results":"124","hashOfConfig":"86"},{"size":2607,"mtime":1611593227617,"results":"125","hashOfConfig":"86"},{"size":5051,"mtime":1611416350193,"results":"126","hashOfConfig":"86"},{"size":10503,"mtime":1611590048926,"results":"127","hashOfConfig":"86"},{"size":197,"mtime":1611596325443,"results":"128","hashOfConfig":"129"},{"size":4297,"mtime":1611596325439,"results":"130","hashOfConfig":"129"},{"size":418,"mtime":1611596325439,"results":"131","hashOfConfig":"129"},{"size":7865,"mtime":1611596325443,"results":"132","hashOfConfig":"129"},{"size":159,"mtime":1611596325443,"results":"133","hashOfConfig":"129"},{"size":5304,"mtime":1611596325439,"results":"134","hashOfConfig":"129"},{"size":3202,"mtime":1611596325443,"results":"135","hashOfConfig":"129"},{"size":554,"mtime":1611596325443,"results":"136","hashOfConfig":"129"},{"size":2429,"mtime":1611596325443,"results":"137","hashOfConfig":"129"},{"size":234,"mtime":1611596325443,"results":"138","hashOfConfig":"129"},{"size":264,"mtime":1611596325443,"results":"139","hashOfConfig":"129"},{"size":167,"mtime":1611596325443,"results":"140","hashOfConfig":"129"},{"size":1433,"mtime":1611596325443,"results":"141","hashOfConfig":"129"},{"size":608,"mtime":1611596325443,"results":"142","hashOfConfig":"129"},{"size":885,"mtime":1611596325443,"results":"143","hashOfConfig":"129"},{"size":2139,"mtime":1611596325443,"results":"144","hashOfConfig":"129"},{"size":11641,"mtime":1611596325443,"results":"145","hashOfConfig":"129"},{"size":8340,"mtime":1611596325443,"results":"146","hashOfConfig":"129"},{"size":13673,"mtime":1611596325443,"results":"147","hashOfConfig":"129"},{"size":3156,"mtime":1611596325443,"results":"148","hashOfConfig":"129"},{"size":7787,"mtime":1611596325443,"results":"149","hashOfConfig":"129"},{"size":3349,"mtime":1611596325443,"results":"150","hashOfConfig":"129"},{"size":16604,"mtime":1611596325443,"results":"151","hashOfConfig":"129"},{"size":7631,"mtime":1611596325443,"results":"152","hashOfConfig":"129"},{"size":2863,"mtime":1611596325439,"results":"153","hashOfConfig":"129"},{"size":2275,"mtime":1611596325443,"results":"154","hashOfConfig":"129"},{"size":7409,"mtime":1611596325443,"results":"155","hashOfConfig":"129"},{"size":13799,"mtime":1611596325443,"results":"156","hashOfConfig":"129"},{"size":4406,"mtime":1611596325443,"results":"157","hashOfConfig":"129"},{"size":975,"mtime":1611596325443,"results":"158","hashOfConfig":"129"},{"size":1403,"mtime":1611596325443,"results":"159","hashOfConfig":"129"},{"size":386,"mtime":1611596325443,"results":"160","hashOfConfig":"129"},{"size":51,"mtime":1611596325443,"results":"161","hashOfConfig":"129"},{"size":76,"mtime":1611596325443,"results":"162","hashOfConfig":"129"},{"size":1255,"mtime":1611596325443,"results":"163","hashOfConfig":"129"},{"size":1396,"mtime":1611596325443,"results":"164","hashOfConfig":"129"},{"size":657,"mtime":1611596325443,"results":"165","hashOfConfig":"129"},{"size":74,"mtime":1611596325443,"results":"166","hashOfConfig":"129"},{"size":2607,"mtime":1611596325443,"results":"167","hashOfConfig":"129"},{"size":484,"mtime":1611596325443,"results":"168","hashOfConfig":"129"},{"size":5051,"mtime":1611596325443,"results":"169","hashOfConfig":"129"},{"size":10503,"mtime":1611596325443,"results":"170","hashOfConfig":"129"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},"10m0r1x",{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"173"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"173"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"173"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"173"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"173"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"173"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"173"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"173"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"173"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"173"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"173"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"173"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"173"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"173"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"173"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"173"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zjvgdt",{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"288","messages":"289","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"306","messages":"307","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"308","messages":"309","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"312","messages":"313","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"314","messages":"315","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"316","messages":"317","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"320","messages":"321","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"326","messages":"327","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"352","messages":"353","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"354","messages":"355","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/abhishekh/WebstormProjects/job-portal/frontend/src/index.js",[],["356","357"],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/App.js",["358"],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/Home.js",["359"],"import React, {useEffect} from 'react'\nimport Button from '@material-ui/core/Button'\nimport useStyles from './styles/generalStyles'\n\nconst Home = () => {\n    const classes = useStyles()\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            <Button variant=\"contained\" color=\"secondary\">\n                Hello World\n            </Button>\n        </div>\n    )\n}\n\nexport default Home\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/AppToolBar.js",["360","361","362","363","364"],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport {recruiterListItems, applicantListItems, unLoggedListItems} from './listitems'\nimport {useAuth} from '../context/auth'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerClose: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        overflowX: 'hidden',\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9) + 1,\n        },\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(2),\n    },\n}));\n\nexport default function MiniDrawer(props) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n    const {authTokens} = useAuth();\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    let listItems\n    if (!authTokens)\n        listItems = unLoggedListItems\n    else if (authTokens.type === 'applicant')\n        listItems = applicantListItems\n    else\n        listItems = recruiterListItems\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open,\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        LinkedOut\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open,\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open,\n                    }),\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    {listItems}\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                {props.children}\n            </main>\n        </div>\n    );\n}","/home/abhishekh/WebstormProjects/job-portal/frontend/src/context/auth.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/Admin.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/Profile.js",["365","366"],"import { Route, Redirect } from \"react-router-dom\"\nimport {useAuth} from '../../context/auth'\nimport ApplicantProfile from './applicants/ApplicantProfile'\nimport RecruiterProfile from './recruiters/RecruiterProfile'\n\nconst Profile = () => {\n    const {authTokens} = useAuth()\n\n    let profile = null\n    if (authTokens && authTokens.type === 'applicant')\n        profile = <ApplicantProfile />\n    else if (authTokens)\n        profile = <RecruiterProfile />\n\n    return (\n        <div>\n            {profile}\n        </div>\n    )\n}\n\nexport default Profile","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/Test.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/Register.js",["367","368","369","370","371"],"import RecruiterForm from '../../forms/RecruiterForm'\nimport {useState} from 'react'\nimport {ButtonGroup, Container, CssBaseline, Grid, Link, makeStyles, Typography} from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport 'fontsource-roboto'\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    centerContainer: {\n        alignItems: 'center',\n        direction: 'column',\n        justify: 'center',\n    }\n}))\n\nconst Register = () => {\n    const classes = useStyles()\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <Grid\n                container\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{height: '100vh'}}\n            >\n                <Grid container\n                      spacing={0}\n                      direction=\"column\"\n                      alignItems=\"center\"\n                      justify=\"center\"\n                      style={{background: '#efefef', paddingBottom: '20px'}}\n                >\n                    <Typography component=\"h1\" variant=\"h2\" style={{margin: '10px', color: '#414141'}}>\n                        Register as\n                    </Typography>\n                    <ButtonGroup>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"large\"\n                            href=\"/applicantRegister\"\n                        >\n                            Applicant\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            size=\"large\"\n                            href=\"/recruiterRegister\"\n                        >\n                            Recruiter\n                        </Button>\n                    </ButtonGroup>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default Register\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/RecruiterRegister.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/ApplicantRegister.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/Login.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/PrivateRoute.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/MasterAuth.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobPostDashboard.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobListDashboard.js",["372","373","374","375","376"],"import recruiterService from '../../../services/recruiterService'\nimport {useAuth} from '../../../context/auth'\nimport {Button, withMobileDialog} from '@material-ui/core'\nimport useStyles from '../../styles/generalStyles'\nimport {useEffect, useState} from 'react'\nimport JobCard from './JobCard'\nimport Grid from '@material-ui/core/Grid'\nimport JobEditPopup from './JobEditPopup'\nimport JobEditForm from '../../forms/JobEditForm'\nimport LoginForm from '../../forms/LoginForm'\nimport jobService from '../../../services/jobService'\n\nconst JobListDashboard = () => {\n    const classes = useStyles()\n    const { authTokens } = useAuth()\n    const [jobs, setJobs] = useState([])\n\n    const getActiveJobs = jobs => {\n        return jobs.filter(j => j.positionStatus === 'free')\n    }\n\n    useEffect(() => {\n        const getRecruiterJobs = async () => {\n            try {\n                const response = await recruiterService.getRecruiterJobs(authTokens.token)\n                console.log('response jobs', response)\n                setJobs(getActiveJobs(response))\n            } catch (err) {\n                console.log('err', err.response)\n            }\n        }\n\n        getRecruiterJobs()\n    }, [authTokens.token])\n\n    const getUpdatedJob = async (id) => {\n        const job = await jobService.getOne(id)\n        const updatedJobs = jobs.map(j => j._id.toString() === id ? job : j)\n        setJobs(getActiveJobs(updatedJobs))\n    }\n\n    const deleteJob = async (id) => {\n        try {\n            await jobService.deleteOne(id, authTokens.token)\n            setJobs(jobs.filter(j => j._id !== id))\n        } catch (err) {\n            console.log('caught err', err)\n        }\n    }\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer} />\n            <Grid container spacing={2}>\n                {jobs.map(job => (\n                    <Grid item xs={12} sm={4} key={job._id}>\n                        <JobCard job={job} deleteJob={() => deleteJob(job._id)} getUpdatedJob={getUpdatedJob} />\n                    </Grid>\n                ))}\n            </Grid>\n        </div>\n    )\n}\n\nexport default JobListDashboard\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/AcceptedEmployees.js",["377","378","379","380"],"import React, {useEffect, useState} from 'react'\nimport recruiterService from '../../../services/recruiterService'\nimport {useAuth} from '../../../context/auth'\nimport CustomTable from '../../CustomTable'\nimport {Alert, Rating} from '@material-ui/lab'\nimport Grid from '@material-ui/core/Grid'\nimport {\n    Button,\n    Dialog,\n    DialogContent, LinearProgress,\n    MenuItem,\n    Paper,\n    TableBody,\n    TableCell,\n    TableRow,\n    Typography\n} from '@material-ui/core'\nimport format from 'date-fns/format'\nimport useStyles from '../../styles/generalStyles'\nimport applicationService from '../../../services/applicationService'\nimport * as yup from 'yup'\nimport {Field, Form, Formik} from 'formik'\nimport {TextField} from 'formik-material-ui'\n\nconst validationSchema = yup.object({\n    value: yup\n        .number('enter rating')\n        .required()\n        .integer('Should be an integer')\n})\n\nconst RatePopup = (props) => {\n    const {title, children, openPopup, setOpenPopup} = props\n\n    return (\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\n            <DialogContent dividers>\n                {children}\n            </DialogContent>\n        </Dialog>\n    )\n}\n\n\nconst App = ({onSubmit}) => (\n    <Formik\n        initialValues={{\n            value: 0\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <Form>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"number\"\n                            label=\"Rating\"\n                            name=\"value\"\n                            select\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        >\n                            {[0, 1, 2, 3, 4, 5].map((option) => (\n                                <MenuItem key={option} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Field>\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                >\n                    Submit\n                </Button>\n            </Form>\n        )}\n    </Formik>\n)\n\nconst CustomRow = ({item, token}) => {\n    const [openPopup, setOpenPopup] = useState(false)\n    const [message, setMessage] = useState(null)\n\n    const setRatings = (appId) => async (values, {setSubmitting}) => {\n        try {\n            const response = await recruiterService.rateApplicant(appId, values, token)\n            console.log('response', response)\n            setOpenPopup(false)\n            window.location.reload()\n        } catch (err) {\n            setMessage(err.response.data.error)\n        }\n    }\n\n    return (\n        <TableRow key={item._id}>\n            <TableCell>{item.appName}</TableCell>\n            <TableCell>\n                {format((new Date(item.dateOfJoining)), 'yyyy-MM-dd\\'T\\'HH:mm')}\n            </TableCell>\n            <TableCell>{item.job.typeOfJob}</TableCell>\n            <TableCell>{item.jobTitle}</TableCell>\n            <TableCell>\n                <Rating\n                    name=\"read-only\"\n                    precision={0.5}\n                    size='small'\n                    value={item.applicantRating}\n                    readOnly/>\n            </TableCell>\n            <TableCell>\n                <div>\n                    <Button variant='outlined'\n                            onClick={() => setOpenPopup(true)}\n                    >\n                        Rate\n                    </Button>\n                    <RatePopup\n                        openPopup={openPopup}\n                        setOpenPopup={setOpenPopup}\n                    >\n                        {message && <Alert severity='error'>{message}</Alert>}\n                        <App onSubmit={setRatings(item.applicant._id)}/>\n                    </RatePopup>\n                </div>\n            </TableCell>\n        </TableRow>\n    )\n}\n\nconst AcceptedEmployees = () => {\n    const classes = useStyles()\n    const {authTokens} = useAuth()\n    const [message, setMessage] = useState(null)\n    const [acceptedApplications, setAcceptedApplications] = useState([])\n    const [filterFn, setFilterFn] = useState({fn: items => items})\n    const headers = [\n        {id: 'appName', name: 'Name', sortable: true},\n        {id: 'dateOfJoining', name: 'Date of Joining', sortable: true},\n        {id: 'type', name: 'Type', sortable: false},\n        {id: 'jobTitle', name: 'Job Title', sortable: true},\n        {id: 'applicantRating', name: 'Rating', sortable: true},\n        {id: 'rating', name: 'Rate', sortable: false}\n    ]\n    const {\n        SortableTable,\n        recordsAfterSorting\n    } = CustomTable(acceptedApplications, headers, filterFn)\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const response = await recruiterService.getAcceptedApplications(authTokens.token)\n                console.log('immediate >', response)\n                for (let ind in response) {\n                    let applicantRating = 0\n                    if (response[ind].applicant.ratings.length > 0) {\n                        console.log('rating in ', response[ind])\n                        applicantRating = response[ind].applicant.ratings\n                            .reduce((cum, cur) => cum + cur.value, 0) / response[ind].applicant.ratings.length\n                    }\n                    response[ind].appName = response[ind].applicant.user.name\n                    response[ind].applicantRating = applicantRating\n                    response[ind].jobTitle = response[ind].job.title\n                }\n                console.log('modified response >', response)\n                setAcceptedApplications(response)\n            } catch (err) {\n                console.log('err', err.response)\n                if (err.response.data.error)\n                    setMessage({\n                        severity: 'error',\n                        content: err.response.data.error\n                    })\n            }\n        })()\n    }, [])\n\n    const setRatings = (appId) => async (values, {setSubmitting}) => {\n        try {\n            const response = await applicationService.rateJob(appId, values, authTokens.token)\n            console.log('response', response)\n            // setOpenPopup(false)\n            window.location.reload()\n        } catch (err) {\n            setMessage(err.response.data.error)\n        }\n    }\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            {message && <Alert severity={message.severity}>{message.content}</Alert>}\n            <Grid container style={{marginBottom: '40px'}}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h3\" component='h5'>\n                        View accepted applications\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Grid>\n                <Paper>\n                    <SortableTable\n                        records={acceptedApplications}\n                        headCells={headers}\n                        filterFn={filterFn}\n                        setData={setAcceptedApplications}\n                    >\n                        <TableBody>\n                            {recordsAfterSorting().map(item => (\n                                <CustomRow\n                                    item={item}\n                                    token={authTokens.token}\n                                    key={item._id}\n                                />\n                            ))}\n                        </TableBody>\n                    </SortableTable>\n                </Paper>\n            </Grid>\n        </div>\n    )\n}\n\nexport default AcceptedEmployees\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/ViewApplications.js",["381"],"import {useAuth} from '../../../context/auth'\nimport React, {useEffect, useState} from 'react'\nimport CustomTable from '../../CustomTable'\nimport useStyles from '../../styles/generalStyles'\nimport jobService from '../../../services/jobService'\nimport emailjs from 'emailjs-com';\n\nimport {\n    Box, ButtonGroup, Chip,\n    Collapse, Divider,\n    makeStyles,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography\n} from '@material-ui/core'\nimport Grid from '@material-ui/core/Grid'\nimport IconButton from '@material-ui/core/IconButton'\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp'\nimport format from 'date-fns/format'\nimport {Alert, Rating} from '@material-ui/lab'\nimport Button from '@material-ui/core/Button'\nimport applicationService from '../../../services/applicationService'\nimport recruiterService from '../../../services/recruiterService'\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n    miniTableHead: {\n        '& > *': {\n            fontWeight: 'bold'\n        }\n    },\n    chip: {\n        margin: '5px',\n    },\n    chipArray: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        listStyle: 'none',\n        margin: 0\n    }\n})\n\n\nconst CustomTableRow = ({item, setMessage, recToken}) => {\n    const [open, setOpen] = useState(false)\n    const classes = useRowStyles()\n    let choice\n    const updateStatus = async (status, email) => {\n        const body = {\n            status\n        }\n        try {\n            const updated = await applicationService.updateApplicationStatus(item._id.toString(), body, recToken)\n            console.log('response', updated)\n            if (email) {\n                const rec = await recruiterService.getRecruiter(recToken)\n                const params = {\n                    applicantEmail: email,\n                    recruiter: rec.user.name\n                }\n                try {\n                    const res = await emailjs.send(\"service_uw11hrq\", \"template_enyvf04\", params)\n                    console.log('email sent >', res)\n                } catch (err) {\n                    console.log('could not send email, err', err)\n                }\n            }\n            window.location.reload()\n        } catch (err) {\n            console.log('err', err.response)\n            if (err.response && err.response.data && err.response.data.error)\n                setMessage({severity: 'error', content: err.response.data.error})\n        }\n    }\n    if (item.status === 'applied') {\n        choice = (\n            <ButtonGroup>\n                <Button color='primary' onClick={() => updateStatus('shortlisted')}>Shortlist</Button>\n                <Button color='secondary' onClick={() => updateStatus('rejected')}>Reject</Button>\n            </ButtonGroup>\n        )\n    } else if (item.status === 'shortlisted') {\n        choice = (\n            <ButtonGroup>\n                <Button color='primary' onClick={() => updateStatus('accepted', item.applicant.user.email)}>Accept</Button>\n                <Button color='secondary' onClick={() => updateStatus('rejected')}>Reject</Button>\n            </ButtonGroup>\n        )\n    } else {\n        choice = (\n            <Button fullWidth disabled>Accepted</Button>\n        )\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.root}>\n                <TableCell>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\n                    </IconButton>\n                </TableCell>\n                <TableCell>{item.appName}</TableCell>\n                <TableCell>{format((new Date(item.dateOfApplication)), 'yyyy-MM-dd\\'T\\'HH:mm')}</TableCell>\n                <TableCell>{item.status}</TableCell>\n                <TableCell><Rating name=\"read-only\" value={item.applicantRating} precision={0.5} readOnly/></TableCell>\n                <TableCell>\n                    {choice}\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{paddingBottom: 0, paddingTop: 0}} colSpan={6}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1}>\n                            <Typography variant=\"h6\" gutterBottom component=\"div\" style={{fontWeight: 'bold'}}>\n                                Education\n                            </Typography>\n                            <Table size=\"small\" aria-label=\"Education\">\n                                <TableHead>\n                                    <TableRow className={classes.miniTableHead}>\n                                        <TableCell>Institute Name</TableCell>\n                                        <TableCell>Start Year</TableCell>\n                                        <TableCell>End Year</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {item.applicant.education.map(ed => (\n                                        <TableRow key={ed._id}>\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {ed.instituteName}\n                                            </TableCell>\n                                            <TableCell>{ed.startYear}</TableCell>\n                                            <TableCell>{ed.endYear}</TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                            <Divider/>\n                            <Grid container style={{marginTop: '30px'}}>\n                                <Grid item xs={2}>\n                                    <Typography variant=\"h6\" gutterBottom component=\"div\" style={{fontWeight: 'bold'}}>\n                                        Skills\n                                    </Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Grid className={classes.chipArray} component='ul'>\n                                        {item.applicant.skills.map((sk, it) => (\n                                            <li key={it}>\n                                                <Chip\n                                                    icon={null}\n                                                    label={sk}\n                                                    className={classes.chip}\n                                                />\n                                            </li>\n                                        ))}\n                                    </Grid>\n                                </Grid>\n                                <Grid container style={{marginTop: '30px'}}>\n                                    <Typography variant=\"h6\" gutterBottom component=\"div\" style={{fontWeight: 'bold'}}>\n                                        Statement of Purpose\n                                    </Typography>\n                                    <Grid item xs={12}\n                                          style={{backgroundColor: '#6C7A89',\n                                              color: 'white',\n                                              padding: '30px',\n                                              whiteSpace: 'pre-wrap'\n                                          }}>\n                                        {item.sop}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    )\n}\n\nconst ViewApplications = (props) => {\n    const classes = useStyles()\n    const {authTokens} = useAuth()\n    const [applications, setApplications] = useState([])\n    const [message, setMessage] = useState(null)\n    const [jobTitle, setJobTitle] = useState('')\n    const [filterFn, setFilterFn] = useState({fn: (items) => items})\n    const {jobId} = props.match.params\n    const headers = [\n        {id: 'bl', name: '', sortable: false},\n        {id: 'appName', name: 'Name', sortable: true},\n        {id: 'dateOfApplication', name: 'Application date', sortable: true},\n        {id: 'state', name: 'State', sortable: false},\n        {id: 'applicantRating', name: 'Rating', sortable: true},\n        {id: 'proceed', name: 'Choose', sortable: false}\n    ]\n    const {\n        SortableTable,\n        recordsAfterSorting\n    } = CustomTable(applications, headers, filterFn)\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const response = await jobService.getApplications(jobId)\n                console.log('immediate', response)\n                for (let ind in response) {\n                    let applicantRating = 0\n                    if (response[ind].applicant.ratings.length > 0) {\n                        console.log('rating in ', response[ind])\n                        applicantRating = response[ind].applicant.ratings\n                            .reduce((cum, cur) => cum + cur.value, 0) / response[ind].applicant.ratings.length\n                    }\n                    response[ind].appName = response[ind].applicant.user.name\n                    response[ind].applicantRating = applicantRating\n                    console.log('name', response[ind].applicant.user.name)\n                }\n                console.log('response modified to ', response)\n                setApplications(response.filter(ap => ap.status !== 'rejected'))\n\n                const job = await jobService.getOne(jobId)\n                setJobTitle(job.title)\n            } catch (err) {\n                console.log('error', err)\n            }\n        })()\n    }, [jobId])\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            {message && <Alert severity={message.severity}>{message.content}</Alert> }\n            <Grid container style={{marginBottom: '40px'}}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h3\" component='h5'>\n                        {jobTitle}\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography variant=\"h4\" component=\"h6\">\n                        View applications\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Grid>\n                <Paper>\n                    <SortableTable\n                        records={applications}\n                        headCells={headers}\n                        filterFn={filterFn}\n                        setData={setApplications}\n                    >\n                        <TableBody>\n                            {recordsAfterSorting().map(item => (\n                                <CustomTableRow\n                                    item={item}\n                                    key={item._id}\n                                    setMessage={setMessage}\n                                    recToken={authTokens.token}\n                                />\n                            ))}\n                        </TableBody>\n                    </SortableTable>\n                </Paper>\n            </Grid>\n        </div>\n    )\n}\n\nexport default ViewApplications\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/JobListDashboard.js",["382","383","384","385","386","387","388","389"],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/Apply.js",["390"],"import * as yup from 'yup'\nimport {Formik, Form, Field} from 'formik'\nimport {\n    Button,\n    LinearProgress,\n    Grid,\n} from '@material-ui/core'\nimport {\n    TextField,\n} from 'formik-material-ui'\n\nimport React, {useEffect, useState} from 'react'\nimport {Alert} from '@material-ui/lab'\nimport useStyles from '../../styles/generalStyles'\nimport applicationService from '../../../services/applicationService'\nimport {useAuth} from '../../../context/auth'\nimport { withRouter } from 'react-router-dom';\n\nconst wordCount = (str) => {\n    return str.split(/\\s+/).length\n}\n\nconst validationSchema = yup.object({\n    sop: yup\n        .string('Enter sop')\n        .required('sop is required')\n        .test('wordcount',\n            'Bio is limited to 250 characters',\n            (v, c) => !v || wordCount(v) <= 250),\n})\n\n\nconst App = ({classes, onSubmit}) => (\n    <Formik\n        initialValues={{\n            sop: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <Form className={classes.form}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            aria-label=\"minimum height\"\n                            multiline\n                            name=\"sop\"\n                            type=\"text\"\n                            label=\"SOP\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={classes.submit}\n                >\n                    Submit\n                </Button>\n            </Form>\n        )}\n    </Formik>\n)\n\nconst ApplyToJob = (props) => {\n    const { authTokens } = useAuth()\n    const [message, setMessage] = useState(null)\n    const classes = useStyles()\n\n    useEffect(() => {\n        console.log('props match', props.match.params.jobId)\n    }, [])\n\n    const postApplication = async (values, {setSubmitting}) => {\n        try {\n            const savedApp = await applicationService.applyToJob(props.match.params.jobId, values, authTokens.token)\n            console.log('save as', savedApp)\n            props.history.push('/browseJobs')\n        } catch (err) {\n            setMessage({error: true, content: err.response.data.error})\n            setSubmitting(false)\n        }\n    }\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            {message && <Alert severity={message.error ? 'error' : 'success'}>{message.content}</Alert>}\n            <App classes={classes} onSubmit={postApplication} />\n        </div>\n    )\n}\n\nexport default withRouter(ApplyToJob)\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/MyApplications.js",["391","392","393"],"import React, {useState, useEffect} from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport useStyles from '../../styles/generalStyles'\nimport {\n    Button, Dialog, DialogContent, DialogTitle, LinearProgress, MenuItem, Paper,\n    TableBody, TableCell, TableRow,\n    Typography\n} from '@material-ui/core'\nimport applicantServices from '../../../services/applicantServices'\nimport {useAuth} from '../../../context/auth'\nimport CustomTable from '../../CustomTable'\nimport format from 'date-fns/format'\nimport {Field, Form, Formik} from 'formik'\nimport {TextField} from 'formik-material-ui'\nimport * as yup from 'yup'\nimport applicationService from '../../../services/applicationService'\nimport {Alert, Rating} from '@material-ui/lab'\nimport {withRouter} from 'react-router-dom'\n\nconst validationSchema = yup.object({\n    value: yup\n        .number('enter rating')\n        .required()\n        .integer('Should be an integer')\n})\n\nconst RatePopup = (props) => {\n    const {title, children, openPopup, setOpenPopup} = props\n\n    return (\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\n            <DialogContent dividers>\n                {children}\n            </DialogContent>\n        </Dialog>\n    )\n}\n\n\nconst App = ({onSubmit}) => (\n    <Formik\n        initialValues={{\n            value: 0\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <Form>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"number\"\n                            label=\"Rating\"\n                            name=\"value\"\n                            select\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        >\n                            {[0, 1, 2, 3, 4, 5].map((option) => (\n                                <MenuItem key={option} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Field>\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                >\n                    Submit\n                </Button>\n            </Form>\n        )}\n    </Formik>\n)\n\nconst MyApplications = (props) => {\n    const classes = useStyles()\n    const {authTokens} = useAuth()\n    const [myApplications, setMyApplications] = useState([])\n    const [message, setMessage] = useState(null)\n    const [openPopup, setOpenPopup] = useState(false)\n    const filterFn = {\n        fn: (items) => items\n    }\n    const headers = [\n        {id: 'title', name: 'Title', sortable: false},\n        {id: 'dateOfJoining', name: 'Joining date', sortable: false},\n        {id: 'salaryPerMonth', name: 'Salary', sortable: false},\n        {id: 'recruiterName', name: 'Recruiter name', sortable: false},\n        {id: 'status', name: 'Status', sortable: false},\n        {id: 'rating', name: 'My Rating', sortable: false}\n    ]\n    const {\n        SortableTable,\n        recordsAfterSorting\n    } = CustomTable(myApplications, headers, filterFn)\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const data = await applicantServices.getApplications(authTokens.token)\n                console.log('myAppls', data)\n                setMyApplications(data)\n            } catch (err) {\n                console.log('err', err)\n                console.log('err.response', err.response)\n            }\n        })()\n    }, [])\n\n\n    const setRatings = (appId) => async (values, {setSubmitting}) => {\n        try {\n            const response = await applicationService.rateJob(appId, values, authTokens.token)\n            console.log('response', response)\n            setOpenPopup(false)\n            window.location.reload()\n        } catch (err) {\n            setMessage(err.response.data.error)\n        }\n    }\n\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            <Typography variant=\"h3\" component=\"h5\" style={{marginBottom: '40px'}}>\n                My Applications\n            </Typography>\n            <Grid container spacing={2}>\n                <Grid component={Paper} xs={12}>\n                    <SortableTable\n                        records={myApplications}\n                        headCells={headers}\n                        filterFn={filterFn}\n                        setData={setMyApplications}\n                    >\n                        <TableBody>\n                            {recordsAfterSorting().map(item => (\n                                <TableRow key={item._id}>\n                                    <TableCell>{item.job.title}</TableCell>\n                                    <TableCell>\n                                        {item.dateOfJoining ?\n                                            format((new Date(item.dateOfJoining)), 'yyyy-MM-dd\\'T\\'HH:mm')\n                                            :\n                                            'Not Applicable'\n                                        }\n                                    </TableCell>\n                                    <TableCell>{item.job.salaryPerMonth}</TableCell>\n                                    <TableCell>{item.job.recruiter.user.name}</TableCell>\n                                    <TableCell>{item.status}</TableCell>\n                                    <TableCell>\n                                        {\n                                            item.status === 'accepted' ?\n                                                item.myRating === -1 ?\n                                                    (<div>\n                                                    <Button variant='outlined'\n                                                            onClick={() => setOpenPopup(true)}\n                                                    >\n                                                        Rate\n                                                    </Button>\n                                                    <RatePopup\n                                                        openPopup={openPopup}\n                                                        setOpenPopup={setOpenPopup}\n                                                    >\n                                                        {message && <Alert severity='error'>{message}</Alert>}\n                                                        <App onSubmit={setRatings(item._id)} />\n                                                    </RatePopup>\n                                                </div>)\n                                                    :\n                                                    (<Rating readOnly size='small' value={item.myRating}/>)\n                                                :\n                                                'Not Applicable'\n                                        }\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </SortableTable>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default withRouter(MyApplications)","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/listitems.js",["394","395"],"import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport {Link} from 'react-router-dom'\nimport Divider from '@material-ui/core/Divider'\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\n\nexport const recruiterListItems = (\n    <div>\n        <ListItem button component={Link} to='/profile'>\n            <ListItemIcon>\n                <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Profile\" />\n        </ListItem>\n        <ListItem button component={Link} to='/jobPostDashboard'>\n            <ListItemIcon>\n                <ShoppingCartIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Create Job\" />\n        </ListItem>\n        <ListItem button component={Link} to='/acceptedEmployees'>\n            <ListItemIcon>\n                <PeopleIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Accepted Emp\" />\n        </ListItem>\n        <ListItem button component={Link} to='/jobListDashboard'>\n            <ListItemIcon>\n                <BarChartIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"View Jobs\" />\n        </ListItem>\n        <Divider />\n        <ListItem button component={Link} to='/admin'>\n            <ListItemIcon>\n                <LayersIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Log out\" />\n        </ListItem>\n    </div>\n)\n\nexport const applicantListItems = (\n    <div>\n        <ListItem button component={Link} to='/profile'>\n            <ListItemIcon>\n                <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Profile\" />\n        </ListItem>\n        <ListItem button component={Link} to='/browseJobs'>\n            <ListItemIcon>\n                <ShoppingCartIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Browse Jobs\" />\n        </ListItem>\n        <ListItem button component={Link} to='/myApplications'>\n            <ListItemIcon>\n                <PeopleIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"My applications\" />\n        </ListItem>\n        <Divider />\n        <ListItem button component={Link} to='/admin'>\n            <ListItemIcon>\n                <LayersIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Log out\" />\n        </ListItem>\n    </div>\n)\n\nexport const unLoggedListItems = (\n    <div>\n        <ListItem button component={Link} to='/register'>\n            <ListItemIcon>\n                <LockOpenIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Register\" />\n        </ListItem>\n        <ListItem button component={Link} to='/login'>\n            <ListItemIcon>\n                <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Log in\" />\n        </ListItem>\n    </div>\n)","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/ApplicantProfile.js",["396","397","398","399","400","401"],"import useStyles from '../../styles/generalStyles'\nimport {useAuth} from '../../../context/auth'\nimport {useEffect, useState} from 'react'\nimport {\n    Box, Button,\n    Chip, LinearProgress, Link,\n    makeStyles,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography\n} from '@material-ui/core'\nimport Grid from '@material-ui/core/Grid'\nimport applicantServices from '../../../services/applicantServices'\nimport {Alert, Rating} from '@material-ui/lab'\nimport * as yup from 'yup'\nimport {Field, FieldArray, Form, Formik} from 'formik'\nimport authService from '../../../services/authService'\nimport {TextField} from 'formik-material-ui'\nimport {Autocomplete, AutocompleteRenderInputParams} from 'formik-material-ui-lab'\nimport {languages} from '../../utils/languages'\nimport MuiTextField from '@material-ui/core/TextField'\n\nconst formStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        marginBottom: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    modalForm: {\n        width: '100%',\n        marginTop: theme.spacing(0)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}))\n\n\nconst chipStyles = makeStyles((theme) => ({\n    chipContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.5),\n        },\n    },\n}))\n\nconst DisplayProfile = ({applicant, setEdit}) => {\n    const classes = chipStyles()\n    let ratingValue\n    if (applicant.ratings.length >= 0)\n        ratingValue = applicant.ratings.reduce((sum, curr) => sum = sum + curr.value, 0) / applicant.ratings.length\n\n    return (\n        <Paper>\n            <Grid container spacing={2} style={{padding: '30px', fontSize: '1.6em'}}>\n                <Grid item xs={12}>\n                    <b>Name:</b> {applicant.user.name}\n                </Grid>\n                <Grid item xs={12}>\n                    <b>EmailId:</b> {applicant.user.email}\n                </Grid>\n                <Grid item xs={12}>\n                    <b>Education:</b> <br />\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Institute Name</TableCell>\n                                <TableCell>Start Year</TableCell>\n                                <TableCell>End year</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {applicant.education.map(ed => (\n                                <TableRow key={ed._id}>\n                                    <TableCell>{ed.instituteName}</TableCell>\n                                    <TableCell>{ed.startYear}</TableCell>\n                                    <TableCell>{ed.endYear}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Grid>\n                <Grid item xs={12}>\n                    Skills:\n                    <Grid className={classes.chipContainer}>\n                        {applicant.skills.map((sk, it) => (\n                            <Chip key={it} label={sk} />\n                        ))}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    Rating: <Rating disabled precision={0.1} name='rating' value={ratingValue} />\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nconst validationSchema = yup.object({\n    name: yup\n        .string('Enter your name')\n        .required('Name is required'),\n    education: yup.array().of(\n        yup.object().shape({\n            instituteName: yup\n                .string()\n                .required('Institute name is required'),\n            startYear: yup\n                .number('Must be a number')\n                .required('Start year is required')\n                .min(1800, 'Invalid year')\n                .max(2040, 'Range not supported'),\n            endYear: yup\n                .number()\n                .min(yup.ref('startYear'), 'End year must be after start')\n                .max(2040, 'Range not supported')\n        })\n    )\n})\n\n\nconst App = ({applicant, setMessage, classes, token}) => {\n    const initEducation = []\n    for (let ind in applicant.education) {\n        const temp = {...applicant.education[ind]}\n        initEducation.push({\n            key: temp._id,\n            instituteName: temp.instituteName,\n            startYear: temp.startYear,\n            endYear: temp.endYear || ''\n        })\n    }\n    return (\n        <Formik\n            initialValues={{\n                name: applicant.user.name,\n                skills: applicant.skills,\n                education: initEducation\n            }}\n            validationSchema={validationSchema}\n            onSubmit={async (values, {setSubmitting}) => {\n                console.log('hiii')\n                try {\n                    console.log('values', values)\n                    const savedUser = await applicantServices.updateApplicant(values, token)\n                    setMessage(null)\n                    console.log('savedUser', savedUser)\n                    setSubmitting(false)\n                    window.location.reload()\n                } catch (err) {\n                    console.log('err', err)\n                    setMessage(err.response.data.error)\n                    setSubmitting(false)\n                }\n            }}\n        >\n            {({\n                  values,\n                  isSubmitting,\n                  touched,\n                  errors\n              }) => (\n                <Form className={classes.form}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                label=\"Name\"\n                                name=\"name\"\n                                placeholder=\"Jon Doe\"\n                                autoComplete='off'\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                name=\"skills\"\n                                multiple\n                                freeSolo\n                                component={Autocomplete}\n                                options={languages}\n                                variant=\"outlined\"\n                                fullWidth\n                                renderInput={(params: AutocompleteRenderInputParams) => (\n                                    <MuiTextField\n                                        {...params}\n                                        error={touched['skills'] && !!errors['skills']}\n                                        helperText={touched['skills'] && errors['skills']}\n                                        label=\"Skills\"\n                                        variant=\"outlined\"\n                                        fullWidth\n                                    />\n                                )}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Typography component=\"h1\" variant=\"h5\">\n                                Education\n                            </Typography>\n                            <FieldArray name=\"education\">\n                                {({push, remove}) => (\n                                    <Grid>\n                                        {values.education.map((p, index) => {\n                                            const instituteName = `education[${index}].instituteName`\n                                            const startYear = `education[${index}].startYear`\n                                            const endYear = `education[${index}].endYear`\n\n                                            return (\n                                                <Grid container spacing={1} key={p.key}>\n                                                    <Grid item xs={12}>\n                                                        <Field\n                                                            component={TextField}\n                                                            type=\"text\"\n                                                            label=\"Institute Name\"\n                                                            name={instituteName}\n                                                            autoComplete='off'\n                                                            variant=\"outlined\"\n                                                            required\n                                                            fullWidth\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={12} sm={5}>\n                                                        <Field\n                                                            component={TextField}\n                                                            type=\"number\"\n                                                            label=\"Start Year\"\n                                                            name={startYear}\n                                                            autoComplete='off'\n                                                            variant=\"outlined\"\n                                                            required\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={12} sm={5}>\n                                                        <Field\n                                                            component={TextField}\n                                                            type=\"number\"\n                                                            label=\"End Year\"\n                                                            name={endYear}\n                                                            autoComplete='off'\n                                                            variant=\"outlined\"\n                                                        />\n                                                    </Grid>\n                                                    <Grid item xs={2} sm={2}>\n                                                        <Button\n                                                            type=\"button\"\n                                                            color=\"secondary\"\n                                                            variant=\"outlined\"\n                                                            onClick={() => remove(index)}\n                                                        >\n                                                            x\n                                                        </Button>\n                                                    </Grid>\n                                                </Grid>\n                                            )\n                                        })}\n                                        <Grid item xs={5} style={{marginTop: '20px'}}>\n                                            <Button\n                                                type=\"button\"\n                                                variant=\"outlined\"\n                                                onClick={() =>\n                                                    push({key: Math.random(), instituteName: '', startYear: '', endYear: ''})\n                                                }\n                                            >\n                                                Add Education\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                )}\n                            </FieldArray>\n                        </Grid>\n                        {isSubmitting && <LinearProgress/>}\n                    </Grid>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className={classes.submit}\n                    >\n                        Submit\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nconst ApplicantProfile = () => {\n    const classes = useStyles()\n    const formClasses = formStyles()\n    const {authTokens} = useAuth()\n    const [edit, setEdit] = useState(false)\n    const [message, setMessage] = useState(null)\n    const [currApplicant, setCurrApplicant] = useState(null)\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('inside')\n                const response = await applicantServices.getApplicant(authTokens.token)\n                setCurrApplicant(response)\n            } catch (err) {\n                console.log('err', err.response)\n                if (err.response && err.response.data && err.response.data.error)\n                    setMessage(err.response.data.error)\n                else\n                    setMessage('Something went wrong')\n            }\n        })()\n    }, [])\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer} />\n            {message && <Alert severity='error'>{message}</Alert> }\n            {\n                edit ?\n                    (<Grid container spacing={2}><App applicant={currApplicant}\n                         setMessage={setMessage}\n                         classes={formClasses}\n                         token={authTokens.token}\n                    /></Grid>)\n                    :\n                    currApplicant &&\n                    (\n                        <div>\n                            <DisplayProfile\n                                applicant={currApplicant}\n                                setEdit={setEdit}\n                            />\n                            <Button fullWidth variant='contained' onClick={() => setEdit(true)}>Edit</Button>\n                        </div>\n                    )\n            }\n        </div>\n    )\n}\n\nexport default ApplicantProfile\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/RecruiterProfile.js",["402"],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/CustomTable.js",["403","404"],"import React, {useEffect, useState} from 'react'\nimport {Table, TableHead, TableRow, TableCell, makeStyles, TableSortLabel} from '@material-ui/core'\n\nexport default function CustomTable(records, headCells, filterFn) {\n    const [order, setOrder] = useState()\n    const [orderBy, setOrderBy] = useState()\n\n    const handleSortRequest = (cellId) => {\n        const isAsc = orderBy === cellId && order === 'asc'\n        setOrder(isAsc ? 'desc' : 'asc')\n        setOrderBy(cellId)\n    }\n\n    useEffect(() => {\n        console.log('calling sort', orderBy, order)\n        recordsAfterSorting()\n    }, [orderBy, order])\n\n\n    function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index])\n        stabilizedThis.sort((a, b) => {\n            const order = comparator(a[0], b[0])\n            // if (order) return order\n            // return a[1] - b[1]\n            return order ? order : a[1] - b[1]\n        })\n        return stabilizedThis.map((el) => el[0])\n    }\n\n    function getComparator(order, orderBy) {\n\n        console.log('here')\n        if (order === 'desc') {\n            return (a, b) => {\n                if (b[orderBy] < a[orderBy])\n                    return -1\n                if (b[orderBy] > a[orderBy])\n                    return 1\n                return 0\n            }\n        } else {\n            return (a, b) => {\n                if (b[orderBy] < a[orderBy])\n                    return 1\n                if (b[orderBy] > a[orderBy])\n                    return -1\n                return 0\n            }\n        }\n    }\n\n    const recordsAfterSorting = () => {\n        console.log('sorted', stableSort(filterFn.fn(records), getComparator(order, orderBy)))\n        return stableSort(filterFn.fn(records), getComparator(order, orderBy))\n    }\n\n    const SortableTable = ({children}) => (\n        <Table>\n            <TableHead>\n                <TableRow>\n                    {headCells.map(headCell => (\n                        <TableCell key={headCell.id}\n                                   sortDirection={orderBy === headCell.id ? order : false}>\n                            {!headCell.sortable ? headCell.name :\n                                <TableSortLabel\n                                    active={orderBy === headCell.id}\n                                    direction={orderBy === headCell.id ? order : 'asc'}\n                                    onClick={() => handleSortRequest(headCell.id)}\n                                >\n                                    {headCell.name}\n                                </TableSortLabel>\n                            }\n                        </TableCell>\n                    ))}\n                </TableRow>\n            </TableHead>\n\n            {children}\n        </Table>\n    )\n\n    return {\n        SortableTable,\n        recordsAfterSorting\n    }\n}\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/styles/generalStyles.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/RecruiterForm.js",["405"],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/LoginForm.js",["406"],"import * as yup from 'yup'\nimport authService from '../../services/authService'\nimport {Formik, Form, Field} from 'formik'\nimport {\n    Button,\n    LinearProgress,\n    Typography,\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\n} from '@material-ui/core'\nimport {\n    TextField,\n} from 'formik-material-ui'\n\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\nimport {useState} from 'react'\nimport {Alert} from '@material-ui/lab'\nimport useStyles from '../styles/formStyles'\nimport {useAuth} from '../../context/auth'\nimport {Redirect} from 'react-router-dom'\n\nconst validationSchema = yup.object({\n    email: yup\n        .string('Enter your email')\n        .email('Enter a valid email')\n        .required('Email is required'),\n    password: yup\n        .string('Enter your password')\n        .required('Password is required')\n})\n\n\nconst App = ({classes, onSubmit}) => (\n    <Formik\n        initialValues={{\n            email: '',\n            password: ''\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <Form className={classes.form}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            name=\"email\"\n                            type=\"email\"\n                            label=\"Email\"\n                            placeholder=\"jon.doe@example.com\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"password\"\n                            label=\"Password\"\n                            name=\"password\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={classes.submit}\n                >\n                    Submit\n                </Button>\n                <Grid container justify=\"flex-end\">\n                    <Grid item>\n                        <Link href=\"/register\" variant=\"body2\">\n                            Don't have an account? Sign up!\n                        </Link>\n                    </Grid>\n                </Grid>\n            </Form>\n        )}\n    </Formik>\n)\n\n\nconst LoginForm = () => {\n    const [isLoggedIn, setLoggedIn] = useState(false)\n    const [message, setMessage] = useState(null)\n    const classes = useStyles()\n\n    const { setAuthTokens } = useAuth()\n\n    const postLogin = async (values, {setSubmitting}) => {\n        console.log('Submitting')\n        try {\n            const regBody = {...values}\n            const result = await authService.login(regBody)\n            setMessage(null)\n            console.log('result', result)\n            setSubmitting(false)\n            setAuthTokens({token: result.token, type: result.type})\n            setLoggedIn(true)\n        } catch (err) {\n            console.log('err', err.response.data.error)\n            setMessage(err.response.data.error)\n            setSubmitting(false)\n        }\n    }\n\n    if (isLoggedIn) {\n        return <Redirect to=\"/\" />\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <div className={classes.paper}>\n\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon/>\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n\n                {message && <Alert severity=\"error\">{message}</Alert>}\n                <App classes={classes} onSubmit={postLogin}/>\n            </div>\n        </Container>\n    )\n}\n\nexport default LoginForm\n\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/ApplicantForm.js",["407","408","409"],"import * as yup from 'yup'\nimport authService from '../../services/authService'\nimport {Formik, Form, Field, FieldArray, getIn} from 'formik'\nimport {\n    Button,\n    LinearProgress,\n    Typography,\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\n} from '@material-ui/core'\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\nimport MuiTextField from '@material-ui/core/TextField'\n\nimport {\n    TextField,\n} from 'formik-material-ui'\n\nimport {\n    Autocomplete,\n    AutocompleteRenderInputParams,\n} from 'formik-material-ui-lab'\nimport {Alert} from '@material-ui/lab'\nimport {useState} from 'react'\nimport useStyles from '../styles/formStyles'\nimport {Redirect} from 'react-router-dom'\nimport {languages} from '../utils/languages'\n\nconst validationSchema = yup.object({\n    email: yup\n        .string('Enter your email')\n        .email('Enter a valid email')\n        .required('Email is required'),\n    password: yup\n        .string('Enter your password')\n        .min(8, 'Password should be of minimum 8 characters length')\n        .required('Password is required'),\n    confirmPassword: yup\n        .string('Enter your password')\n        .required('Confirm your password')\n        .oneOf([yup.ref('password')], 'Password does not match'),\n    name: yup\n        .string('Enter your name')\n        .required('Name is required'),\n    education: yup.array().of(\n        yup.object().shape({\n            instituteName: yup\n                .string()\n                .required('Institute name is required'),\n            startYear: yup\n                .number('Must be a number')\n                .required('Start year is required')\n                .min(1800, 'Invalid year')\n                .max(2040, 'Range not supported'),\n            endYear: yup\n                .number()\n                .min(yup.ref('startYear'), 'End year must be after start')\n                .max(2040, 'Range not supported')\n        })\n    )\n})\n\n\nconst App = ({setMessage, classes, setRegistered}) => (\n    <Formik\n        initialValues={{\n            email: '',\n            password: '',\n            name: '',\n            confirmPassword: '',\n            skills: [],\n            education: [\n                {\n                    key: Math.random(),\n                    instituteName: '',\n                    startYear: '',\n                    endYear: ''\n                }\n            ],\n            profile: ''\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (values, {setSubmitting}) => {\n            try {\n                const regBody = {...values, type: 'applicant'}\n                const savedUser = await authService.register(regBody)\n                setMessage(null)\n                console.log('savedUser', savedUser)\n                setSubmitting(false)\n                setRegistered(true)\n            } catch (err) {\n                console.log('err', err)\n                setMessage(err.response.data.error)\n                setSubmitting(false)\n            }\n        }}\n    >\n        {({\n              values,\n              isSubmitting,\n              touched,\n              errors,\n              setFieldValue\n          }) => (\n            <Form className={classes.form}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        {<img id='profilePic' />}\n                        <input id=\"file\" name=\"file\" type=\"file\" accept='.jpeg, .png, .jpg' onChange={(event) => {\n                            const file = event.currentTarget.files[0]\n                            if (file) {\n                                if (file.size < 75000) {\n                                    const reader = new FileReader()\n                                    reader.onload = (upload) => {\n                                        console.log('b64pic: ', upload)\n                                        setFieldValue(\"profile\", btoa(upload.target.result))\n                                        document.getElementById('profilePic').src = 'data:image/png;base64,' + btoa(upload.target.result)\n                                    }\n                                    reader.readAsBinaryString(file)\n                                } else {\n                                    window.alert('File size is too big')\n                                }\n                            }\n                        }} />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            label=\"Name\"\n                            name=\"name\"\n                            placeholder=\"Jon Doe\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            name=\"email\"\n                            type=\"email\"\n                            label=\"Email\"\n                            placeholder=\"jon.doe@example.com\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"password\"\n                            label=\"Password\"\n                            name=\"password\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"password\"\n                            label=\"ConfirmPassword\"\n                            name=\"confirmPassword\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            name=\"skills\"\n                            multiple\n                            freeSolo\n                            component={Autocomplete}\n                            options={languages}\n                            variant=\"outlined\"\n                            fullWidth\n                            renderInput={(params: AutocompleteRenderInputParams) => (\n                                <MuiTextField\n                                    {...params}\n                                    error={touched['skills'] && !!errors['skills']}\n                                    helperText={touched['skills'] && errors['skills']}\n                                    label=\"Skills\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                />\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Education\n                        </Typography>\n                        <FieldArray name=\"education\">\n                            {({push, remove}) => (\n                                <Grid>\n                                    {values.education.map((p, index) => {\n                                        const instituteName = `education[${index}].instituteName`\n                                        const startYear = `education[${index}].startYear`\n                                        const endYear = `education[${index}].endYear`\n\n                                        return (\n                                            <Grid container spacing={1} key={p.key}>\n                                                <Grid item xs={12}>\n                                                    <Field\n                                                        component={TextField}\n                                                        type=\"text\"\n                                                        label=\"Institute Name\"\n                                                        name={instituteName}\n                                                        autoComplete='off'\n                                                        variant=\"outlined\"\n                                                        required\n                                                        fullWidth\n                                                    />\n                                                </Grid>\n                                                <Grid item xs={12} sm={5}>\n                                                    <Field\n                                                        component={TextField}\n                                                        type=\"number\"\n                                                        label=\"Start Year\"\n                                                        name={startYear}\n                                                        autoComplete='off'\n                                                        variant=\"outlined\"\n                                                        required\n                                                    />\n                                                </Grid>\n                                                <Grid item xs={12} sm={5}>\n                                                    <Field\n                                                        component={TextField}\n                                                        type=\"number\"\n                                                        label=\"End Year\"\n                                                        name={endYear}\n                                                        autoComplete='off'\n                                                        variant=\"outlined\"\n                                                    />\n                                                </Grid>\n                                                <Grid item xs={2} sm={2}>\n                                                    <Button\n                                                        type=\"button\"\n                                                        color=\"secondary\"\n                                                        variant=\"outlined\"\n                                                        onClick={() => remove(index)}\n                                                    >\n                                                        x\n                                                    </Button>\n                                                </Grid>\n                                            </Grid>\n                                        )\n                                    })}\n                                    <Grid item xs={5} style={{marginTop: '20px'}}>\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"outlined\"\n                                        onClick={() =>\n                                            push({key: Math.random(), instituteName: '', startYear: '', endYear: ''})\n                                        }\n                                    >\n                                        Add Education\n                                    </Button>\n                                    </Grid>\n                                </Grid>\n                            )}\n                        </FieldArray>\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={classes.submit}\n                >\n                    Submit\n                </Button>\n                <Grid container justify=\"flex-end\">\n                    <Grid item>\n                        <Link href=\"/login\" variant=\"body2\">\n                            Already have an account? Sign in\n                        </Link>\n                        <br/>\n                        <Link href=\"/register\" variant=\"body2\">\n                            Choose type of user\n                        </Link>\n                    </Grid>\n                </Grid>\n            </Form>\n        )}\n    </Formik>\n)\n\nconst ApplicantForm = () => {\n    const [message, setMessage] = useState(null)\n    const [registered, setRegistered] = useState(false)\n    const classes = useStyles()\n\n    if (registered) {\n        return <Redirect to=\"/login\"/>\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"sm\">\n            <CssBaseline/>\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon/>\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h4\">\n                    Sign up\n                </Typography>\n\n                {message && <Alert severity=\"error\">{message}</Alert>}\n                <App setMessage={setMessage} classes={classes} setRegistered={setRegistered}/>\n            </div>\n        </Container>\n    )\n}\n\nexport default ApplicantForm\n\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/applicationService.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/authService.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/applicantServices.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/typeOfJob.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/duration.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/jobService.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/recruiterService.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/languages.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/styles/formStyles.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobEditPopup.js",["410"],"import {Dialog, DialogContent, DialogTitle, Divider} from '@material-ui/core'\n\n\nconst JobEditPopup = (props) => {\n    const {title, children, openPopup, setOpenPopup} = props\n\n    return (\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\n            <DialogTitle>\n                {title}\n            </DialogTitle>\n            <DialogContent dividers>\n                {children}\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nexport default JobEditPopup\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobCard.js",["411"],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/JobEditForm.js",["412","413","414","415","416"],"import * as yup from 'yup'\nimport {Formik, Form, Field} from 'formik'\nimport {\n    Button,\n    LinearProgress,\n    Typography,\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\n} from '@material-ui/core'\nimport {\n    TextField,\n} from 'formik-material-ui'\nimport {useState} from 'react'\nimport {Alert} from '@material-ui/lab'\nimport useStyles from '../styles/formStyles'\nimport {useAuth} from '../../context/auth'\nimport {Redirect} from 'react-router-dom'\nimport jobService from '../../services/jobService'\nimport {DateTimePicker} from 'formik-material-ui-pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers'\n\nconst validationSchema = yup.object({\n    maxApplications: yup\n        .number('enter number')\n        .min(0, 'entry not valid')\n        .integer(),\n    maxPositions: yup\n        .number('enter number')\n        .min(0, 'entry not valid')\n        .integer()\n})\n\n\nconst App = ({classes, onSubmit, job}) => (\n    <Formik\n        initialValues={{\n            maxApplications: job.maxApplications,\n            maxPositions: job.maxPositions,\n            deadline: job.deadline\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Form className={classes.modalForm}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                name=\"maxApplications\"\n                                type=\"number\"\n                                label=\"Max number of applicants\"\n                                autoComplete='off'\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                type=\"number\"\n                                label=\"Max number of positions\"\n                                name=\"maxPositions\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={DateTimePicker}\n                                label=\"Deadline\"\n                                name=\"deadline\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        {isSubmitting && <LinearProgress/>}\n                    </Grid>\n\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className={classes.submit}\n                    >\n                        Submit\n                    </Button>\n                </Form>\n            </MuiPickersUtilsProvider>\n        )}\n    </Formik>\n)\n\n\nconst JobEditForm = ({job, handleOnUpdate, jobs, setOpenPopup}) => {\n    const [message, setMessage] = useState(null)\n    const [error, setError] = useState(true)\n    const classes = useStyles()\n\n    console.log('job', job.maxPositions)\n\n    const {authTokens} = useAuth()\n\n\n    const updateJob = async (values, {setSubmitting}) => {\n        try {\n            const body = {...values}\n            const result = await jobService.updateOne(job._id, body, authTokens.token)\n            setMessage(null)\n            console.log('result', result)\n\n            setError(false)\n            setMessage('Updated')\n            await new Promise((resolve)=>setTimeout(() => {\n                resolve()\n            }, 1000))\n            setSubmitting(false)\n            handleOnUpdate()\n            setOpenPopup(false)\n        } catch (err) {\n            console.log('err', err.response)\n            if (err.response.data.error) {\n                console.log('err', err.response.data.error)\n                setMessage(err.response.data.error)\n            }\n            setSubmitting(false)\n        }\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <Grid>\n                {message &&\n                    <Alert\n                        style={{marginBottom: '15px'}}\n                        severity={error ? \"error\" : \"success\"}\n                    >{message}</Alert>}\n                <App job={job} classes={classes} onSubmit={updateJob}/>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default JobEditForm\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/JobPostForm.js",["417","418","419","420","421","422"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/index.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/App.js",["423"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/Home.js",["424"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/Test.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/context/auth.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/AppToolBar.js",["425","426","427","428","429"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/Admin.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/Profile.js",["430","431"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/Register.js",["432","433","434","435","436"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/ApplicantRegister.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/RecruiterRegister.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/Login.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/MasterAuth.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/auth/PrivateRoute.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/JobPostDashboard.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/JobListDashboard.js",["437","438","439","440","441"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/ViewApplications.js",["442"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/AcceptedEmployees.js",["443","444","445","446"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/applicants/JobListDashboard.js",["447","448","449","450","451","452","453","454"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/applicants/Apply.js",["455"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/applicants/MyApplications.js",["456","457","458"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/listitems.js",["459","460"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/applicants/ApplicantProfile.js",["461","462","463","464","465","466"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/RecruiterProfile.js",["467"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/CustomTable.js",["468","469"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/styles/generalStyles.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/RecruiterForm.js",["470"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/ApplicantForm.js",["471","472","473"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/LoginForm.js",["474"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/applicationService.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/applicantServices.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/authService.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/utils/duration.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/utils/typeOfJob.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/jobService.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/services/recruiterService.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/styles/formStyles.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/utils/languages.js",[],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/JobCard.js",["475"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/routes/recruiters/JobEditPopup.js",["476"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/JobEditForm.js",["477","478","479","480","481"],"/home/abhishekh/Documents/dass/as1/job-portal/frontend/src/components/forms/JobPostForm.js",["482","483","484","485","486","487"],{"ruleId":"488","replacedBy":"489"},{"ruleId":"490","replacedBy":"491"},{"ruleId":"492","severity":1,"message":"493","line":3,"column":8,"nodeType":"494","messageId":"495","endLine":3,"endColumn":16},{"ruleId":"492","severity":1,"message":"496","line":1,"column":16,"nodeType":"494","messageId":"495","endLine":1,"endColumn":25},{"ruleId":"492","severity":1,"message":"497","line":15,"column":8,"nodeType":"494","messageId":"495","endLine":15,"endColumn":16},{"ruleId":"492","severity":1,"message":"498","line":16,"column":8,"nodeType":"494","messageId":"495","endLine":16,"endColumn":20},{"ruleId":"492","severity":1,"message":"499","line":17,"column":8,"nodeType":"494","messageId":"495","endLine":17,"endColumn":20},{"ruleId":"492","severity":1,"message":"500","line":18,"column":8,"nodeType":"494","messageId":"495","endLine":18,"endColumn":17},{"ruleId":"492","severity":1,"message":"501","line":19,"column":8,"nodeType":"494","messageId":"495","endLine":19,"endColumn":16},{"ruleId":"492","severity":1,"message":"502","line":1,"column":10,"nodeType":"494","messageId":"495","endLine":1,"endColumn":15},{"ruleId":"492","severity":1,"message":"503","line":1,"column":17,"nodeType":"494","messageId":"495","endLine":1,"endColumn":25},{"ruleId":"492","severity":1,"message":"504","line":1,"column":8,"nodeType":"494","messageId":"495","endLine":1,"endColumn":21},{"ruleId":"492","severity":1,"message":"505","line":2,"column":9,"nodeType":"494","messageId":"495","endLine":2,"endColumn":17},{"ruleId":"492","severity":1,"message":"506","line":3,"column":33,"nodeType":"494","messageId":"495","endLine":3,"endColumn":44},{"ruleId":"492","severity":1,"message":"507","line":3,"column":52,"nodeType":"494","messageId":"495","endLine":3,"endColumn":56},{"ruleId":"492","severity":1,"message":"508","line":33,"column":11,"nodeType":"494","messageId":"495","endLine":33,"endColumn":18},{"ruleId":"492","severity":1,"message":"509","line":3,"column":9,"nodeType":"494","messageId":"495","endLine":3,"endColumn":15},{"ruleId":"492","severity":1,"message":"510","line":3,"column":17,"nodeType":"494","messageId":"495","endLine":3,"endColumn":33},{"ruleId":"492","severity":1,"message":"511","line":8,"column":8,"nodeType":"494","messageId":"495","endLine":8,"endColumn":20},{"ruleId":"492","severity":1,"message":"512","line":9,"column":8,"nodeType":"494","messageId":"495","endLine":9,"endColumn":19},{"ruleId":"492","severity":1,"message":"513","line":10,"column":8,"nodeType":"494","messageId":"495","endLine":10,"endColumn":17},{"ruleId":"492","severity":1,"message":"514","line":33,"column":12,"nodeType":"494","messageId":"495","endLine":33,"endColumn":17},{"ruleId":"492","severity":1,"message":"515","line":150,"column":22,"nodeType":"494","messageId":"495","endLine":150,"endColumn":33},{"ruleId":"516","severity":1,"message":"517","line":191,"column":8,"nodeType":"518","endLine":191,"endColumn":10,"suggestions":"519"},{"ruleId":"492","severity":1,"message":"520","line":193,"column":11,"nodeType":"494","messageId":"495","endLine":193,"endColumn":21},{"ruleId":"492","severity":1,"message":"515","line":195,"column":22,"nodeType":"494","messageId":"495","endLine":195,"endColumn":33},{"ruleId":"492","severity":1,"message":"521","line":10,"column":5,"nodeType":"494","messageId":"495","endLine":10,"endColumn":10},{"ruleId":"492","severity":1,"message":"522","line":13,"column":5,"nodeType":"494","messageId":"495","endLine":13,"endColumn":14},{"ruleId":"492","severity":1,"message":"523","line":17,"column":8,"nodeType":"494","messageId":"495","endLine":17,"endColumn":15},{"ruleId":"492","severity":1,"message":"524","line":23,"column":9,"nodeType":"494","messageId":"495","endLine":23,"endColumn":23},{"ruleId":"492","severity":1,"message":"525","line":26,"column":8,"nodeType":"494","messageId":"495","endLine":26,"endColumn":19},{"ruleId":"492","severity":1,"message":"526","line":28,"column":9,"nodeType":"494","messageId":"495","endLine":28,"endColumn":19},{"ruleId":"492","severity":1,"message":"507","line":30,"column":9,"nodeType":"494","messageId":"495","endLine":30,"endColumn":13},{"ruleId":"516","severity":1,"message":"517","line":220,"column":8,"nodeType":"518","endLine":220,"endColumn":10,"suggestions":"527"},{"ruleId":"516","severity":1,"message":"528","line":83,"column":8,"nodeType":"518","endLine":83,"endColumn":10,"suggestions":"529"},{"ruleId":"492","severity":1,"message":"530","line":5,"column":36,"nodeType":"494","messageId":"495","endLine":5,"endColumn":47},{"ruleId":"492","severity":1,"message":"514","line":28,"column":12,"nodeType":"494","messageId":"495","endLine":28,"endColumn":17},{"ruleId":"516","severity":1,"message":"517","line":122,"column":8,"nodeType":"518","endLine":122,"endColumn":10,"suggestions":"531"},{"ruleId":"492","severity":1,"message":"532","line":5,"column":8,"nodeType":"494","messageId":"495","endLine":5,"endColumn":21},{"ruleId":"492","severity":1,"message":"533","line":11,"column":8,"nodeType":"494","messageId":"495","endLine":11,"endColumn":22},{"ruleId":"492","severity":1,"message":"534","line":5,"column":5,"nodeType":"494","messageId":"495","endLine":5,"endColumn":8},{"ruleId":"492","severity":1,"message":"507","line":6,"column":27,"nodeType":"494","messageId":"495","endLine":6,"endColumn":31},{"ruleId":"492","severity":1,"message":"525","line":21,"column":8,"nodeType":"494","messageId":"495","endLine":21,"endColumn":19},{"ruleId":"535","severity":1,"message":"536","line":75,"column":43,"nodeType":"537","endLine":75,"endColumn":99},{"ruleId":"535","severity":1,"message":"536","line":190,"column":30,"nodeType":"537","endLine":190,"endColumn":99},{"ruleId":"516","severity":1,"message":"517","line":356,"column":8,"nodeType":"518","endLine":356,"endColumn":10,"suggestions":"538"},{"ruleId":"516","severity":1,"message":"517","line":194,"column":8,"nodeType":"518","endLine":194,"endColumn":10,"suggestions":"539"},{"ruleId":"492","severity":1,"message":"540","line":2,"column":48,"nodeType":"494","messageId":"495","endLine":2,"endColumn":58},{"ruleId":"516","severity":1,"message":"541","line":17,"column":8,"nodeType":"518","endLine":17,"endColumn":24,"suggestions":"542"},{"ruleId":"492","severity":1,"message":"540","line":8,"column":5,"nodeType":"494","messageId":"495","endLine":8,"endColumn":15},{"ruleId":"492","severity":1,"message":"540","line":8,"column":5,"nodeType":"494","messageId":"495","endLine":8,"endColumn":15},{"ruleId":"492","severity":1,"message":"543","line":3,"column":42,"nodeType":"494","messageId":"495","endLine":3,"endColumn":47},{"ruleId":"492","severity":1,"message":"540","line":8,"column":5,"nodeType":"494","messageId":"495","endLine":8,"endColumn":15},{"ruleId":"535","severity":1,"message":"536","line":106,"column":26,"nodeType":"537","endLine":106,"endColumn":49},{"ruleId":"492","severity":1,"message":"544","line":1,"column":45,"nodeType":"494","messageId":"495","endLine":1,"endColumn":52},{"ruleId":"492","severity":1,"message":"545","line":7,"column":8,"nodeType":"494","messageId":"495","endLine":7,"endColumn":17},{"ruleId":"492","severity":1,"message":"546","line":6,"column":5,"nodeType":"494","messageId":"495","endLine":6,"endColumn":15},{"ruleId":"492","severity":1,"message":"540","line":7,"column":5,"nodeType":"494","messageId":"495","endLine":7,"endColumn":15},{"ruleId":"492","severity":1,"message":"547","line":7,"column":41,"nodeType":"494","messageId":"495","endLine":7,"endColumn":47},{"ruleId":"492","severity":1,"message":"507","line":7,"column":55,"nodeType":"494","messageId":"495","endLine":7,"endColumn":59},{"ruleId":"492","severity":1,"message":"503","line":16,"column":9,"nodeType":"494","messageId":"495","endLine":16,"endColumn":17},{"ruleId":"492","severity":1,"message":"525","line":2,"column":8,"nodeType":"494","messageId":"495","endLine":2,"endColumn":19},{"ruleId":"492","severity":1,"message":"540","line":10,"column":5,"nodeType":"494","messageId":"495","endLine":10,"endColumn":15},{"ruleId":"492","severity":1,"message":"506","line":12,"column":5,"nodeType":"494","messageId":"495","endLine":12,"endColumn":16},{"ruleId":"492","severity":1,"message":"547","line":13,"column":5,"nodeType":"494","messageId":"495","endLine":13,"endColumn":11},{"ruleId":"492","severity":1,"message":"507","line":15,"column":5,"nodeType":"494","messageId":"495","endLine":15,"endColumn":9},{"ruleId":"492","severity":1,"message":"548","line":24,"column":8,"nodeType":"494","messageId":"495","endLine":24,"endColumn":24},{"ruleId":"492","severity":1,"message":"493","line":3,"column":8,"nodeType":"494","messageId":"495","endLine":3,"endColumn":16},{"ruleId":"492","severity":1,"message":"496","line":1,"column":16,"nodeType":"494","messageId":"495","endLine":1,"endColumn":25},{"ruleId":"492","severity":1,"message":"497","line":15,"column":8,"nodeType":"494","messageId":"495","endLine":15,"endColumn":16},{"ruleId":"492","severity":1,"message":"498","line":16,"column":8,"nodeType":"494","messageId":"495","endLine":16,"endColumn":20},{"ruleId":"492","severity":1,"message":"499","line":17,"column":8,"nodeType":"494","messageId":"495","endLine":17,"endColumn":20},{"ruleId":"492","severity":1,"message":"500","line":18,"column":8,"nodeType":"494","messageId":"495","endLine":18,"endColumn":17},{"ruleId":"492","severity":1,"message":"501","line":19,"column":8,"nodeType":"494","messageId":"495","endLine":19,"endColumn":16},{"ruleId":"492","severity":1,"message":"502","line":1,"column":10,"nodeType":"494","messageId":"495","endLine":1,"endColumn":15},{"ruleId":"492","severity":1,"message":"503","line":1,"column":17,"nodeType":"494","messageId":"495","endLine":1,"endColumn":25},{"ruleId":"492","severity":1,"message":"504","line":1,"column":8,"nodeType":"494","messageId":"495","endLine":1,"endColumn":21},{"ruleId":"492","severity":1,"message":"505","line":2,"column":9,"nodeType":"494","messageId":"495","endLine":2,"endColumn":17},{"ruleId":"492","severity":1,"message":"506","line":3,"column":33,"nodeType":"494","messageId":"495","endLine":3,"endColumn":44},{"ruleId":"492","severity":1,"message":"507","line":3,"column":52,"nodeType":"494","messageId":"495","endLine":3,"endColumn":56},{"ruleId":"492","severity":1,"message":"508","line":33,"column":11,"nodeType":"494","messageId":"495","endLine":33,"endColumn":18},{"ruleId":"492","severity":1,"message":"509","line":3,"column":9,"nodeType":"494","messageId":"495","endLine":3,"endColumn":15},{"ruleId":"492","severity":1,"message":"510","line":3,"column":17,"nodeType":"494","messageId":"495","endLine":3,"endColumn":33},{"ruleId":"492","severity":1,"message":"511","line":8,"column":8,"nodeType":"494","messageId":"495","endLine":8,"endColumn":20},{"ruleId":"492","severity":1,"message":"512","line":9,"column":8,"nodeType":"494","messageId":"495","endLine":9,"endColumn":19},{"ruleId":"492","severity":1,"message":"513","line":10,"column":8,"nodeType":"494","messageId":"495","endLine":10,"endColumn":17},{"ruleId":"492","severity":1,"message":"515","line":195,"column":22,"nodeType":"494","messageId":"495","endLine":195,"endColumn":33},{"ruleId":"492","severity":1,"message":"514","line":33,"column":12,"nodeType":"494","messageId":"495","endLine":33,"endColumn":17},{"ruleId":"492","severity":1,"message":"515","line":150,"column":22,"nodeType":"494","messageId":"495","endLine":150,"endColumn":33},{"ruleId":"516","severity":1,"message":"517","line":191,"column":8,"nodeType":"518","endLine":191,"endColumn":10,"suggestions":"549"},{"ruleId":"492","severity":1,"message":"520","line":193,"column":11,"nodeType":"494","messageId":"495","endLine":193,"endColumn":21},{"ruleId":"492","severity":1,"message":"521","line":10,"column":5,"nodeType":"494","messageId":"495","endLine":10,"endColumn":10},{"ruleId":"492","severity":1,"message":"522","line":13,"column":5,"nodeType":"494","messageId":"495","endLine":13,"endColumn":14},{"ruleId":"492","severity":1,"message":"523","line":17,"column":8,"nodeType":"494","messageId":"495","endLine":17,"endColumn":15},{"ruleId":"492","severity":1,"message":"524","line":23,"column":9,"nodeType":"494","messageId":"495","endLine":23,"endColumn":23},{"ruleId":"492","severity":1,"message":"525","line":26,"column":8,"nodeType":"494","messageId":"495","endLine":26,"endColumn":19},{"ruleId":"492","severity":1,"message":"526","line":28,"column":9,"nodeType":"494","messageId":"495","endLine":28,"endColumn":19},{"ruleId":"492","severity":1,"message":"507","line":30,"column":9,"nodeType":"494","messageId":"495","endLine":30,"endColumn":13},{"ruleId":"516","severity":1,"message":"517","line":220,"column":8,"nodeType":"518","endLine":220,"endColumn":10,"suggestions":"550"},{"ruleId":"516","severity":1,"message":"528","line":83,"column":8,"nodeType":"518","endLine":83,"endColumn":10,"suggestions":"551"},{"ruleId":"492","severity":1,"message":"530","line":5,"column":36,"nodeType":"494","messageId":"495","endLine":5,"endColumn":47},{"ruleId":"492","severity":1,"message":"514","line":28,"column":12,"nodeType":"494","messageId":"495","endLine":28,"endColumn":17},{"ruleId":"516","severity":1,"message":"517","line":122,"column":8,"nodeType":"518","endLine":122,"endColumn":10,"suggestions":"552"},{"ruleId":"492","severity":1,"message":"532","line":5,"column":8,"nodeType":"494","messageId":"495","endLine":5,"endColumn":21},{"ruleId":"492","severity":1,"message":"533","line":11,"column":8,"nodeType":"494","messageId":"495","endLine":11,"endColumn":22},{"ruleId":"492","severity":1,"message":"534","line":5,"column":5,"nodeType":"494","messageId":"495","endLine":5,"endColumn":8},{"ruleId":"492","severity":1,"message":"507","line":6,"column":27,"nodeType":"494","messageId":"495","endLine":6,"endColumn":31},{"ruleId":"492","severity":1,"message":"525","line":21,"column":8,"nodeType":"494","messageId":"495","endLine":21,"endColumn":19},{"ruleId":"535","severity":1,"message":"536","line":75,"column":43,"nodeType":"537","endLine":75,"endColumn":99},{"ruleId":"535","severity":1,"message":"536","line":190,"column":30,"nodeType":"537","endLine":190,"endColumn":99},{"ruleId":"516","severity":1,"message":"517","line":356,"column":8,"nodeType":"518","endLine":356,"endColumn":10,"suggestions":"553"},{"ruleId":"516","severity":1,"message":"517","line":194,"column":8,"nodeType":"518","endLine":194,"endColumn":10,"suggestions":"554"},{"ruleId":"492","severity":1,"message":"540","line":2,"column":48,"nodeType":"494","messageId":"495","endLine":2,"endColumn":58},{"ruleId":"516","severity":1,"message":"541","line":17,"column":8,"nodeType":"518","endLine":17,"endColumn":24,"suggestions":"555"},{"ruleId":"492","severity":1,"message":"540","line":8,"column":5,"nodeType":"494","messageId":"495","endLine":8,"endColumn":15},{"ruleId":"492","severity":1,"message":"543","line":3,"column":42,"nodeType":"494","messageId":"495","endLine":3,"endColumn":47},{"ruleId":"492","severity":1,"message":"540","line":8,"column":5,"nodeType":"494","messageId":"495","endLine":8,"endColumn":15},{"ruleId":"535","severity":1,"message":"536","line":106,"column":26,"nodeType":"537","endLine":106,"endColumn":49},{"ruleId":"492","severity":1,"message":"540","line":8,"column":5,"nodeType":"494","messageId":"495","endLine":8,"endColumn":15},{"ruleId":"492","severity":1,"message":"545","line":7,"column":8,"nodeType":"494","messageId":"495","endLine":7,"endColumn":17},{"ruleId":"492","severity":1,"message":"544","line":1,"column":45,"nodeType":"494","messageId":"495","endLine":1,"endColumn":52},{"ruleId":"492","severity":1,"message":"546","line":6,"column":5,"nodeType":"494","messageId":"495","endLine":6,"endColumn":15},{"ruleId":"492","severity":1,"message":"540","line":7,"column":5,"nodeType":"494","messageId":"495","endLine":7,"endColumn":15},{"ruleId":"492","severity":1,"message":"547","line":7,"column":41,"nodeType":"494","messageId":"495","endLine":7,"endColumn":47},{"ruleId":"492","severity":1,"message":"507","line":7,"column":55,"nodeType":"494","messageId":"495","endLine":7,"endColumn":59},{"ruleId":"492","severity":1,"message":"503","line":16,"column":9,"nodeType":"494","messageId":"495","endLine":16,"endColumn":17},{"ruleId":"492","severity":1,"message":"525","line":2,"column":8,"nodeType":"494","messageId":"495","endLine":2,"endColumn":19},{"ruleId":"492","severity":1,"message":"540","line":10,"column":5,"nodeType":"494","messageId":"495","endLine":10,"endColumn":15},{"ruleId":"492","severity":1,"message":"506","line":12,"column":5,"nodeType":"494","messageId":"495","endLine":12,"endColumn":16},{"ruleId":"492","severity":1,"message":"547","line":13,"column":5,"nodeType":"494","messageId":"495","endLine":13,"endColumn":11},{"ruleId":"492","severity":1,"message":"507","line":15,"column":5,"nodeType":"494","messageId":"495","endLine":15,"endColumn":9},{"ruleId":"492","severity":1,"message":"548","line":24,"column":8,"nodeType":"494","messageId":"495","endLine":24,"endColumn":24},"no-native-reassign",["556"],"no-negated-in-lhs",["557"],"no-unused-vars","'Register' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'RecruiterForm' is defined but never used.","'useState' is defined but never used.","'CssBaseline' is defined but never used.","'Link' is defined but never used.","'classes' is assigned a value but never used.","'Button' is defined but never used.","'withMobileDialog' is defined but never used.","'JobEditPopup' is defined but never used.","'JobEditForm' is defined but never used.","'LoginForm' is defined but never used.","'title' is assigned a value but never used.","'setFilterFn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authTokens.token'. Either include it or remove the dependency array.","ArrayExpression",["558"],"'setRatings' is assigned a value but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'Toolbar' is defined but never used.","'DateTimePicker' is defined but never used.","'authService' is defined but never used.","'lightGreen' is defined but never used.",["559"],"React Hook useEffect has a missing dependency: 'props.match.params.jobId'. Either include it or remove the dependency array.",["560"],"'DialogTitle' is defined but never used.",["561"],"'ListSubheader' is defined but never used.","'AssignmentIcon' is defined but never used.","'Box' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["562"],["563"],"'makeStyles' is defined but never used.","React Hook useEffect has a missing dependency: 'recordsAfterSorting'. Either include it or remove the dependency array.",["564"],"'getIn' is defined but never used.","'Divider' is defined but never used.","'CardMedia' is defined but never used.","'Typography' is defined but never used.","'Avatar' is defined but never used.","'LockOutlinedIcon' is defined but never used.",["565"],["566"],["567"],["568"],["569"],["570"],["571"],"no-global-assign","no-unsafe-negation",{"desc":"572","fix":"573"},{"desc":"572","fix":"574"},{"desc":"575","fix":"576"},{"desc":"572","fix":"577"},{"desc":"572","fix":"578"},{"desc":"572","fix":"579"},{"desc":"580","fix":"581"},{"desc":"572","fix":"582"},{"desc":"572","fix":"583"},{"desc":"575","fix":"584"},{"desc":"572","fix":"585"},{"desc":"572","fix":"586"},{"desc":"572","fix":"587"},{"desc":"580","fix":"588"},"Update the dependencies array to be: [authTokens.token]",{"range":"589","text":"590"},{"range":"591","text":"590"},"Update the dependencies array to be: [props.match.params.jobId]",{"range":"592","text":"593"},{"range":"594","text":"590"},{"range":"595","text":"590"},{"range":"596","text":"590"},"Update the dependencies array to be: [orderBy, order, recordsAfterSorting]",{"range":"597","text":"598"},{"range":"599","text":"590"},{"range":"600","text":"590"},{"range":"601","text":"593"},{"range":"602","text":"590"},{"range":"603","text":"590"},{"range":"604","text":"590"},{"range":"605","text":"598"},[6649,6651],"[authTokens.token]",[9381,9383],[2407,2409],"[props.match.params.jobId]",[4063,4065],[15630,15632],[6570,6572],[595,611],"[orderBy, order, recordsAfterSorting]",[6649,6651],[9381,9383],[2407,2409],[4063,4065],[15630,15632],[6570,6572],[595,611]]