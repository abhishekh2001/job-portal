[{"/home/abhishekh/WebstormProjects/job-portal/frontend/src/index.js":"1","/home/abhishekh/WebstormProjects/job-portal/frontend/src/App.js":"2","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/Home.js":"3","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/AppToolBar.js":"4","/home/abhishekh/WebstormProjects/job-portal/frontend/src/context/auth.js":"5","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/Admin.js":"6","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/Profile.js":"7","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/Test.js":"8","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/Register.js":"9","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/RecruiterRegister.js":"10","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/ApplicantRegister.js":"11","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/Login.js":"12","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/PrivateRoute.js":"13","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/MasterAuth.js":"14","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobPostDashboard.js":"15","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobListDashboard.js":"16","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/AcceptedEmployees.js":"17","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/ViewApplications.js":"18","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/JobListDashboard.js":"19","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/Apply.js":"20","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/MyApplications.js":"21","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/listitems.js":"22","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/ApplicantProfile.js":"23","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/RecruiterProfile.js":"24","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/CustomTable.js":"25","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/styles/generalStyles.js":"26","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/RecruiterForm.js":"27","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/LoginForm.js":"28","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/ApplicantForm.js":"29","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/applicationService.js":"30","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/authService.js":"31","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/applicantServices.js":"32","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/typeOfJob.js":"33","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/duration.js":"34","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/jobService.js":"35","/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/recruiterService.js":"36","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/languages.js":"37","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/styles/formStyles.js":"38","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobEditPopup.js":"39","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobCard.js":"40","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/JobEditForm.js":"41","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/JobPostForm.js":"42"},{"size":197,"mtime":1611416350197,"results":"43","hashOfConfig":"44"},{"size":4295,"mtime":1611416350193,"results":"45","hashOfConfig":"44"},{"size":418,"mtime":1611416350193,"results":"46","hashOfConfig":"44"},{"size":5304,"mtime":1611416350193,"results":"47","hashOfConfig":"44"},{"size":159,"mtime":1611416350197,"results":"48","hashOfConfig":"44"},{"size":3202,"mtime":1611416350193,"results":"49","hashOfConfig":"44"},{"size":554,"mtime":1611416350193,"results":"50","hashOfConfig":"44"},{"size":7865,"mtime":1611416350193,"results":"51","hashOfConfig":"44"},{"size":2429,"mtime":1611416350193,"results":"52","hashOfConfig":"44"},{"size":264,"mtime":1611416350193,"results":"53","hashOfConfig":"44"},{"size":234,"mtime":1611416350193,"results":"54","hashOfConfig":"44"},{"size":167,"mtime":1611416350193,"results":"55","hashOfConfig":"44"},{"size":608,"mtime":1611416350193,"results":"56","hashOfConfig":"44"},{"size":1433,"mtime":1611416350193,"results":"57","hashOfConfig":"44"},{"size":885,"mtime":1611416350197,"results":"58","hashOfConfig":"44"},{"size":2139,"mtime":1611416350197,"results":"59","hashOfConfig":"44"},{"size":8340,"mtime":1611416350197,"results":"60","hashOfConfig":"44"},{"size":11641,"mtime":1611416350197,"results":"61","hashOfConfig":"44"},{"size":13673,"mtime":1611416350193,"results":"62","hashOfConfig":"44"},{"size":3156,"mtime":1611416350193,"results":"63","hashOfConfig":"44"},{"size":7787,"mtime":1611416350193,"results":"64","hashOfConfig":"44"},{"size":3349,"mtime":1611416350193,"results":"65","hashOfConfig":"44"},{"size":16604,"mtime":1611496378206,"results":"66","hashOfConfig":"44"},{"size":7520,"mtime":1611416350197,"results":"67","hashOfConfig":"44"},{"size":2863,"mtime":1611416350193,"results":"68","hashOfConfig":"44"},{"size":2275,"mtime":1611416350197,"results":"69","hashOfConfig":"44"},{"size":7298,"mtime":1611416350193,"results":"70","hashOfConfig":"44"},{"size":4406,"mtime":1611416350193,"results":"71","hashOfConfig":"44"},{"size":13799,"mtime":1611496375698,"results":"72","hashOfConfig":"44"},{"size":975,"mtime":1611416350197,"results":"73","hashOfConfig":"44"},{"size":386,"mtime":1611416350197,"results":"74","hashOfConfig":"44"},{"size":1403,"mtime":1611416350197,"results":"75","hashOfConfig":"44"},{"size":76,"mtime":1611416350197,"results":"76","hashOfConfig":"44"},{"size":51,"mtime":1611416350197,"results":"77","hashOfConfig":"44"},{"size":1255,"mtime":1611416350197,"results":"78","hashOfConfig":"44"},{"size":1396,"mtime":1611416350197,"results":"79","hashOfConfig":"44"},{"size":74,"mtime":1611416350197,"results":"80","hashOfConfig":"44"},{"size":657,"mtime":1611416350197,"results":"81","hashOfConfig":"44"},{"size":484,"mtime":1611416350197,"results":"82","hashOfConfig":"44"},{"size":2535,"mtime":1611416350197,"results":"83","hashOfConfig":"44"},{"size":5051,"mtime":1611416350193,"results":"84","hashOfConfig":"44"},{"size":10496,"mtime":1611416350193,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"10m0r1x",{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"88"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"88"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"88"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"88"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"88"},"/home/abhishekh/WebstormProjects/job-portal/frontend/src/index.js",[],["191","192"],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/App.js",["193"],"import {BrowserRouter, Route} from 'react-router-dom'\nimport Home from './components/Home'\nimport Register from './components/routes/auth/Register'\nimport ApplicantRegister from './components/routes/auth/ApplicantRegister'\nimport RecruiterRegister from './components/routes/auth/RecruiterRegister'\nimport Login from './components/routes/auth/Login'\nimport JobPostDashboard from './components/routes/recruiters/JobPostDashboard'\nimport JobListDashboard from './components/routes/recruiters/JobListDashboard'\nimport ApplicantJobListDashboard from './components/routes/applicants/JobListDashboard'\nimport {AuthContext} from './context/auth'\nimport PrivateRoute from './components/routes/auth/PrivateRoute'\nimport {useState} from 'react'\nimport Admin from './components/routes/Admin'\nimport Dashboard from './components/Test'\nimport AppToolBar from './components/AppToolBar'\nimport ApplyToJob from './components/routes/applicants/Apply'\nimport MyApplications from './components/routes/applicants/MyApplications'\nimport ViewApplications from './components/routes/recruiters/ViewApplications'\nimport MasterAuth from './components/routes/auth/MasterAuth'\nimport AcceptedEmployees from './components/routes/recruiters/AcceptedEmployees'\nimport Profile from './components/routes/Profile'\nimport{ init } from 'emailjs-com';\ninit(\"user_skGBjTEDVzaS7r7nQHFoz\");\n\nconst App = () => {\n    const existingTokens = JSON.parse(localStorage.getItem('tokens') || null)\n    const [authTokens, setAuthTokens] = useState(existingTokens)\n\n    const setTokens = (data) => {\n        localStorage.setItem('tokens', JSON.stringify(data))\n        setAuthTokens(data)\n    }\n\n    return (\n        <AuthContext.Provider value={{authTokens, setAuthTokens: setTokens}}>\n            <BrowserRouter>\n            <AppToolBar>\n\n                    <div>\n                        <br/>\n                        <Route exact path='/' component={Home}/>\n                        <Route path='/register' component={MasterAuth}/>\n                        <Route exact path='/newUser' component={MasterAuth}/>\n                        <Route path='/applicantRegister' component={ApplicantRegister}/>\n                        <Route path='/recruiterRegister' component={RecruiterRegister}/>\n                        <Route path='/login' component={Login}/>\n                        <Route path='/profile' component={Profile} />\n\n                        <PrivateRoute path='/jobPostDashboard'\n                                      type='recruiter'\n                                      component={JobPostDashboard}\n                        />\n                        <PrivateRoute path='/jobListDashboard'\n                                      type='recruiter'\n                                      component={JobListDashboard}\n                        />\n                        <PrivateRoute path='/viewApplications/:jobId'\n                                      type='recruiter'\n                                      component={ViewApplications}\n                                      exact\n                        />\n                        <PrivateRoute path='/acceptedEmployees'\n                                      type='recruiter'\n                                      component={AcceptedEmployees}\n                                      exact\n                        />\n\n                        <PrivateRoute path='/browseJobs'\n                                      type='applicant'\n                                      component={ApplicantJobListDashboard}\n                        />\n                        <PrivateRoute path='/apply/:jobId'\n                                      type='applicant'\n                                      component={ApplyToJob}\n                        />\n\n                        <PrivateRoute path='/myApplications'\n                                      type='applicant'\n                                      component={MyApplications}\n                        />\n\n                        <Route path='/dashboard' component={Home}/>\n\n                        <Route path='/admin' component={Admin}/>\n\n\n                        <Route path='/Test' component={Dashboard}/>\n                    </div>\n            </AppToolBar>\n            </BrowserRouter>\n        </AuthContext.Provider>\n    )\n}\n\nexport default App\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/Home.js",["194"],"import React, {useEffect} from 'react'\nimport Button from '@material-ui/core/Button'\nimport useStyles from './styles/generalStyles'\n\nconst Home = () => {\n    const classes = useStyles()\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            <Button variant=\"contained\" color=\"secondary\">\n                Hello World\n            </Button>\n        </div>\n    )\n}\n\nexport default Home\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/AppToolBar.js",["195","196","197","198","199"],"import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport {recruiterListItems, applicantListItems, unLoggedListItems} from './listitems'\nimport {useAuth} from '../context/auth'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerClose: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        overflowX: 'hidden',\n        width: theme.spacing(7) + 1,\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9) + 1,\n        },\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(2),\n    },\n}));\n\nexport default function MiniDrawer(props) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false);\n    const {authTokens} = useAuth();\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    let listItems\n    if (!authTokens)\n        listItems = unLoggedListItems\n    else if (authTokens.type === 'applicant')\n        listItems = applicantListItems\n    else\n        listItems = recruiterListItems\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, {\n                            [classes.hide]: open,\n                        })}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        LinkedOut\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                variant=\"permanent\"\n                className={clsx(classes.drawer, {\n                    [classes.drawerOpen]: open,\n                    [classes.drawerClose]: !open,\n                })}\n                classes={{\n                    paper: clsx({\n                        [classes.drawerOpen]: open,\n                        [classes.drawerClose]: !open,\n                    }),\n                }}\n            >\n                <div className={classes.toolbar}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    {listItems}\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                {props.children}\n            </main>\n        </div>\n    );\n}","/home/abhishekh/WebstormProjects/job-portal/frontend/src/context/auth.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/Admin.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/Profile.js",["200","201"],"import { Route, Redirect } from \"react-router-dom\"\nimport {useAuth} from '../../context/auth'\nimport ApplicantProfile from './applicants/ApplicantProfile'\nimport RecruiterProfile from './recruiters/RecruiterProfile'\n\nconst Profile = () => {\n    const {authTokens} = useAuth()\n\n    let profile = null\n    if (authTokens && authTokens.type === 'applicant')\n        profile = <ApplicantProfile />\n    else if (authTokens)\n        profile = <RecruiterProfile />\n\n    return (\n        <div>\n            {profile}\n        </div>\n    )\n}\n\nexport default Profile","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/Test.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/Register.js",["202","203","204","205","206"],"import RecruiterForm from '../../forms/RecruiterForm'\nimport {useState} from 'react'\nimport {ButtonGroup, Container, CssBaseline, Grid, Link, makeStyles, Typography} from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport 'fontsource-roboto'\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    centerContainer: {\n        alignItems: 'center',\n        direction: 'column',\n        justify: 'center',\n    }\n}))\n\nconst Register = () => {\n    const classes = useStyles()\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <Grid\n                container\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{height: '100vh'}}\n            >\n                <Grid container\n                      spacing={0}\n                      direction=\"column\"\n                      alignItems=\"center\"\n                      justify=\"center\"\n                      style={{background: '#efefef', paddingBottom: '20px'}}\n                >\n                    <Typography component=\"h1\" variant=\"h2\" style={{margin: '10px', color: '#414141'}}>\n                        Register as\n                    </Typography>\n                    <ButtonGroup>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"large\"\n                            href=\"/applicantRegister\"\n                        >\n                            Applicant\n                        </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            size=\"large\"\n                            href=\"/recruiterRegister\"\n                        >\n                            Recruiter\n                        </Button>\n                    </ButtonGroup>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default Register\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/RecruiterRegister.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/ApplicantRegister.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/Login.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/PrivateRoute.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/auth/MasterAuth.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobPostDashboard.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobListDashboard.js",["207","208","209","210","211"],"import recruiterService from '../../../services/recruiterService'\nimport {useAuth} from '../../../context/auth'\nimport {Button, withMobileDialog} from '@material-ui/core'\nimport useStyles from '../../styles/generalStyles'\nimport {useEffect, useState} from 'react'\nimport JobCard from './JobCard'\nimport Grid from '@material-ui/core/Grid'\nimport JobEditPopup from './JobEditPopup'\nimport JobEditForm from '../../forms/JobEditForm'\nimport LoginForm from '../../forms/LoginForm'\nimport jobService from '../../../services/jobService'\n\nconst JobListDashboard = () => {\n    const classes = useStyles()\n    const { authTokens } = useAuth()\n    const [jobs, setJobs] = useState([])\n\n    const getActiveJobs = jobs => {\n        return jobs.filter(j => j.positionStatus === 'free')\n    }\n\n    useEffect(() => {\n        const getRecruiterJobs = async () => {\n            try {\n                const response = await recruiterService.getRecruiterJobs(authTokens.token)\n                console.log('response jobs', response)\n                setJobs(getActiveJobs(response))\n            } catch (err) {\n                console.log('err', err.response)\n            }\n        }\n\n        getRecruiterJobs()\n    }, [authTokens.token])\n\n    const getUpdatedJob = async (id) => {\n        const job = await jobService.getOne(id)\n        const updatedJobs = jobs.map(j => j._id.toString() === id ? job : j)\n        setJobs(getActiveJobs(updatedJobs))\n    }\n\n    const deleteJob = async (id) => {\n        try {\n            await jobService.deleteOne(id, authTokens.token)\n            setJobs(jobs.filter(j => j._id !== id))\n        } catch (err) {\n            console.log('caught err', err)\n        }\n    }\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer} />\n            <Grid container spacing={2}>\n                {jobs.map(job => (\n                    <Grid item xs={12} sm={4} key={job._id}>\n                        <JobCard job={job} deleteJob={() => deleteJob(job._id)} getUpdatedJob={getUpdatedJob} />\n                    </Grid>\n                ))}\n            </Grid>\n        </div>\n    )\n}\n\nexport default JobListDashboard\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/AcceptedEmployees.js",["212","213","214","215"],"import React, {useEffect, useState} from 'react'\nimport recruiterService from '../../../services/recruiterService'\nimport {useAuth} from '../../../context/auth'\nimport CustomTable from '../../CustomTable'\nimport {Alert, Rating} from '@material-ui/lab'\nimport Grid from '@material-ui/core/Grid'\nimport {\n    Button,\n    Dialog,\n    DialogContent, LinearProgress,\n    MenuItem,\n    Paper,\n    TableBody,\n    TableCell,\n    TableRow,\n    Typography\n} from '@material-ui/core'\nimport format from 'date-fns/format'\nimport useStyles from '../../styles/generalStyles'\nimport applicationService from '../../../services/applicationService'\nimport * as yup from 'yup'\nimport {Field, Form, Formik} from 'formik'\nimport {TextField} from 'formik-material-ui'\n\nconst validationSchema = yup.object({\n    value: yup\n        .number('enter rating')\n        .required()\n        .integer('Should be an integer')\n})\n\nconst RatePopup = (props) => {\n    const {title, children, openPopup, setOpenPopup} = props\n\n    return (\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\n            <DialogContent dividers>\n                {children}\n            </DialogContent>\n        </Dialog>\n    )\n}\n\n\nconst App = ({onSubmit}) => (\n    <Formik\n        initialValues={{\n            value: 0\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <Form>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"number\"\n                            label=\"Rating\"\n                            name=\"value\"\n                            select\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        >\n                            {[0, 1, 2, 3, 4, 5].map((option) => (\n                                <MenuItem key={option} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Field>\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                >\n                    Submit\n                </Button>\n            </Form>\n        )}\n    </Formik>\n)\n\nconst CustomRow = ({item, token}) => {\n    const [openPopup, setOpenPopup] = useState(false)\n    const [message, setMessage] = useState(null)\n\n    const setRatings = (appId) => async (values, {setSubmitting}) => {\n        try {\n            const response = await recruiterService.rateApplicant(appId, values, token)\n            console.log('response', response)\n            setOpenPopup(false)\n            window.location.reload()\n        } catch (err) {\n            setMessage(err.response.data.error)\n        }\n    }\n\n    return (\n        <TableRow key={item._id}>\n            <TableCell>{item.appName}</TableCell>\n            <TableCell>\n                {format((new Date(item.dateOfJoining)), 'yyyy-MM-dd\\'T\\'HH:mm')}\n            </TableCell>\n            <TableCell>{item.job.typeOfJob}</TableCell>\n            <TableCell>{item.jobTitle}</TableCell>\n            <TableCell>\n                <Rating\n                    name=\"read-only\"\n                    precision={0.5}\n                    size='small'\n                    value={item.applicantRating}\n                    readOnly/>\n            </TableCell>\n            <TableCell>\n                <div>\n                    <Button variant='outlined'\n                            onClick={() => setOpenPopup(true)}\n                    >\n                        Rate\n                    </Button>\n                    <RatePopup\n                        openPopup={openPopup}\n                        setOpenPopup={setOpenPopup}\n                    >\n                        {message && <Alert severity='error'>{message}</Alert>}\n                        <App onSubmit={setRatings(item.applicant._id)}/>\n                    </RatePopup>\n                </div>\n            </TableCell>\n        </TableRow>\n    )\n}\n\nconst AcceptedEmployees = () => {\n    const classes = useStyles()\n    const {authTokens} = useAuth()\n    const [message, setMessage] = useState(null)\n    const [acceptedApplications, setAcceptedApplications] = useState([])\n    const [filterFn, setFilterFn] = useState({fn: items => items})\n    const headers = [\n        {id: 'appName', name: 'Name', sortable: true},\n        {id: 'dateOfJoining', name: 'Date of Joining', sortable: true},\n        {id: 'type', name: 'Type', sortable: false},\n        {id: 'jobTitle', name: 'Job Title', sortable: true},\n        {id: 'applicantRating', name: 'Rating', sortable: true},\n        {id: 'rating', name: 'Rate', sortable: false}\n    ]\n    const {\n        SortableTable,\n        recordsAfterSorting\n    } = CustomTable(acceptedApplications, headers, filterFn)\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const response = await recruiterService.getAcceptedApplications(authTokens.token)\n                console.log('immediate >', response)\n                for (let ind in response) {\n                    let applicantRating = 0\n                    if (response[ind].applicant.ratings.length > 0) {\n                        console.log('rating in ', response[ind])\n                        applicantRating = response[ind].applicant.ratings\n                            .reduce((cum, cur) => cum + cur.value, 0) / response[ind].applicant.ratings.length\n                    }\n                    response[ind].appName = response[ind].applicant.user.name\n                    response[ind].applicantRating = applicantRating\n                    response[ind].jobTitle = response[ind].job.title\n                }\n                console.log('modified response >', response)\n                setAcceptedApplications(response)\n            } catch (err) {\n                console.log('err', err.response)\n                if (err.response.data.error)\n                    setMessage({\n                        severity: 'error',\n                        content: err.response.data.error\n                    })\n            }\n        })()\n    }, [])\n\n    const setRatings = (appId) => async (values, {setSubmitting}) => {\n        try {\n            const response = await applicationService.rateJob(appId, values, authTokens.token)\n            console.log('response', response)\n            // setOpenPopup(false)\n            window.location.reload()\n        } catch (err) {\n            setMessage(err.response.data.error)\n        }\n    }\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            {message && <Alert severity={message.severity}>{message.content}</Alert>}\n            <Grid container style={{marginBottom: '40px'}}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h3\" component='h5'>\n                        View accepted applications\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Grid>\n                <Paper>\n                    <SortableTable\n                        records={acceptedApplications}\n                        headCells={headers}\n                        filterFn={filterFn}\n                        setData={setAcceptedApplications}\n                    >\n                        <TableBody>\n                            {recordsAfterSorting().map(item => (\n                                <CustomRow\n                                    item={item}\n                                    token={authTokens.token}\n                                    key={item._id}\n                                />\n                            ))}\n                        </TableBody>\n                    </SortableTable>\n                </Paper>\n            </Grid>\n        </div>\n    )\n}\n\nexport default AcceptedEmployees\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/ViewApplications.js",["216"],"import {useAuth} from '../../../context/auth'\nimport React, {useEffect, useState} from 'react'\nimport CustomTable from '../../CustomTable'\nimport useStyles from '../../styles/generalStyles'\nimport jobService from '../../../services/jobService'\nimport emailjs from 'emailjs-com';\n\nimport {\n    Box, ButtonGroup, Chip,\n    Collapse, Divider,\n    makeStyles,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography\n} from '@material-ui/core'\nimport Grid from '@material-ui/core/Grid'\nimport IconButton from '@material-ui/core/IconButton'\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp'\nimport format from 'date-fns/format'\nimport {Alert, Rating} from '@material-ui/lab'\nimport Button from '@material-ui/core/Button'\nimport applicationService from '../../../services/applicationService'\nimport recruiterService from '../../../services/recruiterService'\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n    miniTableHead: {\n        '& > *': {\n            fontWeight: 'bold'\n        }\n    },\n    chip: {\n        margin: '5px',\n    },\n    chipArray: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        listStyle: 'none',\n        margin: 0\n    }\n})\n\n\nconst CustomTableRow = ({item, setMessage, recToken}) => {\n    const [open, setOpen] = useState(false)\n    const classes = useRowStyles()\n    let choice\n    const updateStatus = async (status, email) => {\n        const body = {\n            status\n        }\n        try {\n            const updated = await applicationService.updateApplicationStatus(item._id.toString(), body, recToken)\n            console.log('response', updated)\n            if (email) {\n                const rec = await recruiterService.getRecruiter(recToken)\n                const params = {\n                    applicantEmail: email,\n                    recruiter: rec.user.name\n                }\n                try {\n                    const res = await emailjs.send(\"service_uw11hrq\", \"template_enyvf04\", params)\n                    console.log('email sent >', res)\n                } catch (err) {\n                    console.log('could not send email, err', err)\n                }\n            }\n            window.location.reload()\n        } catch (err) {\n            console.log('err', err.response)\n            if (err.response && err.response.data && err.response.data.error)\n                setMessage({severity: 'error', content: err.response.data.error})\n        }\n    }\n    if (item.status === 'applied') {\n        choice = (\n            <ButtonGroup>\n                <Button color='primary' onClick={() => updateStatus('shortlisted')}>Shortlist</Button>\n                <Button color='secondary' onClick={() => updateStatus('rejected')}>Reject</Button>\n            </ButtonGroup>\n        )\n    } else if (item.status === 'shortlisted') {\n        choice = (\n            <ButtonGroup>\n                <Button color='primary' onClick={() => updateStatus('accepted', item.applicant.user.email)}>Accept</Button>\n                <Button color='secondary' onClick={() => updateStatus('rejected')}>Reject</Button>\n            </ButtonGroup>\n        )\n    } else {\n        choice = (\n            <Button fullWidth disabled>Accepted</Button>\n        )\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.root}>\n                <TableCell>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\n                    </IconButton>\n                </TableCell>\n                <TableCell>{item.appName}</TableCell>\n                <TableCell>{format((new Date(item.dateOfApplication)), 'yyyy-MM-dd\\'T\\'HH:mm')}</TableCell>\n                <TableCell>{item.status}</TableCell>\n                <TableCell><Rating name=\"read-only\" value={item.applicantRating} precision={0.5} readOnly/></TableCell>\n                <TableCell>\n                    {choice}\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{paddingBottom: 0, paddingTop: 0}} colSpan={6}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1}>\n                            <Typography variant=\"h6\" gutterBottom component=\"div\" style={{fontWeight: 'bold'}}>\n                                Education\n                            </Typography>\n                            <Table size=\"small\" aria-label=\"Education\">\n                                <TableHead>\n                                    <TableRow className={classes.miniTableHead}>\n                                        <TableCell>Institute Name</TableCell>\n                                        <TableCell>Start Year</TableCell>\n                                        <TableCell>End Year</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {item.applicant.education.map(ed => (\n                                        <TableRow key={ed._id}>\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {ed.instituteName}\n                                            </TableCell>\n                                            <TableCell>{ed.startYear}</TableCell>\n                                            <TableCell>{ed.endYear}</TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                            <Divider/>\n                            <Grid container style={{marginTop: '30px'}}>\n                                <Grid item xs={2}>\n                                    <Typography variant=\"h6\" gutterBottom component=\"div\" style={{fontWeight: 'bold'}}>\n                                        Skills\n                                    </Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Grid className={classes.chipArray} component='ul'>\n                                        {item.applicant.skills.map((sk, it) => (\n                                            <li key={it}>\n                                                <Chip\n                                                    icon={null}\n                                                    label={sk}\n                                                    className={classes.chip}\n                                                />\n                                            </li>\n                                        ))}\n                                    </Grid>\n                                </Grid>\n                                <Grid container style={{marginTop: '30px'}}>\n                                    <Typography variant=\"h6\" gutterBottom component=\"div\" style={{fontWeight: 'bold'}}>\n                                        Statement of Purpose\n                                    </Typography>\n                                    <Grid item xs={12}\n                                          style={{backgroundColor: '#6C7A89',\n                                              color: 'white',\n                                              padding: '30px',\n                                              whiteSpace: 'pre-wrap'\n                                          }}>\n                                        {item.sop}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    )\n}\n\nconst ViewApplications = (props) => {\n    const classes = useStyles()\n    const {authTokens} = useAuth()\n    const [applications, setApplications] = useState([])\n    const [message, setMessage] = useState(null)\n    const [jobTitle, setJobTitle] = useState('')\n    const [filterFn, setFilterFn] = useState({fn: (items) => items})\n    const {jobId} = props.match.params\n    const headers = [\n        {id: 'bl', name: '', sortable: false},\n        {id: 'appName', name: 'Name', sortable: true},\n        {id: 'dateOfApplication', name: 'Application date', sortable: true},\n        {id: 'state', name: 'State', sortable: false},\n        {id: 'applicantRating', name: 'Rating', sortable: true},\n        {id: 'proceed', name: 'Choose', sortable: false}\n    ]\n    const {\n        SortableTable,\n        recordsAfterSorting\n    } = CustomTable(applications, headers, filterFn)\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const response = await jobService.getApplications(jobId)\n                console.log('immediate', response)\n                for (let ind in response) {\n                    let applicantRating = 0\n                    if (response[ind].applicant.ratings.length > 0) {\n                        console.log('rating in ', response[ind])\n                        applicantRating = response[ind].applicant.ratings\n                            .reduce((cum, cur) => cum + cur.value, 0) / response[ind].applicant.ratings.length\n                    }\n                    response[ind].appName = response[ind].applicant.user.name\n                    response[ind].applicantRating = applicantRating\n                    console.log('name', response[ind].applicant.user.name)\n                }\n                console.log('response modified to ', response)\n                setApplications(response.filter(ap => ap.status !== 'rejected'))\n\n                const job = await jobService.getOne(jobId)\n                setJobTitle(job.title)\n            } catch (err) {\n                console.log('error', err)\n            }\n        })()\n    }, [jobId])\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            {message && <Alert severity={message.severity}>{message.content}</Alert> }\n            <Grid container style={{marginBottom: '40px'}}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h3\" component='h5'>\n                        {jobTitle}\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography variant=\"h4\" component=\"h6\">\n                        View applications\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Grid>\n                <Paper>\n                    <SortableTable\n                        records={applications}\n                        headCells={headers}\n                        filterFn={filterFn}\n                        setData={setApplications}\n                    >\n                        <TableBody>\n                            {recordsAfterSorting().map(item => (\n                                <CustomTableRow\n                                    item={item}\n                                    key={item._id}\n                                    setMessage={setMessage}\n                                    recToken={authTokens.token}\n                                />\n                            ))}\n                        </TableBody>\n                    </SortableTable>\n                </Paper>\n            </Grid>\n        </div>\n    )\n}\n\nexport default ViewApplications\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/JobListDashboard.js",["217","218","219","220","221","222","223","224"],"// Joblistings for the applicants\nimport React, {useState, useEffect} from 'react'\nimport jobService from '../../../services/jobService'\nimport Grid from '@material-ui/core/Grid'\nimport useStyles from '../../styles/generalStyles'\nimport {\n    Button, ButtonGroup,\n    LinearProgress, MenuItem,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography\n} from '@material-ui/core'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport CustomTable from '../../CustomTable'\nimport {Field, Form, Formik} from 'formik'\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport {TextField} from 'formik-material-ui'\nimport {DateTimePicker} from 'formik-material-ui-pickers'\nimport {typeOfJobsArray} from '../../utils/typeOfJob'\nimport {durationArray} from '../../utils/duration'\nimport authService from '../../../services/authService'\nimport applicantServices from '../../../services/applicantServices'\nimport {lightGreen} from '@material-ui/core/colors'\nimport {useAuth} from '../../../context/auth'\nimport {Link} from 'react-router-dom'\nimport format from 'date-fns/format'\nimport Fuse from 'fuse.js'\nimport {Rating} from '@material-ui/lab'\n\nconst FilterForm = ({classes, filter, setFilter, setFilterFn}) => {\n    return (\n        <Formik\n            initialValues={{\n                title: filter.title,\n                typeOfJob: filter.typeOfJob,\n                minSalary: filter.minSalary,\n                maxSalary: filter.maxSalary,\n                duration: filter.duration\n            }}\n            onSubmit={(values, {setSubmitting}) => {\n                setFilterFn({\n                    fn: (items) => {\n                        let returnArr = items\n                        if (values.title !== '') {\n                            const fuse = new Fuse(returnArr, {\n                                keys: ['title']\n                            })\n                            console.log('search', fuse.search(values.title))\n                            returnArr = fuse.search(values.title).map(res => res.item)\n                        }\n                        if (values.typeOfJob !== '')\n                            returnArr = returnArr.filter(item => item.typeOfJob === values.typeOfJob)\n                        if (values.minSalary !== '')\n                            returnArr = returnArr.filter(item => item.salaryPerMonth >= values.minSalary)\n                        if (values.maxSalary !== '')\n                            returnArr = returnArr.filter(item => item.salaryPerMonth < values.maxSalary)\n                        if (values.duration !== '')\n                            returnArr = returnArr.filter(item => item.duration < values.duration)\n                        return returnArr\n                    }\n                })\n\n                setSubmitting(false)\n            }}\n        >\n            {({submitForm, isSubmitting, touched, errors}) => (\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <Form className={classes.form}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <Field\n                                    component={TextField}\n                                    type=\"text\"\n                                    label=\"Title\"\n                                    name=\"title\"\n                                    autoComplete='off'\n                                    variant=\"outlined\"\n                                    fullWidth\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Field\n                                    component={TextField}\n                                    type=\"text\"\n                                    label=\"Type of Job\"\n                                    name=\"typeOfJob\"\n                                    select\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                >\n                                    {typeOfJobsArray.map((option) => (\n                                        <MenuItem key={option} value={option}>\n                                            {option}\n                                        </MenuItem>\n                                    ))}\n                                </Field>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Field\n                                    component={TextField}\n                                    type=\"text\"\n                                    label=\"Duration\"\n                                    name=\"duration\"\n                                    select\n                                    variant=\"outlined\"\n                                    margin=\"normal\"\n                                    fullWidth\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                >\n                                    {durationArray.map((option) => (\n                                        <MenuItem key={option + 1} value={option + 1}>\n                                            {option + 1}\n                                        </MenuItem>\n                                    ))}\n                                </Field>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Field\n                                    component={TextField}\n                                    type=\"number\"\n                                    label=\"Min Salary\"\n                                    name='minSalary'\n                                    autoComplete='off'\n                                    variant=\"outlined\"\n                                    fullWidth\n                                />\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Field\n                                    component={TextField}\n                                    type=\"number\"\n                                    label=\"Max salary\"\n                                    name=\"maxSalary\"\n                                    autoComplete='off'\n                                    variant=\"outlined\"\n                                    fullWidth\n                                />\n                            </Grid>\n                            {isSubmitting && <LinearProgress/>}\n                        </Grid>\n\n                        <ButtonGroup fullWidth style={{marginTop: '30px'}}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                fullWidth\n                                type=\"submit\"\n                                disabled={isSubmitting}\n                                className={classes.submit}\n                            >\n                                Filter\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                fullWidth\n                                type='reset'\n                                disabled={isSubmitting}\n                            >\n                                Reset\n                            </Button>\n                        </ButtonGroup>\n                    </Form>\n                </MuiPickersUtilsProvider>\n            )}\n        </Formik>\n    )\n}\n\nconst ApplicantJobListDashboard = () => {\n    const classes = useStyles()\n    const {authTokens} = useAuth()\n    const [jobs, setJobs] = useState([])\n    const [jobsAppliedTo, setJobsAppliedTo] = useState([])\n    const [filterFn, setFilterFn] = useState({fn: (items) => items})\n    const headers = [\n        {id: 'title', name: 'Title', sortable: false},\n        {id: 'recName', name: 'Rec. Name', sortable: false},\n        {id: 'rating', name: 'Job Rating', sortable: true},\n        {id: 'salaryPerMonth', name: 'Salary', sortable: true},\n        {id: 'duration', name: 'Duration', sortable: true},\n        {id: 'deadline', name: 'Deadline', sortable: false},\n        {id: 'type', name: 'Type', sortable: false},\n        {id: 'apply', name: 'Apply', sortable: false}\n    ]\n    const {\n        SortableTable,\n        recordsAfterSorting\n    } = CustomTable(jobs, headers, filterFn)\n\n    const filter = {\n        title: '',\n        typeOfJob: '',\n        minSalary: '',\n        maxSalary: '',\n        duration: ''\n    }\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('token', authTokens.token)\n                const response = await applicantServices.getJobsAppliedTo(authTokens.token)\n                setJobsAppliedTo(response)\n            } catch (err) {\n                console.log('error while getting jobs applied', err)\n            }\n        })()\n    }, [])\n\n    useEffect(() => {\n        console.log('filterfn', filterFn)\n    }, [filterFn])\n\n    const getActiveJobs = (jobs) => {\n        return jobs.filter(job => new Date(job.deadline) > new Date())\n    }\n\n    useEffect(() => {\n        (async () => {\n            const response = await jobService.getAll()\n            for (let ind in response) {\n                if (response[ind].ratings.length > 0)\n                    response[ind]['rating'] = (response[ind].ratings\n                        .reduce((acc, el) => acc + el.value, 0)) / response[ind].ratings.length\n                else\n                    response[ind]['rating'] = 0\n            }\n            console.log('response', response)\n            setJobs(getActiveJobs(response))\n        })()\n    }, [filterFn])\n\n    useEffect(() => {\n        console.log('jobs', jobs)\n    }, [jobs])\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            <Typography variant=\"h3\" component=\"h5\">\n                Browse Jobs\n            </Typography>\n            <Grid>\n                <Paper style={{padding: '40px', marginBottom: '40px'}}>\n                    <Typography variant=\"h4\" component=\"h5\">\n                        Filter\n                    </Typography>\n                    <FilterForm filter={filter} setFilterFn={setFilterFn} classes={classes}/>\n                </Paper>\n                <Paper>\n                    <SortableTable\n                        records={jobs}\n                        headCells={headers}\n                        filterFn={filterFn}\n                        setData={setJobs}\n                    >\n                        <TableBody>\n                            {recordsAfterSorting().map(item => (\n                                <TableRow key={item._id}>\n                                    <TableCell>{item.title}</TableCell>\n                                    <TableCell>{item.recruiter.user.name}</TableCell>\n                                    <TableCell>\n                                        <Rating name=\"read-only\" precision={0.5} size='small' value={item.rating} readOnly />\n                                    </TableCell>\n                                    <TableCell>{item.salaryPerMonth}</TableCell>\n                                    <TableCell>{item.duration}</TableCell>\n                                    <TableCell>{format((new Date(item.deadline)), 'yyyy-MM-dd\\'T\\'HH:mm')}</TableCell>\n                                    <TableCell>{item.typeOfJob}</TableCell>\n                                    <TableCell>\n                                        {jobsAppliedTo.indexOf(item._id) >= 0 ?\n                                            <Button disabled color='secondary'>Applied</Button>\n                                            :\n                                            (item.applicationStatus === 'full' || item.positionStatus === 'full' ?\n                                                    <Button\n                                                        disabled\n                                                        classes={{ disabled: classes.disabledButton }}\n                                                        variant='contained'\n                                                    >\n                                                        Full\n                                                    </Button>\n                                                    :\n                                                    <Button\n                                                        variant='outlined'\n                                                        color='primary'\n                                                        href={`/apply/${item._id}`}\n                                                    >\n                                                        Apply\n                                                    </Button>\n                                            )\n                                        }\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </SortableTable>\n                </Paper>\n            </Grid>\n        </div>\n    )\n}\n\nexport default ApplicantJobListDashboard\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/Apply.js",["225"],"import * as yup from 'yup'\nimport {Formik, Form, Field} from 'formik'\nimport {\n    Button,\n    LinearProgress,\n    Grid,\n} from '@material-ui/core'\nimport {\n    TextField,\n} from 'formik-material-ui'\n\nimport React, {useEffect, useState} from 'react'\nimport {Alert} from '@material-ui/lab'\nimport useStyles from '../../styles/generalStyles'\nimport applicationService from '../../../services/applicationService'\nimport {useAuth} from '../../../context/auth'\nimport { withRouter } from 'react-router-dom';\n\nconst wordCount = (str) => {\n    return str.split(/\\s+/).length\n}\n\nconst validationSchema = yup.object({\n    sop: yup\n        .string('Enter sop')\n        .required('sop is required')\n        .test('wordcount',\n            'Bio is limited to 250 characters',\n            (v, c) => !v || wordCount(v) <= 250),\n})\n\n\nconst App = ({classes, onSubmit}) => (\n    <Formik\n        initialValues={{\n            sop: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <Form className={classes.form}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            aria-label=\"minimum height\"\n                            multiline\n                            name=\"sop\"\n                            type=\"text\"\n                            label=\"SOP\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={classes.submit}\n                >\n                    Submit\n                </Button>\n            </Form>\n        )}\n    </Formik>\n)\n\nconst ApplyToJob = (props) => {\n    const { authTokens } = useAuth()\n    const [message, setMessage] = useState(null)\n    const classes = useStyles()\n\n    useEffect(() => {\n        console.log('props match', props.match.params.jobId)\n    }, [])\n\n    const postApplication = async (values, {setSubmitting}) => {\n        try {\n            const savedApp = await applicationService.applyToJob(props.match.params.jobId, values, authTokens.token)\n            console.log('save as', savedApp)\n            props.history.push('/browseJobs')\n        } catch (err) {\n            setMessage({error: true, content: err.response.data.error})\n            setSubmitting(false)\n        }\n    }\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            {message && <Alert severity={message.error ? 'error' : 'success'}>{message.content}</Alert>}\n            <App classes={classes} onSubmit={postApplication} />\n        </div>\n    )\n}\n\nexport default withRouter(ApplyToJob)\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/MyApplications.js",["226","227","228"],"import React, {useState, useEffect} from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport useStyles from '../../styles/generalStyles'\nimport {\n    Button, Dialog, DialogContent, DialogTitle, LinearProgress, MenuItem, Paper,\n    TableBody, TableCell, TableRow,\n    Typography\n} from '@material-ui/core'\nimport applicantServices from '../../../services/applicantServices'\nimport {useAuth} from '../../../context/auth'\nimport CustomTable from '../../CustomTable'\nimport format from 'date-fns/format'\nimport {Field, Form, Formik} from 'formik'\nimport {TextField} from 'formik-material-ui'\nimport * as yup from 'yup'\nimport applicationService from '../../../services/applicationService'\nimport {Alert, Rating} from '@material-ui/lab'\nimport {withRouter} from 'react-router-dom'\n\nconst validationSchema = yup.object({\n    value: yup\n        .number('enter rating')\n        .required()\n        .integer('Should be an integer')\n})\n\nconst RatePopup = (props) => {\n    const {title, children, openPopup, setOpenPopup} = props\n\n    return (\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\n            <DialogContent dividers>\n                {children}\n            </DialogContent>\n        </Dialog>\n    )\n}\n\n\nconst App = ({onSubmit}) => (\n    <Formik\n        initialValues={{\n            value: 0\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <Form>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"number\"\n                            label=\"Rating\"\n                            name=\"value\"\n                            select\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        >\n                            {[0, 1, 2, 3, 4, 5].map((option) => (\n                                <MenuItem key={option} value={option}>\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Field>\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                >\n                    Submit\n                </Button>\n            </Form>\n        )}\n    </Formik>\n)\n\nconst MyApplications = (props) => {\n    const classes = useStyles()\n    const {authTokens} = useAuth()\n    const [myApplications, setMyApplications] = useState([])\n    const [message, setMessage] = useState(null)\n    const [openPopup, setOpenPopup] = useState(false)\n    const filterFn = {\n        fn: (items) => items\n    }\n    const headers = [\n        {id: 'title', name: 'Title', sortable: false},\n        {id: 'dateOfJoining', name: 'Joining date', sortable: false},\n        {id: 'salaryPerMonth', name: 'Salary', sortable: false},\n        {id: 'recruiterName', name: 'Recruiter name', sortable: false},\n        {id: 'status', name: 'Status', sortable: false},\n        {id: 'rating', name: 'My Rating', sortable: false}\n    ]\n    const {\n        SortableTable,\n        recordsAfterSorting\n    } = CustomTable(myApplications, headers, filterFn)\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const data = await applicantServices.getApplications(authTokens.token)\n                console.log('myAppls', data)\n                setMyApplications(data)\n            } catch (err) {\n                console.log('err', err)\n                console.log('err.response', err.response)\n            }\n        })()\n    }, [])\n\n\n    const setRatings = (appId) => async (values, {setSubmitting}) => {\n        try {\n            const response = await applicationService.rateJob(appId, values, authTokens.token)\n            console.log('response', response)\n            setOpenPopup(false)\n            window.location.reload()\n        } catch (err) {\n            setMessage(err.response.data.error)\n        }\n    }\n\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer}/>\n            <Typography variant=\"h3\" component=\"h5\" style={{marginBottom: '40px'}}>\n                My Applications\n            </Typography>\n            <Grid container spacing={2}>\n                <Grid component={Paper} xs={12}>\n                    <SortableTable\n                        records={myApplications}\n                        headCells={headers}\n                        filterFn={filterFn}\n                        setData={setMyApplications}\n                    >\n                        <TableBody>\n                            {recordsAfterSorting().map(item => (\n                                <TableRow key={item._id}>\n                                    <TableCell>{item.job.title}</TableCell>\n                                    <TableCell>\n                                        {item.dateOfJoining ?\n                                            format((new Date(item.dateOfJoining)), 'yyyy-MM-dd\\'T\\'HH:mm')\n                                            :\n                                            'Not Applicable'\n                                        }\n                                    </TableCell>\n                                    <TableCell>{item.job.salaryPerMonth}</TableCell>\n                                    <TableCell>{item.job.recruiter.user.name}</TableCell>\n                                    <TableCell>{item.status}</TableCell>\n                                    <TableCell>\n                                        {\n                                            item.status === 'accepted' ?\n                                                item.myRating === -1 ?\n                                                    (<div>\n                                                    <Button variant='outlined'\n                                                            onClick={() => setOpenPopup(true)}\n                                                    >\n                                                        Rate\n                                                    </Button>\n                                                    <RatePopup\n                                                        openPopup={openPopup}\n                                                        setOpenPopup={setOpenPopup}\n                                                    >\n                                                        {message && <Alert severity='error'>{message}</Alert>}\n                                                        <App onSubmit={setRatings(item._id)} />\n                                                    </RatePopup>\n                                                </div>)\n                                                    :\n                                                    (<Rating readOnly size='small' value={item.myRating}/>)\n                                                :\n                                                'Not Applicable'\n                                        }\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </SortableTable>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default withRouter(MyApplications)","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/listitems.js",["229","230"],"import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport {Link} from 'react-router-dom'\nimport Divider from '@material-ui/core/Divider'\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\n\nexport const recruiterListItems = (\n    <div>\n        <ListItem button component={Link} to='/profile'>\n            <ListItemIcon>\n                <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Profile\" />\n        </ListItem>\n        <ListItem button component={Link} to='/jobPostDashboard'>\n            <ListItemIcon>\n                <ShoppingCartIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Create Job\" />\n        </ListItem>\n        <ListItem button component={Link} to='/acceptedEmployees'>\n            <ListItemIcon>\n                <PeopleIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Accepted Emp\" />\n        </ListItem>\n        <ListItem button component={Link} to='/jobListDashboard'>\n            <ListItemIcon>\n                <BarChartIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"View Jobs\" />\n        </ListItem>\n        <Divider />\n        <ListItem button component={Link} to='/admin'>\n            <ListItemIcon>\n                <LayersIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Log out\" />\n        </ListItem>\n    </div>\n)\n\nexport const applicantListItems = (\n    <div>\n        <ListItem button component={Link} to='/profile'>\n            <ListItemIcon>\n                <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Profile\" />\n        </ListItem>\n        <ListItem button component={Link} to='/browseJobs'>\n            <ListItemIcon>\n                <ShoppingCartIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Browse Jobs\" />\n        </ListItem>\n        <ListItem button component={Link} to='/myApplications'>\n            <ListItemIcon>\n                <PeopleIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"My applications\" />\n        </ListItem>\n        <Divider />\n        <ListItem button component={Link} to='/admin'>\n            <ListItemIcon>\n                <LayersIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Log out\" />\n        </ListItem>\n    </div>\n)\n\nexport const unLoggedListItems = (\n    <div>\n        <ListItem button component={Link} to='/register'>\n            <ListItemIcon>\n                <LockOpenIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Register\" />\n        </ListItem>\n        <ListItem button component={Link} to='/login'>\n            <ListItemIcon>\n                <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Log in\" />\n        </ListItem>\n    </div>\n)","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/applicants/ApplicantProfile.js",["231","232","233","234","235","236"],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/RecruiterProfile.js",["237"],"import useStyles from '../../styles/generalStyles'\nimport {useAuth} from '../../../context/auth'\nimport {useEffect, useState} from 'react'\nimport {\n    Button,\n    LinearProgress,\n    makeStyles,\n    Paper,\n} from '@material-ui/core'\nimport Grid from '@material-ui/core/Grid'\nimport {Alert} from '@material-ui/lab'\nimport * as yup from 'yup'\nimport {Field, Form, Formik} from 'formik'\nimport {TextField} from 'formik-material-ui'\nimport recruiterService from '../../../services/recruiterService'\n\nconst formStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        marginBottom: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    modalForm: {\n        width: '100%',\n        marginTop: theme.spacing(0)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}))\n\nconst DisplayProfile = ({applicant}) => {\n\n    return (\n        <Paper>\n            <Grid container spacing={2} style={{padding: '30px', fontSize: '1.6em'}}>\n                <Grid item xs={12}>\n                    <b>Name:</b> {applicant.user.name}\n                </Grid>\n                <Grid item xs={12}>\n                    <b>EmailId:</b> {applicant.user.email}\n                </Grid>\n                <Grid item xs={12}>\n                    <b>Bio</b><br />\n                    <Grid xs={12} style={{backgroundColor: '#746D69', color: 'white', padding: '30px', whiteSpace: 'pre-wrap'}}>\n                        {applicant.bio}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <b>Contact: </b> {applicant.contactNumber}\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nconst validationSchema = yup.object({\n    name: yup\n        .string('Enter your name')\n        .required('Name is required'),\n    bio: yup\n        .string('enter bio')\n        .required('bio required'),\n    contactNumber: yup\n        .string('enter number')\n        .required('contact is required')\n})\n\n\nconst App = ({applicant, setMessage, classes, token}) => {\n    return (\n        <Formik\n            initialValues={{\n                name: applicant.user.name,\n                bio: applicant.bio,\n                contactNumber: applicant.contactNumber\n            }}\n            validationSchema={validationSchema}\n            onSubmit={async (values, {setSubmitting}) => {\n                try {\n                    console.log('values', values, token)\n                    const savedUser = await recruiterService.updateRecruiter(values, token)\n                    setMessage(null)\n                    console.log('savedUser', savedUser)\n                    setSubmitting(false)\n                    window.location.reload()\n                } catch (err) {\n                    console.log('err', err)\n                    setMessage(err.response.data.error)\n                    setSubmitting(false)\n                }\n            }}\n        >\n            {({\n                  values,\n                  isSubmitting,\n                  touched,\n                  errors\n              }) => (\n                <Form className={classes.form}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                label=\"Name\"\n                                name=\"name\"\n                                placeholder=\"Jon Doe\"\n                                autoComplete='off'\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                type=\"text\"\n                                label=\"Bio\"\n                                name=\"bio\"\n                                autoComplete='off'\n                                variant=\"outlined\"\n                                multiline\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                type=\"text\"\n                                label=\"ContactNumber\"\n                                name=\"contactNumber\"\n                                autoComplete='off'\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        {isSubmitting && <LinearProgress/>}\n                    </Grid>\n\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className={classes.submit}\n                    >\n                        Submit\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nconst RecruiterProfile = () => {\n    const classes = useStyles()\n    const formClasses = formStyles()\n    const {authTokens} = useAuth()\n    const [edit, setEdit] = useState(false)\n    const [message, setMessage] = useState(null)\n    const [currRecruiter, setCurrRecruiter] = useState(null)\n\n    useEffect(() => {\n        (async () => {\n            try {\n                console.log('inside')\n                const response = await recruiterService.getRecruiter(authTokens.token)\n                console.log('im response', response)\n                setCurrRecruiter(response)\n            } catch (err) {\n                console.log('err', err.response)\n                if (err.response && err.response.data && err.response.data.error)\n                    setMessage(err.response.data.error)\n                else\n                    setMessage('Something went wrong')\n            }\n        })()\n    }, [])\n\n    return (\n        <div>\n            <div className={classes.appBarSpacer} />\n            {message && <Alert severity='error'>{message}</Alert> }\n            {\n                edit ?\n                    (<Grid container spacing={2}><App applicant={currRecruiter}\n                                                      setMessage={setMessage}\n                                                      classes={formClasses}\n                                                      token={authTokens.token}\n                    /></Grid>)\n                    :\n                    currRecruiter &&\n                    (\n                        <div>\n                            <DisplayProfile\n                                applicant={currRecruiter}\n                                setEdit={setEdit}\n                            />\n                            <Button fullWidth variant='contained' onClick={() => setEdit(true)}>Edit</Button>\n                        </div>\n                    )\n            }\n        </div>\n    )\n}\n\nexport default RecruiterProfile\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/CustomTable.js",["238","239"],"import React, {useEffect, useState} from 'react'\nimport {Table, TableHead, TableRow, TableCell, makeStyles, TableSortLabel} from '@material-ui/core'\n\nexport default function CustomTable(records, headCells, filterFn) {\n    const [order, setOrder] = useState()\n    const [orderBy, setOrderBy] = useState()\n\n    const handleSortRequest = (cellId) => {\n        const isAsc = orderBy === cellId && order === 'asc'\n        setOrder(isAsc ? 'desc' : 'asc')\n        setOrderBy(cellId)\n    }\n\n    useEffect(() => {\n        console.log('calling sort', orderBy, order)\n        recordsAfterSorting()\n    }, [orderBy, order])\n\n\n    function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index])\n        stabilizedThis.sort((a, b) => {\n            const order = comparator(a[0], b[0])\n            // if (order) return order\n            // return a[1] - b[1]\n            return order ? order : a[1] - b[1]\n        })\n        return stabilizedThis.map((el) => el[0])\n    }\n\n    function getComparator(order, orderBy) {\n\n        console.log('here')\n        if (order === 'desc') {\n            return (a, b) => {\n                if (b[orderBy] < a[orderBy])\n                    return -1\n                if (b[orderBy] > a[orderBy])\n                    return 1\n                return 0\n            }\n        } else {\n            return (a, b) => {\n                if (b[orderBy] < a[orderBy])\n                    return 1\n                if (b[orderBy] > a[orderBy])\n                    return -1\n                return 0\n            }\n        }\n    }\n\n    const recordsAfterSorting = () => {\n        console.log('sorted', stableSort(filterFn.fn(records), getComparator(order, orderBy)))\n        return stableSort(filterFn.fn(records), getComparator(order, orderBy))\n    }\n\n    const SortableTable = ({children}) => (\n        <Table>\n            <TableHead>\n                <TableRow>\n                    {headCells.map(headCell => (\n                        <TableCell key={headCell.id}\n                                   sortDirection={orderBy === headCell.id ? order : false}>\n                            {!headCell.sortable ? headCell.name :\n                                <TableSortLabel\n                                    active={orderBy === headCell.id}\n                                    direction={orderBy === headCell.id ? order : 'asc'}\n                                    onClick={() => handleSortRequest(headCell.id)}\n                                >\n                                    {headCell.name}\n                                </TableSortLabel>\n                            }\n                        </TableCell>\n                    ))}\n                </TableRow>\n            </TableHead>\n\n            {children}\n        </Table>\n    )\n\n    return {\n        SortableTable,\n        recordsAfterSorting\n    }\n}\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/styles/generalStyles.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/RecruiterForm.js",["240"],"import * as yup from 'yup'\nimport authService from '../../services/authService'\nimport {Formik, Form, Field} from 'formik'\nimport {\n    Button,\n    LinearProgress,\n    Typography,\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\n} from '@material-ui/core'\nimport {\n    TextField,\n} from 'formik-material-ui'\n\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\nimport {useState} from 'react'\nimport {Alert} from '@material-ui/lab'\nimport useStyles from '../styles/formStyles'\nimport {Redirect} from 'react-router-dom'\n\nconst wordCount = (str) => {\n    return str.split(/\\s+/).length\n}\n\n\nconst validationSchema = yup.object({\n    email: yup\n        .string('Enter your email')\n        .email('Enter a valid email')\n        .required('Email is required'),\n    password: yup\n        .string('Enter your password')\n        .min(8, 'Password should be of minimum 8 characters length')\n        .required('Password is required'),\n    confirmPassword: yup\n        .string('Enter your password')\n        .required('Confirm your password')\n        .oneOf([yup.ref('password')], 'Password does not match'),\n    name: yup\n        .string('Enter your name')\n        .required('Name is required'),\n    bio: yup\n        .string('Enter your bio')\n        .test('wordcount',\n            'Bio is limited to 250 characters',\n            (v, c) => !v || wordCount(v) <= 250),\n    contactNumber: yup\n        .string('Enter your contact number')\n        .required('Contact number is required')\n})\n\n\nconst App = ({setMessage, classes, setRegistered}) => (\n    <Formik\n        initialValues={{\n            email: '',\n            name: '',\n            password: '',\n            confirmPassword: '',\n            bio: '',\n            contactNumber: ''\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (values, {setSubmitting}) => {\n            console.log('Submitting')\n            try {\n                const regBody = {...values, type: 'recruiter'}\n                const savedUser = await authService.register(regBody)\n                setMessage(null)\n                console.log('savedUser', savedUser)\n                setSubmitting(false)\n                setRegistered(true)\n            } catch (err) {\n                console.log('err', err.response.data.error)\n                setMessage(err.response.data.error)\n                setSubmitting(false)\n            }\n        }}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <Form className={classes.form}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            label=\"Name\"\n                            name=\"name\"\n                            placeholder=\"Jon Doe\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            name=\"email\"\n                            type=\"email\"\n                            label=\"Email\"\n                            placeholder=\"jon.doe@example.com\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"password\"\n                            label=\"Password\"\n                            name=\"password\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"password\"\n                            label=\"ConfirmPassword\"\n                            name=\"confirmPassword\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"text\"\n                            label=\"Bio\"\n                            name=\"bio\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            multiline\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"text\"\n                            label=\"ContactNumber\"\n                            name=\"contactNumber\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={classes.submit}\n                >\n                    Submit\n                </Button>\n                <Grid container justify=\"flex-end\">\n                    <Grid item>\n                        <Link href=\"/login\" variant=\"body2\">\n                            Already have an account? Sign in\n                        </Link>\n                        <br/>\n                        <Link href=\"/register\" variant=\"body2\">\n                            Choose type of user\n                        </Link>\n                    </Grid>\n                </Grid>\n            </Form>\n        )}\n    </Formik>\n)\n\n\nconst RecruiterForm = () => {\n    const [registered, setRegistered] = useState(false)\n    const [message, setMessage] = useState(null)\n    const classes = useStyles()\n\n    if (registered) {\n        return <Redirect to=\"/login\" />\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <div className={classes.paper}>\n\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon/>\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign up\n                </Typography>\n\n                {message && <Alert severity=\"error\">{message}</Alert>}\n\n                <App setMessage={setMessage} classes={classes} setRegistered={setRegistered} />\n            </div>\n        </Container>\n    )\n}\n\nexport default RecruiterForm\n\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/LoginForm.js",["241"],"import * as yup from 'yup'\nimport authService from '../../services/authService'\nimport {Formik, Form, Field} from 'formik'\nimport {\n    Button,\n    LinearProgress,\n    Typography,\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\n} from '@material-ui/core'\nimport {\n    TextField,\n} from 'formik-material-ui'\n\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\nimport {useState} from 'react'\nimport {Alert} from '@material-ui/lab'\nimport useStyles from '../styles/formStyles'\nimport {useAuth} from '../../context/auth'\nimport {Redirect} from 'react-router-dom'\n\nconst validationSchema = yup.object({\n    email: yup\n        .string('Enter your email')\n        .email('Enter a valid email')\n        .required('Email is required'),\n    password: yup\n        .string('Enter your password')\n        .required('Password is required')\n})\n\n\nconst App = ({classes, onSubmit}) => (\n    <Formik\n        initialValues={{\n            email: '',\n            password: ''\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <Form className={classes.form}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            name=\"email\"\n                            type=\"email\"\n                            label=\"Email\"\n                            placeholder=\"jon.doe@example.com\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            component={TextField}\n                            type=\"password\"\n                            label=\"Password\"\n                            name=\"password\"\n                            autoComplete='off'\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </Grid>\n                    {isSubmitting && <LinearProgress/>}\n                </Grid>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={classes.submit}\n                >\n                    Submit\n                </Button>\n                <Grid container justify=\"flex-end\">\n                    <Grid item>\n                        <Link href=\"/register\" variant=\"body2\">\n                            Don't have an account? Sign up!\n                        </Link>\n                    </Grid>\n                </Grid>\n            </Form>\n        )}\n    </Formik>\n)\n\n\nconst LoginForm = () => {\n    const [isLoggedIn, setLoggedIn] = useState(false)\n    const [message, setMessage] = useState(null)\n    const classes = useStyles()\n\n    const { setAuthTokens } = useAuth()\n\n    const postLogin = async (values, {setSubmitting}) => {\n        console.log('Submitting')\n        try {\n            const regBody = {...values}\n            const result = await authService.login(regBody)\n            setMessage(null)\n            console.log('result', result)\n            setSubmitting(false)\n            setAuthTokens({token: result.token, type: result.type})\n            setLoggedIn(true)\n        } catch (err) {\n            console.log('err', err.response.data.error)\n            setMessage(err.response.data.error)\n            setSubmitting(false)\n        }\n    }\n\n    if (isLoggedIn) {\n        return <Redirect to=\"/\" />\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <div className={classes.paper}>\n\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon/>\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n\n                {message && <Alert severity=\"error\">{message}</Alert>}\n                <App classes={classes} onSubmit={postLogin}/>\n            </div>\n        </Container>\n    )\n}\n\nexport default LoginForm\n\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/ApplicantForm.js",["242","243","244"],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/applicationService.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/authService.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/applicantServices.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/typeOfJob.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/duration.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/jobService.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/services/recruiterService.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/utils/languages.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/styles/formStyles.js",[],"/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobEditPopup.js",["245"],"import {Dialog, DialogContent, DialogTitle, Divider} from '@material-ui/core'\n\n\nconst JobEditPopup = (props) => {\n    const {title, children, openPopup, setOpenPopup} = props\n\n    return (\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\n            <DialogTitle>\n                {title}\n            </DialogTitle>\n            <DialogContent dividers>\n                {children}\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nexport default JobEditPopup\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/routes/recruiters/JobCard.js",["246"],"import React, {useState} from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport {Link} from 'react-router-dom'\nimport JobEditForm from '../../forms/JobEditForm'\nimport JobEditPopup from './JobEditPopup'\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 340,\n    },\n    media: {\n        height: 'auto',\n    },\n})\n\nconst JobCard = ({job, deleteJob, getUpdatedJob}) => {\n    const classes = useStyles()\n    const [openPopup, setOpenPopup] = useState(false)\n\n    return (\n        <Card className={classes.root}>\n            <CardActionArea>\n                <Link to={`/viewApplications/${job._id}`} style={{textDecoration: 'none', color: 'inherit'}}>\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {job.title}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            Date of posting: {job.dateOfPosting} <br/>\n                            Number of applicants: {job.currApplicants}<br/>\n                            Positions left: {job.maxPositions - job.currPositions}\n                            {console.log('positions left ', job.maxPositions, job.currPositions)}\n                        </Typography>\n                    </CardContent>\n                </Link>\n            </CardActionArea>\n            <CardActions>\n                <Button size=\"small\" color=\"primary\" onClick={() => setOpenPopup(true)}>\n                    Edit\n                </Button>\n                <Button size=\"small\" color=\"secondary\" onClick={deleteJob}>\n                    Delete\n                </Button>\n            </CardActions>\n            <JobEditPopup\n                openPopup={openPopup}\n                setOpenPopup={setOpenPopup}\n                title={job.title}\n            >\n                <JobEditForm\n                    job={job}\n                    handleOnUpdate={() => getUpdatedJob(job._id.toString())}\n                    setOpenPopup={setOpenPopup}\n                />\n            </JobEditPopup>\n        </Card>\n    )\n}\n\nexport default JobCard\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/JobEditForm.js",["247","248","249","250","251"],"import * as yup from 'yup'\nimport {Formik, Form, Field} from 'formik'\nimport {\n    Button,\n    LinearProgress,\n    Typography,\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\n} from '@material-ui/core'\nimport {\n    TextField,\n} from 'formik-material-ui'\nimport {useState} from 'react'\nimport {Alert} from '@material-ui/lab'\nimport useStyles from '../styles/formStyles'\nimport {useAuth} from '../../context/auth'\nimport {Redirect} from 'react-router-dom'\nimport jobService from '../../services/jobService'\nimport {DateTimePicker} from 'formik-material-ui-pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers'\n\nconst validationSchema = yup.object({\n    maxApplications: yup\n        .number('enter number')\n        .min(0, 'entry not valid')\n        .integer(),\n    maxPositions: yup\n        .number('enter number')\n        .min(0, 'entry not valid')\n        .integer()\n})\n\n\nconst App = ({classes, onSubmit, job}) => (\n    <Formik\n        initialValues={{\n            maxApplications: job.maxApplications,\n            maxPositions: job.maxPositions,\n            deadline: job.deadline\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Form className={classes.modalForm}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                name=\"maxApplications\"\n                                type=\"number\"\n                                label=\"Max number of applicants\"\n                                autoComplete='off'\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                type=\"number\"\n                                label=\"Max number of positions\"\n                                name=\"maxPositions\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={DateTimePicker}\n                                label=\"Deadline\"\n                                name=\"deadline\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        {isSubmitting && <LinearProgress/>}\n                    </Grid>\n\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className={classes.submit}\n                    >\n                        Submit\n                    </Button>\n                </Form>\n            </MuiPickersUtilsProvider>\n        )}\n    </Formik>\n)\n\n\nconst JobEditForm = ({job, handleOnUpdate, jobs, setOpenPopup}) => {\n    const [message, setMessage] = useState(null)\n    const [error, setError] = useState(true)\n    const classes = useStyles()\n\n    console.log('job', job.maxPositions)\n\n    const {authTokens} = useAuth()\n\n\n    const updateJob = async (values, {setSubmitting}) => {\n        try {\n            const body = {...values}\n            const result = await jobService.updateOne(job._id, body, authTokens.token)\n            setMessage(null)\n            console.log('result', result)\n\n            setError(false)\n            setMessage('Updated')\n            await new Promise((resolve)=>setTimeout(() => {\n                resolve()\n            }, 1000))\n            setSubmitting(false)\n            handleOnUpdate()\n            setOpenPopup(false)\n        } catch (err) {\n            console.log('err', err.response)\n            if (err.response.data.error) {\n                console.log('err', err.response.data.error)\n                setMessage(err.response.data.error)\n            }\n            setSubmitting(false)\n        }\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <Grid>\n                {message &&\n                    <Alert\n                        style={{marginBottom: '15px'}}\n                        severity={error ? \"error\" : \"success\"}\n                    >{message}</Alert>}\n                <App job={job} classes={classes} onSubmit={updateJob}/>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default JobEditForm\n","/home/abhishekh/WebstormProjects/job-portal/frontend/src/components/forms/JobPostForm.js",["252","253","254","255","256","257"],"import * as yup from 'yup'\nimport authService from '../../services/authService'\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport {Formik, Form, Field} from 'formik'\nimport {\n    Button,\n    LinearProgress,\n    Typography,\n    makeStyles,\n    Container,\n    CssBaseline,\n    Avatar,\n    Grid,\n    Link,\n    MenuItem,\n} from '@material-ui/core'\nimport {\n    TextField\n} from 'formik-material-ui'\nimport {\n    DateTimePicker\n} from 'formik-material-ui-pickers'\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\nimport {useState} from 'react'\nimport {Alert} from '@material-ui/lab'\nimport useStyles from '../styles/formStyles'\nimport {\n    Autocomplete,\n    AutocompleteRenderInputParams\n} from 'formik-material-ui-lab'\nimport MuiTextField from '@material-ui/core/TextField'\nimport {languages} from '../utils/languages'\nimport {typeOfJobsArray} from '../utils/typeOfJob'\nimport {durationArray} from '../utils/duration'\nimport jobService from '../../services/jobService'\nimport {useAuth} from '../../context/auth'\nimport {Redirect} from 'react-router-dom'\n\nconst validationSchema = yup.object({\n    title: yup\n        .string('Enter the title')\n        .required('Title is required'),\n    maxApplications: yup\n        .number('Enter max Applications')\n        .integer('Enter a valid integer')\n        .min(0, 'Enter a valid number')\n        .required('Max number of applicants is required'),\n    maxPositions: yup\n        .number('Enter max positions')\n        .integer('Enter a valid integer')\n        .min(0, 'Enter a valid number')\n        .required('Max positions available is required'),\n    deadline: yup\n        .date('Enter the deadline')\n        .min(new Date(), 'Select a deadline after now')  // TODO: Check\n        .required('Deadline is required'),\n    typeOfJob: yup\n        .string('Select type of job')\n        .oneOf(typeOfJobsArray, 'Selection is not valid')\n        .required('Select type of job'),\n    duration: yup\n        .number('Choose duration')\n        .integer('Enter a valid integer')\n        .min(0, 'Select valid duration')\n        .max(6, 'Maximum duration is 6 months or zero (indefinite)'),\n    salaryPerMonth: yup\n        .number('Choose a salary')\n        .integer('Enter an integer')\n        .min(0)\n})\n\n\nconst App = ({onSubmit, classes}) => (\n    <Formik\n        initialValues={{\n            title: '',\n            maxApplications: '',\n            maxPositions: '',\n            deadline: new Date(),\n            skillSetsRequired: [],\n            typeOfJob: 'Full-time',\n            duration: '0',\n            salaryPerMonth: ''\n        }}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n    >\n        {({submitForm, isSubmitting, touched, errors}) => (\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Form className={classes.form}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                label=\"Title\"\n                                name=\"title\"\n                                placeholder=\"Job Title\"\n                                autoComplete='off'\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                name=\"maxApplications\"\n                                type=\"number\"\n                                label=\"Max Applicants\"\n                                autoComplete='off'\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                type=\"number\"\n                                label=\"Max Positions\"\n                                name=\"maxPositions\"\n                                autoComplete='off'\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={DateTimePicker}\n                                label=\"Deadline\"\n                                name=\"deadline\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                name=\"skillSetsRequired\"\n                                multiple\n                                freeSolo\n                                component={Autocomplete}\n                                options={languages}\n                                variant=\"outlined\"\n                                fullWidth\n                                renderInput={(params: AutocompleteRenderInputParams) => (\n                                    <MuiTextField\n                                        {...params}\n                                        error={touched['skills'] && !!errors['skills']}\n                                        helperText={touched['skills'] && errors['skills']}\n                                        label=\"Skills\"\n                                        variant=\"outlined\"\n                                        fullWidth\n                                    />\n                                )}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                type=\"text\"\n                                label=\"Type of Job\"\n                                name=\"typeOfJob\"\n                                select\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            >\n                                {typeOfJobsArray.map((option) => (\n                                    <MenuItem key={option} value={option}>\n                                        {option}\n                                    </MenuItem>\n                                ))}\n                            </Field>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Field\n                                component={TextField}\n                                type=\"Number\"\n                                label=\"Duration\"\n                                name=\"duration\"\n                                helperText=\"Between 0 and 6\"\n                                select\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                            >\n                                {durationArray.map((option) => (\n                                    <MenuItem key={option} value={option}>\n                                        {option === 0 ? '(inf) ' + option : option}\n                                    </MenuItem>\n                                ))}\n                            </Field>\n\n                            <Grid item xs={12}>\n                                <Field\n                                    component={TextField}\n                                    type=\"number\"\n                                    label=\"Salary\"\n                                    name=\"salaryPerMonth\"\n                                    autoComplete='off'\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                />\n                            </Grid>\n                        </Grid>\n                        {isSubmitting && <LinearProgress/>}\n                    </Grid>\n\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className={classes.submit}\n                    >\n                        Submit\n                    </Button>\n                </Form>\n            </MuiPickersUtilsProvider>\n        )}\n    </Formik>\n)\n\n\nconst JobPostForm = () => {\n    const [message, setMessage] = useState(null)\n    const [created, setCreated] = useState(false)\n    const classes = useStyles()\n\n    const { authTokens } = useAuth()\n\n    const postJob = async (values, {setSubmitting}) => {\n        console.log('Submitting')\n        try {\n            const jobPostBody = {...values, dateOfPosting: new Date()}\n            console.log('jobPostBody', jobPostBody)\n            const response = await jobService.postOne(jobPostBody, authTokens.token)\n            console.log('response', response)\n            setMessage(null)\n            setSubmitting(false)\n            setCreated(true)\n        } catch (err) {\n            console.log('err', err.response.data.error)\n            setMessage(err.response.data.error)\n            setSubmitting(false)\n        }\n    }\n\n    if (created) {\n        return <Redirect to=\"/dashboard\" />\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"sm\">\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Create a job\n                </Typography>\n\n                {message && <Alert severity=\"error\">{message}</Alert>}\n                <App onSubmit={postJob} classes={classes}/>\n            </div>\n        </Container>\n    )\n}\n\nexport default JobPostForm\n",{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","severity":1,"message":"263","line":3,"column":8,"nodeType":"264","messageId":"265","endLine":3,"endColumn":16},{"ruleId":"262","severity":1,"message":"266","line":1,"column":16,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"262","severity":1,"message":"267","line":15,"column":8,"nodeType":"264","messageId":"265","endLine":15,"endColumn":16},{"ruleId":"262","severity":1,"message":"268","line":16,"column":8,"nodeType":"264","messageId":"265","endLine":16,"endColumn":20},{"ruleId":"262","severity":1,"message":"269","line":17,"column":8,"nodeType":"264","messageId":"265","endLine":17,"endColumn":20},{"ruleId":"262","severity":1,"message":"270","line":18,"column":8,"nodeType":"264","messageId":"265","endLine":18,"endColumn":17},{"ruleId":"262","severity":1,"message":"271","line":19,"column":8,"nodeType":"264","messageId":"265","endLine":19,"endColumn":16},{"ruleId":"262","severity":1,"message":"272","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":15},{"ruleId":"262","severity":1,"message":"273","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"262","severity":1,"message":"274","line":1,"column":8,"nodeType":"264","messageId":"265","endLine":1,"endColumn":21},{"ruleId":"262","severity":1,"message":"275","line":2,"column":9,"nodeType":"264","messageId":"265","endLine":2,"endColumn":17},{"ruleId":"262","severity":1,"message":"276","line":3,"column":33,"nodeType":"264","messageId":"265","endLine":3,"endColumn":44},{"ruleId":"262","severity":1,"message":"277","line":3,"column":52,"nodeType":"264","messageId":"265","endLine":3,"endColumn":56},{"ruleId":"262","severity":1,"message":"278","line":33,"column":11,"nodeType":"264","messageId":"265","endLine":33,"endColumn":18},{"ruleId":"262","severity":1,"message":"279","line":3,"column":9,"nodeType":"264","messageId":"265","endLine":3,"endColumn":15},{"ruleId":"262","severity":1,"message":"280","line":3,"column":17,"nodeType":"264","messageId":"265","endLine":3,"endColumn":33},{"ruleId":"262","severity":1,"message":"281","line":8,"column":8,"nodeType":"264","messageId":"265","endLine":8,"endColumn":20},{"ruleId":"262","severity":1,"message":"282","line":9,"column":8,"nodeType":"264","messageId":"265","endLine":9,"endColumn":19},{"ruleId":"262","severity":1,"message":"283","line":10,"column":8,"nodeType":"264","messageId":"265","endLine":10,"endColumn":17},{"ruleId":"262","severity":1,"message":"284","line":33,"column":12,"nodeType":"264","messageId":"265","endLine":33,"endColumn":17},{"ruleId":"262","severity":1,"message":"285","line":150,"column":22,"nodeType":"264","messageId":"265","endLine":150,"endColumn":33},{"ruleId":"286","severity":1,"message":"287","line":191,"column":8,"nodeType":"288","endLine":191,"endColumn":10,"suggestions":"289"},{"ruleId":"262","severity":1,"message":"290","line":193,"column":11,"nodeType":"264","messageId":"265","endLine":193,"endColumn":21},{"ruleId":"262","severity":1,"message":"285","line":195,"column":22,"nodeType":"264","messageId":"265","endLine":195,"endColumn":33},{"ruleId":"262","severity":1,"message":"291","line":10,"column":5,"nodeType":"264","messageId":"265","endLine":10,"endColumn":10},{"ruleId":"262","severity":1,"message":"292","line":13,"column":5,"nodeType":"264","messageId":"265","endLine":13,"endColumn":14},{"ruleId":"262","severity":1,"message":"293","line":17,"column":8,"nodeType":"264","messageId":"265","endLine":17,"endColumn":15},{"ruleId":"262","severity":1,"message":"294","line":23,"column":9,"nodeType":"264","messageId":"265","endLine":23,"endColumn":23},{"ruleId":"262","severity":1,"message":"295","line":26,"column":8,"nodeType":"264","messageId":"265","endLine":26,"endColumn":19},{"ruleId":"262","severity":1,"message":"296","line":28,"column":9,"nodeType":"264","messageId":"265","endLine":28,"endColumn":19},{"ruleId":"262","severity":1,"message":"277","line":30,"column":9,"nodeType":"264","messageId":"265","endLine":30,"endColumn":13},{"ruleId":"286","severity":1,"message":"287","line":220,"column":8,"nodeType":"288","endLine":220,"endColumn":10,"suggestions":"297"},{"ruleId":"286","severity":1,"message":"298","line":83,"column":8,"nodeType":"288","endLine":83,"endColumn":10,"suggestions":"299"},{"ruleId":"262","severity":1,"message":"300","line":5,"column":36,"nodeType":"264","messageId":"265","endLine":5,"endColumn":47},{"ruleId":"262","severity":1,"message":"284","line":28,"column":12,"nodeType":"264","messageId":"265","endLine":28,"endColumn":17},{"ruleId":"286","severity":1,"message":"287","line":122,"column":8,"nodeType":"288","endLine":122,"endColumn":10,"suggestions":"301"},{"ruleId":"262","severity":1,"message":"302","line":5,"column":8,"nodeType":"264","messageId":"265","endLine":5,"endColumn":21},{"ruleId":"262","severity":1,"message":"303","line":11,"column":8,"nodeType":"264","messageId":"265","endLine":11,"endColumn":22},{"ruleId":"262","severity":1,"message":"304","line":5,"column":5,"nodeType":"264","messageId":"265","endLine":5,"endColumn":8},{"ruleId":"262","severity":1,"message":"277","line":6,"column":27,"nodeType":"264","messageId":"265","endLine":6,"endColumn":31},{"ruleId":"262","severity":1,"message":"295","line":21,"column":8,"nodeType":"264","messageId":"265","endLine":21,"endColumn":19},{"ruleId":"305","severity":1,"message":"306","line":75,"column":43,"nodeType":"307","endLine":75,"endColumn":99},{"ruleId":"305","severity":1,"message":"306","line":190,"column":30,"nodeType":"307","endLine":190,"endColumn":99},{"ruleId":"286","severity":1,"message":"287","line":356,"column":8,"nodeType":"288","endLine":356,"endColumn":10,"suggestions":"308"},{"ruleId":"286","severity":1,"message":"287","line":191,"column":8,"nodeType":"288","endLine":191,"endColumn":10,"suggestions":"309"},{"ruleId":"262","severity":1,"message":"310","line":2,"column":48,"nodeType":"264","messageId":"265","endLine":2,"endColumn":58},{"ruleId":"286","severity":1,"message":"311","line":17,"column":8,"nodeType":"288","endLine":17,"endColumn":24,"suggestions":"312"},{"ruleId":"262","severity":1,"message":"310","line":8,"column":5,"nodeType":"264","messageId":"265","endLine":8,"endColumn":15},{"ruleId":"262","severity":1,"message":"310","line":8,"column":5,"nodeType":"264","messageId":"265","endLine":8,"endColumn":15},{"ruleId":"262","severity":1,"message":"313","line":3,"column":42,"nodeType":"264","messageId":"265","endLine":3,"endColumn":47},{"ruleId":"262","severity":1,"message":"310","line":8,"column":5,"nodeType":"264","messageId":"265","endLine":8,"endColumn":15},{"ruleId":"305","severity":1,"message":"306","line":106,"column":26,"nodeType":"307","endLine":106,"endColumn":49},{"ruleId":"262","severity":1,"message":"314","line":1,"column":45,"nodeType":"264","messageId":"265","endLine":1,"endColumn":52},{"ruleId":"262","severity":1,"message":"315","line":7,"column":8,"nodeType":"264","messageId":"265","endLine":7,"endColumn":17},{"ruleId":"262","severity":1,"message":"316","line":6,"column":5,"nodeType":"264","messageId":"265","endLine":6,"endColumn":15},{"ruleId":"262","severity":1,"message":"310","line":7,"column":5,"nodeType":"264","messageId":"265","endLine":7,"endColumn":15},{"ruleId":"262","severity":1,"message":"317","line":7,"column":41,"nodeType":"264","messageId":"265","endLine":7,"endColumn":47},{"ruleId":"262","severity":1,"message":"277","line":7,"column":55,"nodeType":"264","messageId":"265","endLine":7,"endColumn":59},{"ruleId":"262","severity":1,"message":"273","line":16,"column":9,"nodeType":"264","messageId":"265","endLine":16,"endColumn":17},{"ruleId":"262","severity":1,"message":"295","line":2,"column":8,"nodeType":"264","messageId":"265","endLine":2,"endColumn":19},{"ruleId":"262","severity":1,"message":"310","line":10,"column":5,"nodeType":"264","messageId":"265","endLine":10,"endColumn":15},{"ruleId":"262","severity":1,"message":"276","line":12,"column":5,"nodeType":"264","messageId":"265","endLine":12,"endColumn":16},{"ruleId":"262","severity":1,"message":"317","line":13,"column":5,"nodeType":"264","messageId":"265","endLine":13,"endColumn":11},{"ruleId":"262","severity":1,"message":"277","line":15,"column":5,"nodeType":"264","messageId":"265","endLine":15,"endColumn":9},{"ruleId":"262","severity":1,"message":"318","line":24,"column":8,"nodeType":"264","messageId":"265","endLine":24,"endColumn":24},"no-native-reassign",["319"],"no-negated-in-lhs",["320"],"no-unused-vars","'Register' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'RecruiterForm' is defined but never used.","'useState' is defined but never used.","'CssBaseline' is defined but never used.","'Link' is defined but never used.","'classes' is assigned a value but never used.","'Button' is defined but never used.","'withMobileDialog' is defined but never used.","'JobEditPopup' is defined but never used.","'JobEditForm' is defined but never used.","'LoginForm' is defined but never used.","'title' is assigned a value but never used.","'setFilterFn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authTokens.token'. Either include it or remove the dependency array.","ArrayExpression",["321"],"'setRatings' is assigned a value but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'Toolbar' is defined but never used.","'DateTimePicker' is defined but never used.","'authService' is defined but never used.","'lightGreen' is defined but never used.",["322"],"React Hook useEffect has a missing dependency: 'props.match.params.jobId'. Either include it or remove the dependency array.",["323"],"'DialogTitle' is defined but never used.",["324"],"'ListSubheader' is defined but never used.","'AssignmentIcon' is defined but never used.","'Box' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["325"],["326"],"'makeStyles' is defined but never used.","React Hook useEffect has a missing dependency: 'recordsAfterSorting'. Either include it or remove the dependency array.",["327"],"'getIn' is defined but never used.","'Divider' is defined but never used.","'CardMedia' is defined but never used.","'Typography' is defined but never used.","'Avatar' is defined but never used.","'LockOutlinedIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"328","fix":"329"},{"desc":"328","fix":"330"},{"desc":"331","fix":"332"},{"desc":"328","fix":"333"},{"desc":"328","fix":"334"},{"desc":"328","fix":"335"},{"desc":"336","fix":"337"},"Update the dependencies array to be: [authTokens.token]",{"range":"338","text":"339"},{"range":"340","text":"339"},"Update the dependencies array to be: [props.match.params.jobId]",{"range":"341","text":"342"},{"range":"343","text":"339"},{"range":"344","text":"339"},{"range":"345","text":"339"},"Update the dependencies array to be: [orderBy, order, recordsAfterSorting]",{"range":"346","text":"347"},[6649,6651],"[authTokens.token]",[9381,9383],[2407,2409],"[props.match.params.jobId]",[4063,4065],[15630,15632],[6459,6461],[595,611],"[orderBy, order, recordsAfterSorting]"]