[{"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\index.js":"1","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\App.js":"2","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Home.js":"3","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\authService.js":"4","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Register.js":"5","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\RecruiterForm.js":"6","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\ApplicantRegister.js":"7","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\ApplicantForm.js":"8","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\RecruiterRegister.js":"9","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\formStyles.js":"10","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Login.js":"11","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\LoginForm.js":"12","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobPostDashboard.js":"13","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\listitems.js":"14","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobPostForm.js":"15","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\typeOfJob.js":"16","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\languages.js":"17","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\duration.js":"18"},{"size":197,"mtime":1610642890982,"results":"19","hashOfConfig":"20"},{"size":1019,"mtime":1610715825460,"results":"21","hashOfConfig":"20"},{"size":345,"mtime":1610562589210,"results":"22","hashOfConfig":"20"},{"size":406,"mtime":1610725898989,"results":"23","hashOfConfig":"20"},{"size":2507,"mtime":1610644158164,"results":"24","hashOfConfig":"20"},{"size":7256,"mtime":1610651591481,"results":"25","hashOfConfig":"20"},{"size":245,"mtime":1610652752887,"results":"26","hashOfConfig":"20"},{"size":11706,"mtime":1610720121374,"results":"27","hashOfConfig":"20"},{"size":245,"mtime":1610652820385,"results":"28","hashOfConfig":"20"},{"size":557,"mtime":1610651570067,"results":"29","hashOfConfig":"20"},{"size":178,"mtime":1610652454127,"results":"30","hashOfConfig":"20"},{"size":4254,"mtime":1610726057107,"results":"31","hashOfConfig":"20"},{"size":5885,"mtime":1610721650988,"results":"32","hashOfConfig":"20"},{"size":2323,"mtime":1610715488804,"results":"33","hashOfConfig":"20"},{"size":9458,"mtime":1610724742485,"results":"34","hashOfConfig":"20"},{"size":77,"mtime":1610720586883,"results":"35","hashOfConfig":"20"},{"size":76,"mtime":1610720139199,"results":"36","hashOfConfig":"20"},{"size":52,"mtime":1610724683568,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1sr1n7j",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\index.js",[],["80","81"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\App.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Home.js",["82","83"],"import {useEffect} from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport authService from '../services/authService'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"secondary\">\r\n                Hello World\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\authService.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Register.js",["84","85","86","87","88"],"import RecruiterForm from '../../forms/RecruiterForm'\r\nimport {useState} from 'react'\r\nimport {ButtonGroup, Container, CssBaseline, Grid, Link, makeStyles, Typography} from '@material-ui/core'\r\nimport Button from '@material-ui/core/Button'\r\nimport 'fontsource-roboto'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    centerContainer: {\r\n        alignItems: 'center',\r\n        direction: 'column',\r\n        justify: 'center',\r\n    }\r\n}))\r\n\r\nconst Register = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                style={{height: '100vh'}}\r\n            >\r\n                <Grid container\r\n                      spacing={0}\r\n                      direction=\"column\"\r\n                      alignItems=\"center\"\r\n                      justify=\"center\"\r\n                      style={{background: '#efefef', paddingBottom: '20px'}}\r\n                >\r\n                    <Typography component=\"h1\" variant=\"h2\" style={{margin: '10px', color: '#414141'}}>\r\n                        Register as\r\n                    </Typography>\r\n                    <ButtonGroup>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"large\"\r\n                            href=\"/applicantRegister\"\r\n                        >\r\n                            Applicant\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                            href=\"/recruiterRegister\"\r\n                        >\r\n                            Recruiter\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\RecruiterForm.js",["89"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\n\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport {useState} from 'react'\r\nimport {Alert} from '@material-ui/lab'\r\nimport useStyles from '../styles/formStyles'\r\n\r\nconst wordCount = (str) => {\r\n    return str.split(' ')\r\n        .filter(function (n) {\r\n            return n !== ''\r\n        })\r\n        .length\r\n}\r\n\r\n\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: yup\r\n        .string('Enter your password')\r\n        .min(8, 'Password should be of minimum 8 characters length')\r\n        .required('Password is required'),\r\n    confirmPassword: yup\r\n        .string('Enter your password')\r\n        .required('Confirm your password')\r\n        .oneOf([yup.ref('password')], 'Password does not match'),\r\n    name: yup\r\n        .string('Enter your name')\r\n        .required('Name is required'),\r\n    bio: yup\r\n        .string('Enter your bio')\r\n        .test('wordcount',\r\n            'Bio is limited to 250 characters',\r\n            (v, c) => !v || wordCount(v) <= 250),\r\n    contactNumber: yup\r\n        .string('Enter your contact number')\r\n        .required('Contact number is required')\r\n})\r\n\r\n\r\nconst App = ({setMessage, classes}) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            name: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            bio: '',\r\n            contactNumber: ''\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={async (values, {setSubmitting}) => {\r\n            console.log('Submitting')\r\n            try {\r\n                const regBody = {...values, type: 'recruiter'}\r\n                const savedUser = await authService.register(regBody)\r\n                setMessage(null)\r\n                console.log('savedUser', savedUser)\r\n            } catch (err) {\r\n                console.log('err', err.response.data.error)\r\n                setMessage(err.response.data.error)\r\n            }\r\n            setSubmitting(false)\r\n        }}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            placeholder=\"Jon Doe\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            placeholder=\"jon.doe@example.com\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"ConfirmPassword\"\r\n                            name=\"confirmPassword\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"text\"\r\n                            label=\"Bio\"\r\n                            name=\"bio\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"text\"\r\n                            label=\"ContactNumber\"\r\n                            name=\"contactNumber\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                    className={classes.submit}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                    <Grid item>\r\n                        <Link href=\"/login\" variant=\"body2\">\r\n                            Already have an account? Sign in\r\n                        </Link>\r\n                        <br/>\r\n                        <Link href=\"/register\" variant=\"body2\">\r\n                            Choose type of user\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\n\r\nconst RecruiterForm = () => {\r\n    const [message, setMessage] = useState(null)\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign up\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n                <App setMessage={setMessage} classes={classes}/>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default RecruiterForm\r\n\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\ApplicantRegister.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\ApplicantForm.js",["90","91"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {Formik, Form, Field, FieldArray, getIn} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport MuiTextField from '@material-ui/core/TextField';\r\n\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\n\r\nimport {\r\n    Autocomplete,\r\n    AutocompleteRenderInputParams,\r\n} from 'formik-material-ui-lab'\r\nimport {Alert} from '@material-ui/lab'\r\nimport {useState} from 'react'\r\nimport useStyles from '../styles/formStyles'\r\n\r\nconst languages = ['C++', 'C', 'Java', 'Python', 'Javascript']  // TODO: export\r\n\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: yup\r\n        .string('Enter your password')\r\n        .min(8, 'Password should be of minimum 8 characters length')\r\n        .required('Password is required'),\r\n    confirmPassword: yup\r\n        .string('Enter your password')\r\n        .required('Confirm your password')\r\n        .oneOf([yup.ref('password')], 'Password does not match'),\r\n    name: yup\r\n        .string('Enter your name')\r\n        .required('Name is required'),\r\n    education: yup.array().of(\r\n        yup.object().shape({\r\n            instituteName: yup\r\n                .string()\r\n                .required('Institute name is required'),\r\n            startYear: yup\r\n                .number('Must be a number')\r\n                .required('Start year is required')\r\n                .min(1800, 'Invalid year')\r\n                .max(2040, 'Range not supported'),\r\n            endYear: yup\r\n                .number()\r\n                .min(yup.ref('startYear'), 'End year must be after start')\r\n                .max(2040, 'Range not supported')\r\n        })\r\n    )\r\n})\r\n\r\n\r\nconst App = ({setMessage, classes}) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            password: '',\r\n            name: '',\r\n            confirmPassword: '',\r\n            skills: [],\r\n            education: [\r\n                {\r\n                    key: Math.random(),\r\n                    instituteName: '',\r\n                    startYear: '',\r\n                    endYear: ''\r\n                }\r\n            ]\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={async (values, {setSubmitting}) => {\r\n            try {\r\n                const regBody = {...values, type: 'applicant'}\r\n                const savedUser = await authService.register(regBody)\r\n                setMessage(null)\r\n                console.log('savedUser', savedUser)\r\n            } catch (err) {\r\n                console.log('err', err)\r\n                setMessage(err.response.data.error)\r\n            }\r\n            setSubmitting(false)\r\n        }}\r\n    >\r\n        {({\r\n              values,\r\n              isSubmitting,\r\n              touched,\r\n              errors\r\n          }) => (\r\n            <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            placeholder=\"Jon Doe\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            placeholder=\"jon.doe@example.com\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"ConfirmPassword\"\r\n                            name=\"confirmPassword\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            name=\"skills\"\r\n                            multiple\r\n                            freeSolo\r\n                            component={Autocomplete}\r\n                            options={languages}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            renderInput={(params: AutocompleteRenderInputParams) => (\r\n                                <MuiTextField\r\n                                    {...params}\r\n                                    error={touched['skills'] && !!errors['skills']}\r\n                                    helperText={touched['skills'] && errors['skills']}\r\n                                    label=\"Skills\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Education\r\n                        </Typography>\r\n                        <FieldArray name=\"education\">\r\n                            {({push, remove}) => (\r\n                                <div>\r\n                                    {values.education.map((p, index) => {\r\n                                        const instituteName = `education[${index}].instituteName`\r\n                                        const startYear = `education[${index}].startYear`\r\n                                        const endYear = `education[${index}].endYear`\r\n\r\n                                        return (\r\n                                            <div key={p.key}>\r\n                                                <Field\r\n                                                    component={TextField}\r\n                                                    type=\"text\"\r\n                                                    label=\"Institute Name\"\r\n                                                    name={instituteName}\r\n                                                    autoComplete='off'\r\n                                                    variant=\"outlined\"\r\n                                                    fullWidth\r\n                                                />\r\n                                                <Field\r\n                                                    component={TextField}\r\n                                                    type=\"number\"\r\n                                                    label=\"Start Year\"\r\n                                                    name={startYear}\r\n                                                    autoComplete='off'\r\n                                                />\r\n                                                <Field\r\n                                                    component={TextField}\r\n                                                    type=\"number\"\r\n                                                    label=\"End Year\"\r\n                                                    name={endYear}\r\n                                                    autoComplete='off'\r\n                                                />\r\n\r\n                                                <Button\r\n                                                    type=\"button\"\r\n                                                    color=\"secondary\"\r\n                                                    variant=\"outlined\"\r\n                                                    style={{marginTop: '5px'}}\r\n                                                    onClick={() => remove(index)}\r\n                                                >\r\n                                                    x\r\n                                                </Button>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            push({key: Math.random(), instituteName: '', startYear: '', endYear: ''})\r\n                                        }\r\n                                        style={{marginTop: '15px'}}\r\n                                    >\r\n                                        Add Education\r\n                                    </Button>\r\n                                </div>\r\n                            )}\r\n                        </FieldArray>\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                    className={classes.submit}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                    <Grid item>\r\n                        <Link href=\"/login\" variant=\"body2\">\r\n                            Already have an account? Sign in\r\n                        </Link>\r\n                        <br/>\r\n                        <Link href=\"/register\" variant=\"body2\">\r\n                            Choose type of user\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nconst ApplicantForm = () => {\r\n    const [message, setMessage] = useState(null)\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h4\">\r\n                    Sign up\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n                <App setMessage={setMessage} classes={classes}/>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ApplicantForm\r\n\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\RecruiterRegister.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\formStyles.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Login.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\LoginForm.js",["92"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobPostDashboard.js",["93","94","95"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems, secondaryListItems } from '../../listitems'\r\nimport JobPostForm from '../../forms/JobPostForm'\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}))\r\n\r\nexport default function JobPostDashboard() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        Dashboard\r\n                    </Typography>\r\n                    <IconButton color=\"inherit\">\r\n                        <Badge badgeContent={4} color=\"secondary\">\r\n                            <NotificationsIcon />\r\n                        </Badge>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>{mainListItems}</List>\r\n                <Divider />\r\n                <List>{secondaryListItems}</List>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                    <Grid container spacing={3}>\r\n                        {/* TODO: export app + toolbar to component */}\r\n                        {/* FORM */}\r\n\r\n                        <JobPostForm />\r\n\r\n\r\n\r\n                    </Grid>\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\listitems.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobPostForm.js",["96","97","98","99","100"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\typeOfJob.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\languages.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\duration.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":9,"nodeType":"107","messageId":"108","endLine":1,"endColumn":18},{"ruleId":"105","severity":1,"message":"109","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":19},{"ruleId":"105","severity":1,"message":"110","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":21},{"ruleId":"105","severity":1,"message":"111","line":2,"column":9,"nodeType":"107","messageId":"108","endLine":2,"endColumn":17},{"ruleId":"105","severity":1,"message":"112","line":3,"column":33,"nodeType":"107","messageId":"108","endLine":3,"endColumn":44},{"ruleId":"105","severity":1,"message":"113","line":3,"column":52,"nodeType":"107","messageId":"108","endLine":3,"endColumn":56},{"ruleId":"105","severity":1,"message":"114","line":33,"column":11,"nodeType":"107","messageId":"108","endLine":33,"endColumn":18},{"ruleId":"105","severity":1,"message":"115","line":8,"column":5,"nodeType":"107","messageId":"108","endLine":8,"endColumn":15},{"ruleId":"105","severity":1,"message":"116","line":3,"column":42,"nodeType":"107","messageId":"108","endLine":3,"endColumn":47},{"ruleId":"105","severity":1,"message":"115","line":8,"column":5,"nodeType":"107","messageId":"108","endLine":8,"endColumn":15},{"ruleId":"105","severity":1,"message":"115","line":8,"column":5,"nodeType":"107","messageId":"108","endLine":8,"endColumn":15},{"ruleId":"105","severity":1,"message":"117","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":11},{"ruleId":"105","severity":1,"message":"118","line":16,"column":8,"nodeType":"107","messageId":"108","endLine":16,"endColumn":13},{"ruleId":"105","severity":1,"message":"113","line":17,"column":8,"nodeType":"107","messageId":"108","endLine":17,"endColumn":12},{"ruleId":"105","severity":1,"message":"109","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":19},{"ruleId":"105","severity":1,"message":"115","line":10,"column":5,"nodeType":"107","messageId":"108","endLine":10,"endColumn":15},{"ruleId":"105","severity":1,"message":"119","line":13,"column":5,"nodeType":"107","messageId":"108","endLine":13,"endColumn":11},{"ruleId":"105","severity":1,"message":"113","line":15,"column":5,"nodeType":"107","messageId":"108","endLine":15,"endColumn":9},{"ruleId":"105","severity":1,"message":"120","line":24,"column":8,"nodeType":"107","messageId":"108","endLine":24,"endColumn":24},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'authService' is defined but never used.","'RecruiterForm' is defined but never used.","'useState' is defined but never used.","'CssBaseline' is defined but never used.","'Link' is defined but never used.","'classes' is assigned a value but never used.","'makeStyles' is defined but never used.","'getIn' is defined but never used.","'Box' is defined but never used.","'Paper' is defined but never used.","'Avatar' is defined but never used.","'LockOutlinedIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]