[{"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\index.js":"1","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\App.js":"2","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Home.js":"3","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\authService.js":"4","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Register.js":"5","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\RecruiterForm.js":"6","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\ApplicantRegister.js":"7","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\ApplicantForm.js":"8","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\RecruiterRegister.js":"9","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\formStyles.js":"10","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Login.js":"11","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\LoginForm.js":"12","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobPostDashboard.js":"13","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\listitems.js":"14","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobPostForm.js":"15","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\typeOfJob.js":"16","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\languages.js":"17","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\duration.js":"18","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\context\\auth.js":"19","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\PrivateRoute.js":"20","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\jobService.js":"21","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\Admin.js":"22","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\AppToolBar.js":"23","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Test.js":"24","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\generalStyles.js":"25","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobListDashboard.js":"26","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\recruiterService.js":"27","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobCard.js":"28","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobEditPopup.js":"29","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobEditForm.js":"30","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\JobListDashboard.js":"31","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\CustomTable.js":"32","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\applicantServices.js":"33","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\Apply.js":"34","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\applicationService.js":"35","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\MyApplications.js":"36"},{"size":197,"mtime":1610642890982,"results":"37","hashOfConfig":"38"},{"size":3289,"mtime":1611051199928,"results":"39","hashOfConfig":"38"},{"size":435,"mtime":1610823336951,"results":"40","hashOfConfig":"38"},{"size":406,"mtime":1610725898989,"results":"41","hashOfConfig":"38"},{"size":2507,"mtime":1610644158164,"results":"42","hashOfConfig":"38"},{"size":7595,"mtime":1611056365312,"results":"43","hashOfConfig":"38"},{"size":245,"mtime":1610652752887,"results":"44","hashOfConfig":"38"},{"size":12898,"mtime":1610810492216,"results":"45","hashOfConfig":"38"},{"size":276,"mtime":1610823452238,"results":"46","hashOfConfig":"38"},{"size":685,"mtime":1610872474557,"results":"47","hashOfConfig":"38"},{"size":178,"mtime":1610652454127,"results":"48","hashOfConfig":"38"},{"size":4549,"mtime":1610736503331,"results":"49","hashOfConfig":"38"},{"size":911,"mtime":1610824904725,"results":"50","hashOfConfig":"38"},{"size":2323,"mtime":1610715488804,"results":"51","hashOfConfig":"38"},{"size":10773,"mtime":1610821864293,"results":"52","hashOfConfig":"38"},{"size":77,"mtime":1610720586883,"results":"53","hashOfConfig":"38"},{"size":76,"mtime":1610720139199,"results":"54","hashOfConfig":"38"},{"size":52,"mtime":1610724683568,"results":"55","hashOfConfig":"38"},{"size":165,"mtime":1610731683357,"results":"56","hashOfConfig":"38"},{"size":630,"mtime":1610740606441,"results":"57","hashOfConfig":"38"},{"size":1177,"mtime":1610896915271,"results":"58","hashOfConfig":"38"},{"size":3430,"mtime":1610823151783,"results":"59","hashOfConfig":"38"},{"size":5870,"mtime":1610821798371,"results":"60","hashOfConfig":"38"},{"size":8053,"mtime":1610819495151,"results":"61","hashOfConfig":"38"},{"size":2360,"mtime":1610823282733,"results":"62","hashOfConfig":"38"},{"size":2791,"mtime":1610889631929,"results":"63","hashOfConfig":"38"},{"size":387,"mtime":1610869024763,"results":"64","hashOfConfig":"38"},{"size":1744,"mtime":1610883735179,"results":"65","hashOfConfig":"38"},{"size":503,"mtime":1610872954643,"results":"66","hashOfConfig":"38"},{"size":5083,"mtime":1610875871114,"results":"67","hashOfConfig":"38"},{"size":13934,"mtime":1611062475461,"results":"68","hashOfConfig":"38"},{"size":2739,"mtime":1610985736725,"results":"69","hashOfConfig":"38"},{"size":692,"mtime":1611051268115,"results":"70","hashOfConfig":"38"},{"size":3534,"mtime":1611048716193,"results":"71","hashOfConfig":"38"},{"size":458,"mtime":1611002642734,"results":"72","hashOfConfig":"38"},{"size":3887,"mtime":1611062771776,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1sr1n7j",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\index.js",[],["158","159"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\App.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Home.js",["160"],"import React, {useEffect} from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport useStyles from './styles/generalStyles'\r\n\r\nconst Home = () => {\r\n    const classes = useStyles()\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer}/>\r\n            <Button variant=\"contained\" color=\"secondary\">\r\n                Hello World\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\authService.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Register.js",["161","162","163","164","165"],"import RecruiterForm from '../../forms/RecruiterForm'\r\nimport {useState} from 'react'\r\nimport {ButtonGroup, Container, CssBaseline, Grid, Link, makeStyles, Typography} from '@material-ui/core'\r\nimport Button from '@material-ui/core/Button'\r\nimport 'fontsource-roboto'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    centerContainer: {\r\n        alignItems: 'center',\r\n        direction: 'column',\r\n        justify: 'center',\r\n    }\r\n}))\r\n\r\nconst Register = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                style={{height: '100vh'}}\r\n            >\r\n                <Grid container\r\n                      spacing={0}\r\n                      direction=\"column\"\r\n                      alignItems=\"center\"\r\n                      justify=\"center\"\r\n                      style={{background: '#efefef', paddingBottom: '20px'}}\r\n                >\r\n                    <Typography component=\"h1\" variant=\"h2\" style={{margin: '10px', color: '#414141'}}>\r\n                        Register as\r\n                    </Typography>\r\n                    <ButtonGroup>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"large\"\r\n                            href=\"/applicantRegister\"\r\n                        >\r\n                            Applicant\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                            href=\"/recruiterRegister\"\r\n                        >\r\n                            Recruiter\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Register\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\RecruiterForm.js",["166"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\ApplicantRegister.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\ApplicantForm.js",["167","168"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {Formik, Form, Field, FieldArray, getIn} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport MuiTextField from '@material-ui/core/TextField'\r\n\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\n\r\nimport {\r\n    Autocomplete,\r\n    AutocompleteRenderInputParams,\r\n} from 'formik-material-ui-lab'\r\nimport {Alert} from '@material-ui/lab'\r\nimport {useState} from 'react'\r\nimport useStyles from '../styles/formStyles'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {languages} from '../utils/languages'\r\n\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: yup\r\n        .string('Enter your password')\r\n        .min(8, 'Password should be of minimum 8 characters length')\r\n        .required('Password is required'),\r\n    confirmPassword: yup\r\n        .string('Enter your password')\r\n        .required('Confirm your password')\r\n        .oneOf([yup.ref('password')], 'Password does not match'),\r\n    name: yup\r\n        .string('Enter your name')\r\n        .required('Name is required'),\r\n    education: yup.array().of(\r\n        yup.object().shape({\r\n            instituteName: yup\r\n                .string()\r\n                .required('Institute name is required'),\r\n            startYear: yup\r\n                .number('Must be a number')\r\n                .required('Start year is required')\r\n                .min(1800, 'Invalid year')\r\n                .max(2040, 'Range not supported'),\r\n            endYear: yup\r\n                .number()\r\n                .min(yup.ref('startYear'), 'End year must be after start')\r\n                .max(2040, 'Range not supported')\r\n        })\r\n    )\r\n})\r\n\r\n\r\nconst App = ({setMessage, classes, setRegistered}) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            password: '',\r\n            name: '',\r\n            confirmPassword: '',\r\n            skills: [],\r\n            education: [\r\n                {\r\n                    key: Math.random(),\r\n                    instituteName: '',\r\n                    startYear: '',\r\n                    endYear: ''\r\n                }\r\n            ]\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={async (values, {setSubmitting}) => {\r\n            try {\r\n                const regBody = {...values, type: 'applicant'}\r\n                const savedUser = await authService.register(regBody)\r\n                setMessage(null)\r\n                console.log('savedUser', savedUser)\r\n                setSubmitting(false)\r\n                setRegistered(true)\r\n            } catch (err) {\r\n                console.log('err', err)\r\n                setMessage(err.response.data.error)\r\n                setSubmitting(false)\r\n            }\r\n        }}\r\n    >\r\n        {({\r\n              values,\r\n              isSubmitting,\r\n              touched,\r\n              errors\r\n          }) => (\r\n            <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            placeholder=\"Jon Doe\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            placeholder=\"jon.doe@example.com\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"ConfirmPassword\"\r\n                            name=\"confirmPassword\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            name=\"skills\"\r\n                            multiple\r\n                            freeSolo\r\n                            component={Autocomplete}\r\n                            options={languages}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            renderInput={(params: AutocompleteRenderInputParams) => (\r\n                                <MuiTextField\r\n                                    {...params}\r\n                                    error={touched['skills'] && !!errors['skills']}\r\n                                    helperText={touched['skills'] && errors['skills']}\r\n                                    label=\"Skills\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Education\r\n                        </Typography>\r\n                        <FieldArray name=\"education\">\r\n                            {({push, remove}) => (\r\n                                <Grid>\r\n                                    {values.education.map((p, index) => {\r\n                                        const instituteName = `education[${index}].instituteName`\r\n                                        const startYear = `education[${index}].startYear`\r\n                                        const endYear = `education[${index}].endYear`\r\n\r\n                                        return (\r\n                                            <Grid container spacing={1} key={p.key}>\r\n                                                <Grid item xs={12}>\r\n                                                    <Field\r\n                                                        component={TextField}\r\n                                                        type=\"text\"\r\n                                                        label=\"Institute Name\"\r\n                                                        name={instituteName}\r\n                                                        autoComplete='off'\r\n                                                        variant=\"outlined\"\r\n                                                        required\r\n                                                        fullWidth\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={12} sm={5}>\r\n                                                    <Field\r\n                                                        component={TextField}\r\n                                                        type=\"number\"\r\n                                                        label=\"Start Year\"\r\n                                                        name={startYear}\r\n                                                        autoComplete='off'\r\n                                                        variant=\"outlined\"\r\n                                                        required\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={12} sm={5}>\r\n                                                    <Field\r\n                                                        component={TextField}\r\n                                                        type=\"number\"\r\n                                                        label=\"End Year\"\r\n                                                        name={endYear}\r\n                                                        autoComplete='off'\r\n                                                        variant=\"outlined\"\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={2} sm={2}>\r\n                                                    <Button\r\n                                                        type=\"button\"\r\n                                                        color=\"secondary\"\r\n                                                        variant=\"outlined\"\r\n                                                        onClick={() => remove(index)}\r\n                                                    >\r\n                                                        x\r\n                                                    </Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        )\r\n                                    })}\r\n                                    <Grid item xs={5} style={{marginTop: '20px'}}>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            push({key: Math.random(), instituteName: '', startYear: '', endYear: ''})\r\n                                        }\r\n                                    >\r\n                                        Add Education\r\n                                    </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            )}\r\n                        </FieldArray>\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                    className={classes.submit}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                    <Grid item>\r\n                        <Link href=\"/login\" variant=\"body2\">\r\n                            Already have an account? Sign in\r\n                        </Link>\r\n                        <br/>\r\n                        <Link href=\"/register\" variant=\"body2\">\r\n                            Choose type of user\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nconst ApplicantForm = () => {\r\n    const [message, setMessage] = useState(null)\r\n    const [registered, setRegistered] = useState(false)\r\n    const classes = useStyles()\r\n\r\n    if (registered) {\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h4\">\r\n                    Sign up\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n                <App setMessage={setMessage} classes={classes} setRegistered={setRegistered}/>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ApplicantForm\r\n\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\RecruiterRegister.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\formStyles.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Login.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\LoginForm.js",["169"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\n\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport {useState} from 'react'\r\nimport {Alert} from '@material-ui/lab'\r\nimport useStyles from '../styles/formStyles'\r\nimport {useAuth} from '../../context/auth'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: yup\r\n        .string('Enter your password')\r\n        .required('Password is required')\r\n})\r\n\r\n\r\nconst App = ({classes, onSubmit}) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            password: ''\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            placeholder=\"jon.doe@example.com\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                    className={classes.submit}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                    <Grid item>\r\n                        <Link href=\"/register\" variant=\"body2\">\r\n                            Don't have an account? Sign up!\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\n\r\nconst LoginForm = () => {\r\n    const [isLoggedIn, setLoggedIn] = useState(false)\r\n    const [message, setMessage] = useState(null)\r\n    const classes = useStyles()\r\n\r\n    const { setAuthTokens } = useAuth()\r\n\r\n    const postLogin = async (values, {setSubmitting}) => {\r\n        console.log('Submitting')\r\n        try {\r\n            const regBody = {...values}\r\n            const result = await authService.login(regBody)\r\n            setMessage(null)\r\n            console.log('result', result)\r\n            setSubmitting(false)\r\n            setAuthTokens({token: result.token, type: result.type})\r\n            setLoggedIn(true)\r\n        } catch (err) {\r\n            console.log('err', err.response.data.error)\r\n            setMessage(err.response.data.error)\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper}>\r\n\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n                <App classes={classes} onSubmit={postLogin}/>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobPostDashboard.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\listitems.js",[],["170","171"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobPostForm.js",["172","173","174","175","176","177"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles,\r\n    Container,\r\n    CssBaseline,\r\n    Avatar,\r\n    Grid,\r\n    Link,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\nimport {\r\n    TextField\r\n} from 'formik-material-ui'\r\nimport {\r\n    DateTimePicker\r\n} from 'formik-material-ui-pickers'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport {useState} from 'react'\r\nimport {Alert} from '@material-ui/lab'\r\nimport useStyles from '../styles/formStyles'\r\nimport {\r\n    Autocomplete,\r\n    AutocompleteRenderInputParams\r\n} from 'formik-material-ui-lab'\r\nimport MuiTextField from '@material-ui/core/TextField'\r\nimport {languages} from '../utils/languages'\r\nimport {typeOfJobsArray} from '../utils/typeOfJob'\r\nimport {durationArray} from '../utils/duration'\r\nimport jobService from '../../services/jobService'\r\nimport {useAuth} from '../../context/auth'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nconst validationSchema = yup.object({\r\n    title: yup\r\n        .string('Enter the title')\r\n        .required('Title is required'),\r\n    maxApplications: yup\r\n        .number('Enter max Applications')\r\n        .integer('Enter a valid integer')\r\n        .min(0, 'Enter a valid number')\r\n        .required('Max number of applicants is required'),\r\n    maxPositions: yup\r\n        .number('Enter max positions')\r\n        .integer('Enter a valid integer')\r\n        .min(0, 'Enter a valid number')\r\n        .required('Max positions available is required'),\r\n    deadline: yup\r\n        .date('Enter the deadline')\r\n        .min(new Date(), 'Select a deadline after now')  // TODO: Check\r\n        .required('Deadline is required'),\r\n    typeOfJob: yup\r\n        .string('Select type of job')\r\n        .oneOf(typeOfJobsArray, 'Selection is not valid')\r\n        .required('Select type of job'),\r\n    duration: yup\r\n        .number('Choose duration')\r\n        .integer('Enter a valid integer')\r\n        .min(0, 'Select valid duration')\r\n        .max(6, 'Maximum duration is 6 months or zero (indefinite)'),\r\n    salaryPerMonth: yup\r\n        .number('Choose a salary')\r\n        .integer('Enter an integer')\r\n        .min(0)\r\n})\r\n\r\n\r\nconst App = ({onSubmit, classes}) => (\r\n    <Formik\r\n        initialValues={{\r\n            title: '',\r\n            maxApplications: '',\r\n            maxPositions: '',\r\n            deadline: new Date(),\r\n            skillSetsRequired: [],\r\n            typeOfJob: 'Full-time',\r\n            duration: '0',\r\n            salaryPerMonth: ''\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <Form className={classes.form}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                label=\"Title\"\r\n                                name=\"title\"\r\n                                placeholder=\"Job Title\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                name=\"maxApplications\"\r\n                                type=\"number\"\r\n                                label=\"Max Applicants\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"number\"\r\n                                label=\"Max Positions\"\r\n                                name=\"maxPositions\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={DateTimePicker}\r\n                                label=\"Deadline\"\r\n                                name=\"deadline\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                name=\"skillSetsRequired\"\r\n                                multiple\r\n                                freeSolo\r\n                                component={Autocomplete}\r\n                                options={languages}\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                renderInput={(params: AutocompleteRenderInputParams) => (\r\n                                    <MuiTextField\r\n                                        {...params}\r\n                                        error={touched['skills'] && !!errors['skills']}\r\n                                        helperText={touched['skills'] && errors['skills']}\r\n                                        label=\"Skills\"\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"text\"\r\n                                label=\"Type of Job\"\r\n                                name=\"typeOfJob\"\r\n                                select\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            >\r\n                                {typeOfJobsArray.map((option) => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Field>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"Number\"\r\n                                label=\"Duration\"\r\n                                name=\"duration\"\r\n                                helperText=\"Between 0 and 6\"\r\n                                select\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                            >\r\n                                {durationArray.map((option) => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option === 0 ? '(inf) ' + option : option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Field>\r\n\r\n                            <Grid item xs={12}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"number\"\r\n                                    label=\"Salary\"\r\n                                    name=\"salaryPerMonth\"\r\n                                    autoComplete='off'\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        {isSubmitting && <LinearProgress/>}\r\n                    </Grid>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                        className={classes.submit}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </MuiPickersUtilsProvider>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\n\r\nconst JobPostForm = () => {\r\n    const [message, setMessage] = useState(null)\r\n    const [created, setCreated] = useState(false)\r\n    const classes = useStyles()\r\n\r\n    const { authTokens } = useAuth()\r\n\r\n    const postJob = async (values, {setSubmitting}) => {\r\n        console.log('Submitting')\r\n        try {\r\n            const jobPostBody = {...values, dateOfPosting: new Date()}\r\n            console.log('jobPostBody', jobPostBody)\r\n            const response = await jobService.postOne(jobPostBody, authTokens.token)\r\n            console.log('response', response)\r\n            setMessage(null)\r\n            setSubmitting(false)\r\n            setCreated(true)\r\n        } catch (err) {\r\n            console.log('err', err.response.data.error)\r\n            setMessage(err.response.data.error)\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    if (created) {\r\n        return <Redirect to=\"/dashboard\" />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\">\r\n            <div className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Create a job\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n                <App onSubmit={postJob} classes={classes}/>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default JobPostForm\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\typeOfJob.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\languages.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\utils\\duration.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\context\\auth.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\PrivateRoute.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\jobService.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\Admin.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\AppToolBar.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Test.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\generalStyles.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobListDashboard.js",["178","179","180"],"import recruiterService from '../../../services/recruiterService'\r\nimport {useAuth} from '../../../context/auth'\r\nimport {Button, withMobileDialog} from '@material-ui/core'\r\nimport useStyles from '../../styles/generalStyles'\r\nimport {useEffect, useState} from 'react'\r\nimport JobCard from './JobCard'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport JobEditPopup from './JobEditPopup'\r\nimport JobEditForm from '../../forms/JobEditForm'\r\nimport LoginForm from '../../forms/LoginForm'\r\nimport jobService from '../../../services/jobService'\r\n\r\nconst JobListDashboard = () => {\r\n    const classes = useStyles()\r\n    const { authTokens } = useAuth()\r\n    const [jobs, setJobs] = useState([])\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n\r\n    const getActiveJobs = jobs => {\r\n        return jobs.filter(j => j.positionStatus === 'free')\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getRecruiterJobs = async () => {\r\n            try {\r\n                const response = await recruiterService.getRecruiterJobs(authTokens.token)\r\n                console.log('response jobs', response)\r\n                setJobs(getActiveJobs(response))\r\n            } catch (err) {\r\n                console.log('err', err.response)\r\n            }\r\n        }\r\n\r\n        getRecruiterJobs()\r\n    }, [authTokens.token])\r\n\r\n    const getUpdatedJob = async (id) => {\r\n        const job = await jobService.getOne(id)\r\n        const updatedJobs = jobs.map(j => j._id.toString() === id ? job : j)\r\n        setJobs(getActiveJobs(updatedJobs))\r\n    }\r\n\r\n    const deleteJob = async (id) => {\r\n        try {\r\n            await jobService.deleteOne(id, authTokens.token)\r\n            setJobs(jobs.filter(j => j._id !== id))\r\n        } catch (err) {\r\n            console.log('caught err', err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.appBarSpacer} />\r\n            <Grid container spacing={2}>\r\n                {jobs.map(job => (\r\n                    <Grid item xs={12} sm={4} key={job._id}>\r\n                        <JobCard job={job} setOpenPopup={setOpenPopup} deleteJob={() => deleteJob(job._id)} />\r\n\r\n                        <JobEditPopup\r\n                            openPopup={openPopup}\r\n                            setOpenPopup={setOpenPopup}\r\n                            title={job.title}\r\n                        >\r\n                            <JobEditForm\r\n                                job={job}\r\n                                handleOnUpdate={() => getUpdatedJob(job._id.toString())}\r\n                                setOpenPopup={setOpenPopup}\r\n                            />\r\n                        </JobEditPopup>\r\n\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JobListDashboard\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\recruiterService.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobCard.js",["181"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 340,\r\n    },\r\n    media: {\r\n        height: 'auto',\r\n    },\r\n});\r\n\r\nconst JobCard = ({job, setOpenPopup, deleteJob}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {job.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Date of posting: {job.dateOfPosting} <br />\r\n                        Number of applicants: {job.currApplicants}<br />\r\n                        Positions left: {job.maxPositions - job.currPositions}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\" onClick={() => setOpenPopup(true)}>\r\n                    Edit\r\n                </Button>\r\n                <Button size=\"small\" color=\"secondary\" onClick={deleteJob}>\r\n                    Delete\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default JobCard\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\recruiters\\JobEditPopup.js",["182"],"import {Dialog, DialogContent, DialogTitle, Divider} from '@material-ui/core'\r\n\r\n\r\nconst JobEditPopup = (props) => {\r\n    const {title, children, openPopup, setOpenPopup} = props\r\n\r\n    return (\r\n        <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>\r\n            <DialogTitle>\r\n                {title}\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n                {children}\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default JobEditPopup\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\JobEditForm.js",["183","184","185","186","187"],"import * as yup from 'yup'\r\nimport {Formik, Form, Field} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\nimport {useState} from 'react'\r\nimport {Alert} from '@material-ui/lab'\r\nimport useStyles from '../styles/formStyles'\r\nimport {useAuth} from '../../context/auth'\r\nimport {Redirect} from 'react-router-dom'\r\nimport jobService from '../../services/jobService'\r\nimport {DateTimePicker} from 'formik-material-ui-pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers'\r\n\r\nconst validationSchema = yup.object({\r\n    maxApplications: yup\r\n        .number('enter number')\r\n        .min(0, 'entry not valid')\r\n        .integer(),\r\n    maxPositions: yup\r\n        .number('enter number')\r\n        .min(0, 'entry not valid')\r\n        .integer()\r\n})\r\n\r\n\r\nconst App = ({classes, onSubmit, job}) => (\r\n    <Formik\r\n        initialValues={{\r\n            maxApplications: job.maxApplications,\r\n            maxPositions: job.maxPositions,\r\n            deadline: job.deadline\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n    >\r\n        {({submitForm, isSubmitting, touched, errors}) => (\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <Form className={classes.modalForm}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                name=\"maxApplications\"\r\n                                type=\"number\"\r\n                                label=\"Max number of applicants\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={TextField}\r\n                                type=\"number\"\r\n                                label=\"Max number of positions\"\r\n                                name=\"maxPositions\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field\r\n                                component={DateTimePicker}\r\n                                label=\"Deadline\"\r\n                                name=\"deadline\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                            />\r\n                        </Grid>\r\n                        {isSubmitting && <LinearProgress/>}\r\n                    </Grid>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                        className={classes.submit}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </MuiPickersUtilsProvider>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\n\r\nconst JobEditForm = ({job, handleOnUpdate, jobs, setOpenPopup}) => {\r\n    const [message, setMessage] = useState(null)\r\n    const [error, setError] = useState(true)\r\n    const classes = useStyles()\r\n\r\n    const {authTokens} = useAuth()\r\n\r\n\r\n    const updateJob = async (values, {setSubmitting}) => {\r\n        console.log('Submitting')\r\n        try {\r\n            const body = {...values}\r\n            const result = await jobService.updateOne(job._id, body, authTokens.token)\r\n            setMessage(null)\r\n            console.log('result', result)\r\n\r\n            setError(false)\r\n            setMessage('Updated')\r\n            await new Promise((resolve)=>setTimeout(() => {\r\n                resolve();\r\n            }, 1000))\r\n\r\n            setSubmitting(false)\r\n            handleOnUpdate()\r\n            setOpenPopup(false)\r\n        } catch (err) {\r\n            console.log('err', err.response.data.error)\r\n            setMessage(err.response.data.error)\r\n            setSubmitting(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <Grid>\r\n                {message &&\r\n                    <Alert\r\n                        style={{marginBottom: '15px'}}\r\n                        severity={error ? \"error\" : \"success\"}\r\n                    >{message}</Alert>}\r\n                <App job={job} classes={classes} onSubmit={updateJob}/>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default JobEditForm\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\JobListDashboard.js",["188","189","190","191","192","193","194","195","196"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\CustomTable.js",["197","198"],"import React, {useEffect, useState} from 'react'\r\nimport {Table, TableHead, TableRow, TableCell, makeStyles, TableSortLabel} from '@material-ui/core'\r\n\r\nexport default function CustomTable(records, headCells, filterFn) {\r\n    const [order, setOrder] = useState()\r\n    const [orderBy, setOrderBy] = useState()\r\n\r\n    const handleSortRequest = (cellId) => {\r\n        const isAsc = orderBy === cellId && order === 'asc'\r\n        setOrder(isAsc ? 'desc' : 'asc')\r\n        setOrderBy(cellId)\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('calling sort', orderBy, order)\r\n        recordsAfterSorting()\r\n    }, [orderBy, order])\r\n\r\n\r\n    function stableSort(array, comparator) {\r\n        const stabilizedThis = array.map((el, index) => [el, index])\r\n        stabilizedThis.sort((a, b) => {\r\n            const order = comparator(a[0], b[0])\r\n            if (order !== 0) return order\r\n            return a[1] - b[1]\r\n        })\r\n        return stabilizedThis.map((el) => el[0])\r\n    }\r\n\r\n    function getComparator(order, orderBy) {\r\n        return order === 'desc'\r\n            ? (a, b) => descendingComparator(a, b, orderBy)\r\n            : (a, b) => -descendingComparator(a, b, orderBy)\r\n    }\r\n\r\n    function descendingComparator(a, b, orderBy) {\r\n        if (b[orderBy] < a[orderBy]) {\r\n            return -1\r\n        }\r\n        if (b[orderBy] > a[orderBy]) {\r\n            return 1\r\n        }\r\n        return 0\r\n    }\r\n\r\n    const recordsAfterSorting = () => {\r\n        console.log('sorted', stableSort(filterFn.fn(records), getComparator(order, orderBy)))\r\n        return stableSort(filterFn.fn(records), getComparator(order, orderBy))\r\n    }\r\n\r\n    const SortableTable = ({children}) => (\r\n        <Table>\r\n            <TableHead>\r\n                <TableRow>\r\n                    {headCells.map(headCell => (\r\n                        <TableCell key={headCell.id}\r\n                                   sortDirection={orderBy === headCell.id ? order : false}>\r\n                            {!headCell.sortable ? headCell.name :\r\n                                <TableSortLabel\r\n                                    active={orderBy === headCell.id}\r\n                                    direction={orderBy === headCell.id ? order : 'asc'}\r\n                                    onClick={() => handleSortRequest(headCell.id)}\r\n                                >\r\n                                    {headCell.name}\r\n                                </TableSortLabel>\r\n                            }\r\n                        </TableCell>\r\n                    ))}\r\n                </TableRow>\r\n            </TableHead>\r\n\r\n            {children}\r\n        </Table>\r\n    )\r\n\r\n    return {\r\n        SortableTable,\r\n        recordsAfterSorting\r\n    }\r\n}\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\applicantServices.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\Apply.js",["199","200","201","202","203","204","205","206","207","208"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\applicationService.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\applicants\\MyApplications.js",["209"],{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":1,"column":16,"nodeType":"216","messageId":"217","endLine":1,"endColumn":25},{"ruleId":"214","severity":1,"message":"218","line":1,"column":8,"nodeType":"216","messageId":"217","endLine":1,"endColumn":21},{"ruleId":"214","severity":1,"message":"219","line":2,"column":9,"nodeType":"216","messageId":"217","endLine":2,"endColumn":17},{"ruleId":"214","severity":1,"message":"220","line":3,"column":33,"nodeType":"216","messageId":"217","endLine":3,"endColumn":44},{"ruleId":"214","severity":1,"message":"221","line":3,"column":52,"nodeType":"216","messageId":"217","endLine":3,"endColumn":56},{"ruleId":"214","severity":1,"message":"222","line":33,"column":11,"nodeType":"216","messageId":"217","endLine":33,"endColumn":18},{"ruleId":"214","severity":1,"message":"223","line":8,"column":5,"nodeType":"216","messageId":"217","endLine":8,"endColumn":15},{"ruleId":"214","severity":1,"message":"224","line":3,"column":42,"nodeType":"216","messageId":"217","endLine":3,"endColumn":47},{"ruleId":"214","severity":1,"message":"223","line":8,"column":5,"nodeType":"216","messageId":"217","endLine":8,"endColumn":15},{"ruleId":"214","severity":1,"message":"223","line":8,"column":5,"nodeType":"216","messageId":"217","endLine":8,"endColumn":15},{"ruleId":"210","replacedBy":"225"},{"ruleId":"212","replacedBy":"226"},{"ruleId":"214","severity":1,"message":"227","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":19},{"ruleId":"214","severity":1,"message":"223","line":10,"column":5,"nodeType":"216","messageId":"217","endLine":10,"endColumn":15},{"ruleId":"214","severity":1,"message":"220","line":12,"column":5,"nodeType":"216","messageId":"217","endLine":12,"endColumn":16},{"ruleId":"214","severity":1,"message":"228","line":13,"column":5,"nodeType":"216","messageId":"217","endLine":13,"endColumn":11},{"ruleId":"214","severity":1,"message":"221","line":15,"column":5,"nodeType":"216","messageId":"217","endLine":15,"endColumn":9},{"ruleId":"214","severity":1,"message":"229","line":24,"column":8,"nodeType":"216","messageId":"217","endLine":24,"endColumn":24},{"ruleId":"214","severity":1,"message":"230","line":3,"column":9,"nodeType":"216","messageId":"217","endLine":3,"endColumn":15},{"ruleId":"214","severity":1,"message":"231","line":3,"column":17,"nodeType":"216","messageId":"217","endLine":3,"endColumn":33},{"ruleId":"214","severity":1,"message":"232","line":10,"column":8,"nodeType":"216","messageId":"217","endLine":10,"endColumn":17},{"ruleId":"214","severity":1,"message":"233","line":7,"column":8,"nodeType":"216","messageId":"217","endLine":7,"endColumn":17},{"ruleId":"214","severity":1,"message":"234","line":1,"column":45,"nodeType":"216","messageId":"217","endLine":1,"endColumn":52},{"ruleId":"214","severity":1,"message":"235","line":6,"column":5,"nodeType":"216","messageId":"217","endLine":6,"endColumn":15},{"ruleId":"214","severity":1,"message":"223","line":7,"column":5,"nodeType":"216","messageId":"217","endLine":7,"endColumn":15},{"ruleId":"214","severity":1,"message":"228","line":7,"column":41,"nodeType":"216","messageId":"217","endLine":7,"endColumn":47},{"ruleId":"214","severity":1,"message":"221","line":7,"column":55,"nodeType":"216","messageId":"217","endLine":7,"endColumn":59},{"ruleId":"214","severity":1,"message":"236","line":16,"column":9,"nodeType":"216","messageId":"217","endLine":16,"endColumn":17},{"ruleId":"214","severity":1,"message":"237","line":10,"column":5,"nodeType":"216","messageId":"217","endLine":10,"endColumn":10},{"ruleId":"214","severity":1,"message":"238","line":13,"column":5,"nodeType":"216","messageId":"217","endLine":13,"endColumn":14},{"ruleId":"214","severity":1,"message":"239","line":17,"column":8,"nodeType":"216","messageId":"217","endLine":17,"endColumn":15},{"ruleId":"214","severity":1,"message":"240","line":23,"column":9,"nodeType":"216","messageId":"217","endLine":23,"endColumn":23},{"ruleId":"214","severity":1,"message":"227","line":26,"column":8,"nodeType":"216","messageId":"217","endLine":26,"endColumn":19},{"ruleId":"214","severity":1,"message":"241","line":28,"column":9,"nodeType":"216","messageId":"217","endLine":28,"endColumn":19},{"ruleId":"214","severity":1,"message":"221","line":30,"column":9,"nodeType":"216","messageId":"217","endLine":30,"endColumn":13},{"ruleId":"214","severity":1,"message":"242","line":209,"column":11,"nodeType":"216","messageId":"217","endLine":209,"endColumn":17},{"ruleId":"243","severity":1,"message":"244","line":225,"column":8,"nodeType":"245","endLine":225,"endColumn":10,"suggestions":"246"},{"ruleId":"214","severity":1,"message":"223","line":2,"column":48,"nodeType":"216","messageId":"217","endLine":2,"endColumn":58},{"ruleId":"243","severity":1,"message":"247","line":17,"column":8,"nodeType":"245","endLine":17,"endColumn":24,"suggestions":"248"},{"ruleId":"214","severity":1,"message":"235","line":6,"column":5,"nodeType":"216","messageId":"217","endLine":6,"endColumn":15},{"ruleId":"214","severity":1,"message":"223","line":7,"column":5,"nodeType":"216","messageId":"217","endLine":7,"endColumn":15},{"ruleId":"214","severity":1,"message":"249","line":7,"column":17,"nodeType":"216","messageId":"217","endLine":7,"endColumn":26},{"ruleId":"214","severity":1,"message":"220","line":7,"column":28,"nodeType":"216","messageId":"217","endLine":7,"endColumn":39},{"ruleId":"214","severity":1,"message":"228","line":7,"column":41,"nodeType":"216","messageId":"217","endLine":7,"endColumn":47},{"ruleId":"214","severity":1,"message":"250","line":7,"column":55,"nodeType":"216","messageId":"217","endLine":7,"endColumn":71},{"ruleId":"214","severity":1,"message":"229","line":13,"column":8,"nodeType":"216","messageId":"217","endLine":13,"endColumn":24},{"ruleId":"214","severity":1,"message":"221","line":16,"column":9,"nodeType":"216","messageId":"217","endLine":16,"endColumn":13},{"ruleId":"214","severity":1,"message":"236","line":16,"column":15,"nodeType":"216","messageId":"217","endLine":16,"endColumn":23},{"ruleId":"243","severity":1,"message":"251","line":90,"column":8,"nodeType":"245","endLine":90,"endColumn":10,"suggestions":"252"},{"ruleId":"243","severity":1,"message":"244","line":45,"column":8,"nodeType":"245","endLine":45,"endColumn":10,"suggestions":"253"},"no-native-reassign",["254"],"no-negated-in-lhs",["255"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'RecruiterForm' is defined but never used.","'useState' is defined but never used.","'CssBaseline' is defined but never used.","'Link' is defined but never used.","'classes' is assigned a value but never used.","'makeStyles' is defined but never used.","'getIn' is defined but never used.",["254"],["255"],"'authService' is defined but never used.","'Avatar' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'Button' is defined but never used.","'withMobileDialog' is defined but never used.","'LoginForm' is defined but never used.","'CardMedia' is defined but never used.","'Divider' is defined but never used.","'Typography' is defined but never used.","'Redirect' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'Toolbar' is defined but never used.","'DateTimePicker' is defined but never used.","'lightGreen' is defined but never used.","'styles' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authTokens.token'. Either include it or remove the dependency array.","ArrayExpression",["256"],"React Hook useEffect has a missing dependency: 'recordsAfterSorting'. Either include it or remove the dependency array.",["257"],"'Container' is defined but never used.","'TextareaAutosize' is defined but never used.","React Hook useEffect has a missing dependency: 'props.match.params.jobId'. Either include it or remove the dependency array.",["258"],["259"],"no-global-assign","no-unsafe-negation",{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"260","fix":"266"},"Update the dependencies array to be: [authTokens.token]",{"range":"267","text":"268"},"Update the dependencies array to be: [orderBy, order, recordsAfterSorting]",{"range":"269","text":"270"},"Update the dependencies array to be: [props.match.params.jobId]",{"range":"271","text":"272"},{"range":"273","text":"268"},[9714,9716],"[authTokens.token]",[611,627],"[orderBy, order, recordsAfterSorting]",[2762,2764],"[props.match.params.jobId]",[1625,1627]]