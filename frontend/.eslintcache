[{"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\index.js":"1","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\App.js":"2","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Home.js":"3","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\authService.js":"4","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Register.js":"5","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\RecruiterForm.js":"6","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\ApplicantRegister.js":"7","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\ApplicantForm.js":"8","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\RecruiterRegister.js":"9","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\formStyles.js":"10","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Login.js":"11","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\LoginForm.js":"12"},{"size":197,"mtime":1610642890982,"results":"13","hashOfConfig":"14"},{"size":860,"mtime":1610652471361,"results":"15","hashOfConfig":"14"},{"size":345,"mtime":1610562589210,"results":"16","hashOfConfig":"14"},{"size":369,"mtime":1610652300619,"results":"17","hashOfConfig":"14"},{"size":2507,"mtime":1610644158164,"results":"18","hashOfConfig":"14"},{"size":7256,"mtime":1610651591481,"results":"19","hashOfConfig":"14"},{"size":245,"mtime":1610652752887,"results":"20","hashOfConfig":"14"},{"size":11689,"mtime":1610652026984,"results":"21","hashOfConfig":"14"},{"size":245,"mtime":1610652820385,"results":"22","hashOfConfig":"14"},{"size":557,"mtime":1610651570067,"results":"23","hashOfConfig":"14"},{"size":178,"mtime":1610652454127,"results":"24","hashOfConfig":"14"},{"size":4247,"mtime":1610654133557,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sr1n7j",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\index.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\App.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\Home.js",["53","54"],"import {useEffect} from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport authService from '../services/authService'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"secondary\">\r\n                Hello World\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n",["55","56"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\services\\authService.js",["57"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Register.js",["58","59","60","61","62"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\RecruiterForm.js",["63"],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\ApplicantRegister.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\ApplicantForm.js",["64","65"],"import * as yup from 'yup'\r\nimport authService from '../../services/authService'\r\nimport {Formik, Form, Field, FieldArray, getIn} from 'formik'\r\nimport {\r\n    Button,\r\n    LinearProgress,\r\n    Typography,\r\n    makeStyles, Container, CssBaseline, Avatar, Grid, Link,\r\n} from '@material-ui/core'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport MuiTextField from '@material-ui/core/TextField';\r\n\r\nimport {\r\n    TextField,\r\n} from 'formik-material-ui'\r\n\r\nimport {\r\n    Autocomplete,\r\n    AutocompleteRenderInputParams,\r\n} from 'formik-material-ui-lab'\r\nimport {Alert} from '@material-ui/lab'\r\nimport {useState} from 'react'\r\nimport useStyles from '../styles/formStyles'\r\n\r\nconst languages = ['C++', 'C', 'Java', 'Python', 'Javascript']\r\n\r\nconst validationSchema = yup.object({\r\n    email: yup\r\n        .string('Enter your email')\r\n        .email('Enter a valid email')\r\n        .required('Email is required'),\r\n    password: yup\r\n        .string('Enter your password')\r\n        .min(8, 'Password should be of minimum 8 characters length')\r\n        .required('Password is required'),\r\n    confirmPassword: yup\r\n        .string('Enter your password')\r\n        .required('Confirm your password')\r\n        .oneOf([yup.ref('password')], 'Password does not match'),\r\n    name: yup\r\n        .string('Enter your name')\r\n        .required('Name is required'),\r\n    education: yup.array().of(\r\n        yup.object().shape({\r\n            instituteName: yup\r\n                .string()\r\n                .required('Institute name is required'),\r\n            startYear: yup\r\n                .number('Must be a number')\r\n                .required('Start year is required')\r\n                .min(1800, 'Invalid year')\r\n                .max(2040, 'Range not supported'),\r\n            endYear: yup\r\n                .number()\r\n                .min(yup.ref('startYear'), 'End year must be after start')\r\n                .max(2040, 'Range not supported')\r\n        })\r\n    )\r\n})\r\n\r\n\r\nconst App = ({setMessage, classes}) => (\r\n    <Formik\r\n        initialValues={{\r\n            email: '',\r\n            password: '',\r\n            name: '',\r\n            confirmPassword: '',\r\n            skills: [],\r\n            education: [\r\n                {\r\n                    key: Math.random(),\r\n                    instituteName: '',\r\n                    startYear: '',\r\n                    endYear: ''\r\n                }\r\n            ]\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={async (values, {setSubmitting}) => {\r\n            try {\r\n                const regBody = {...values, type: 'applicant'}\r\n                const savedUser = await authService.register(regBody)\r\n                setMessage(null)\r\n                console.log('savedUser', savedUser)\r\n            } catch (err) {\r\n                console.log('err', err)\r\n                setMessage(err.response.data.error)\r\n            }\r\n            setSubmitting(false)\r\n        }}\r\n    >\r\n        {({\r\n              values,\r\n              isSubmitting,\r\n              touched,\r\n              errors\r\n          }) => (\r\n            <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            label=\"Name\"\r\n                            name=\"name\"\r\n                            placeholder=\"Jon Doe\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            placeholder=\"jon.doe@example.com\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            name=\"password\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            component={TextField}\r\n                            type=\"password\"\r\n                            label=\"ConfirmPassword\"\r\n                            name=\"confirmPassword\"\r\n                            autoComplete='off'\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field\r\n                            name=\"skills\"\r\n                            multiple\r\n                            freeSolo\r\n                            component={Autocomplete}\r\n                            options={languages}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            renderInput={(params: AutocompleteRenderInputParams) => (\r\n                                <MuiTextField\r\n                                    {...params}\r\n                                    error={touched['skills'] && !!errors['skills']}\r\n                                    helperText={touched['skills'] && errors['skills']}\r\n                                    label=\"Skills\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Education\r\n                        </Typography>\r\n                        <FieldArray name=\"education\">\r\n                            {({push, remove}) => (\r\n                                <div>\r\n                                    {values.education.map((p, index) => {\r\n                                        const instituteName = `education[${index}].instituteName`\r\n                                        const startYear = `education[${index}].startYear`\r\n                                        const endYear = `education[${index}].endYear`\r\n\r\n                                        return (\r\n                                            <div key={p.key}>\r\n                                                <Field\r\n                                                    component={TextField}\r\n                                                    type=\"text\"\r\n                                                    label=\"Institute Name\"\r\n                                                    name={instituteName}\r\n                                                    autoComplete='off'\r\n                                                    variant=\"outlined\"\r\n                                                    fullWidth\r\n                                                />\r\n                                                <Field\r\n                                                    component={TextField}\r\n                                                    type=\"number\"\r\n                                                    label=\"Start Year\"\r\n                                                    name={startYear}\r\n                                                    autoComplete='off'\r\n                                                />\r\n                                                <Field\r\n                                                    component={TextField}\r\n                                                    type=\"number\"\r\n                                                    label=\"End Year\"\r\n                                                    name={endYear}\r\n                                                    autoComplete='off'\r\n                                                />\r\n\r\n                                                <Button\r\n                                                    type=\"button\"\r\n                                                    color=\"secondary\"\r\n                                                    variant=\"outlined\"\r\n                                                    style={{marginTop: '5px'}}\r\n                                                    onClick={() => remove(index)}\r\n                                                >\r\n                                                    x\r\n                                                </Button>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        variant=\"outlined\"\r\n                                        onClick={() =>\r\n                                            push({key: Math.random(), instituteName: '', startYear: '', endYear: ''})\r\n                                        }\r\n                                        style={{marginTop: '15px'}}\r\n                                    >\r\n                                        Add Education\r\n                                    </Button>\r\n                                </div>\r\n                            )}\r\n                        </FieldArray>\r\n                    </Grid>\r\n                    {isSubmitting && <LinearProgress/>}\r\n                </Grid>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting}\r\n                    className={classes.submit}\r\n                >\r\n                    Submit\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                    <Grid item>\r\n                        <Link href=\"/login\" variant=\"body2\">\r\n                            Already have an account? Sign in\r\n                        </Link>\r\n                        <br/>\r\n                        <Link href=\"/register\" variant=\"body2\">\r\n                            Choose type of user\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nconst ApplicantForm = () => {\r\n    const [message, setMessage] = useState(null)\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h4\">\r\n                    Sign up\r\n                </Typography>\r\n\r\n                {message && <Alert severity=\"error\">{message}</Alert>}\r\n                <App setMessage={setMessage} classes={classes}/>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ApplicantForm\r\n\r\n","D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\RecruiterRegister.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\styles\\formStyles.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\routes\\auth\\Login.js",[],"D:\\OneDrive\\Documents\\College\\Assignments\\SSAD\\job-application-portal\\frontend\\src\\components\\forms\\LoginForm.js",["66"],{"ruleId":"67","severity":1,"message":"68","line":1,"column":9,"nodeType":"69","messageId":"70","endLine":1,"endColumn":18},{"ruleId":"67","severity":1,"message":"71","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":19},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":15,"column":1,"nodeType":"78","endLine":18,"endColumn":2},{"ruleId":"67","severity":1,"message":"79","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":21},{"ruleId":"67","severity":1,"message":"80","line":2,"column":9,"nodeType":"69","messageId":"70","endLine":2,"endColumn":17},{"ruleId":"67","severity":1,"message":"81","line":3,"column":33,"nodeType":"69","messageId":"70","endLine":3,"endColumn":44},{"ruleId":"67","severity":1,"message":"82","line":3,"column":52,"nodeType":"69","messageId":"70","endLine":3,"endColumn":56},{"ruleId":"67","severity":1,"message":"83","line":33,"column":11,"nodeType":"69","messageId":"70","endLine":33,"endColumn":18},{"ruleId":"67","severity":1,"message":"84","line":8,"column":5,"nodeType":"69","messageId":"70","endLine":8,"endColumn":15},{"ruleId":"67","severity":1,"message":"85","line":3,"column":42,"nodeType":"69","messageId":"70","endLine":3,"endColumn":47},{"ruleId":"67","severity":1,"message":"84","line":8,"column":5,"nodeType":"69","messageId":"70","endLine":8,"endColumn":15},{"ruleId":"67","severity":1,"message":"84","line":8,"column":5,"nodeType":"69","messageId":"70","endLine":8,"endColumn":15},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'authService' is defined but never used.","no-native-reassign",["86"],"no-negated-in-lhs",["87"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'RecruiterForm' is defined but never used.","'useState' is defined but never used.","'CssBaseline' is defined but never used.","'Link' is defined but never used.","'classes' is assigned a value but never used.","'makeStyles' is defined but never used.","'getIn' is defined but never used.","no-global-assign","no-unsafe-negation"]